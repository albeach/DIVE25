
/USERS/AUBREYBEACH/DOCUMENTS/GITHUB/DIVE25/DEPLOY.SH CODE IS BELOW
#!/bin/bash

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m'

# Check for environment argument
if [ -z "$1" ]; then
    echo -e "${RED}Please specify environment (dev or prod)${NC}"
    echo "Usage: $0 {dev|prod}"
    exit 1
fi

ENV=$1
DOMAIN=${ENV}

echo -e "${GREEN}Starting DIVE25 deployment for ${ENV} environment${NC}"

# Function to check if Docker is running
check_docker() {
    if ! docker info > /dev/null 2>&1; then
        echo -e "${RED}Docker is not running. Please start Docker first.${NC}"
        exit 1
    fi
}

# Function to wait for container readiness
wait_for_container() {
    local container=$1
    local max_attempts=30
    local attempt=1

    echo -e "${YELLOW}Waiting for ${container} to be ready...${NC}"
    while [ $attempt -le $max_attempts ]; do
        if docker container inspect -f '{{.State.Running}}' $container 2>/dev/null | grep -q "true"; then
            echo -e "${GREEN}${container} is ready${NC}"
            return 0
        fi
        attempt=$((attempt+1))
        sleep 2
    done
    echo -e "${RED}${container} failed to start properly${NC}"
    return 1
}

# Navigate to project directory
cd dive25

# Setup certificates
echo -e "${YELLOW}Generating certificates...${NC}"
./scripts/setup-certs.sh $ENV

# Check Docker status
check_docker

# Start containers
cd docker
echo -e "${YELLOW}Stopping any existing containers...${NC}"
docker-compose down

echo -e "${YELLOW}Starting containers...${NC}"
docker-compose up -d

# Return to project directory
cd ..

# Wait for containers to be ready
wait_for_container "pingfederate"
wait_for_container "pingaccess"
wait_for_container "pingdirectory"

# Import certificates to PingFederate
echo -e "${YELLOW}Importing certificates to PingFederate...${NC}"
docker exec pingfederate mkdir -p /opt/out/instance/server/default/conf
docker exec pingfederate keytool -importkeystore \
    -srckeystore /opt/in/certificates/${ENV}/server.p12 \
    -srcstoretype PKCS12 \
    -srcstorepass 2FederateM0re \
    -destkeystore /opt/out/instance/server/default/conf/keystore.jks \
    -deststoretype JKS \
    -deststorepass 2FederateM0re \
    -noprompt

# Import certificates to PingAccess
echo -e "${YELLOW}Importing certificates to PingAccess...${NC}"
docker exec pingaccess mkdir -p /opt/out/instance/conf
docker exec pingaccess keytool -importkeystore \
    -srckeystore /opt/in/certificates/${ENV}/server.p12 \
    -srcstoretype PKCS12 \
    -srcstorepass 2FederateM0re \
    -destkeystore /opt/out/instance/conf/keystore \
    -deststorepass 2Access \
    -noprompt

# Deploy server profiles
echo -e "${YELLOW}Deploying server profiles...${NC}"
./server-profiles/deploy-profiles.sh

# Verify deployment
echo -e "${YELLOW}Verifying deployment...${NC}"
sleep 10

# Check PingFederate
if curl -sk https://localhost:9999/pingfederate/app > /dev/null; then
    echo -e "${GREEN}PingFederate is accessible${NC}"
else
    echo -e "${RED}PingFederate verification failed${NC}"
fi

# Check PingAccess
if curl -sk https://localhost:9000 > /dev/null; then
    echo -e "${GREEN}PingAccess is accessible${NC}"
else
    echo -e "${RED}PingAccess verification failed${NC}"
fi

# Check PingDirectory
if ldapsearch -H ldaps://localhost:1636 -b "cn=config" -s base "objectclass=*" > /dev/null 2>&1; then
    echo -e "${GREEN}PingDirectory is accessible${NC}"
else
    echo -e "${RED}PingDirectory verification failed${NC}"
fi

echo -e "${GREEN}Deployment complete!${NC}"
echo -e "${GREEN}You can access:${NC}"
echo -e "PingFederate Admin Console: https://localhost:9999/pingfederate"
echo -e "PingAccess Admin Console: https://localhost:9000"
echo -e "PingDirectory LDAPS: ldaps://localhost:1636"

# Add hosts entry if not exists
if ! grep -q "dive25.local" /etc/hosts; then
    echo -e "${YELLOW}Adding dive25.local to /etc/hosts...${NC}"
    echo "127.0.0.1 dive25.local" | sudo tee -a /etc/hosts
fi

/USERS/AUBREYBEACH/DOCUMENTS/GITHUB/DIVE25/DIVE25/.ENV CODE IS BELOW
PING_IDENTITY_DEVOPS_USER=aubrey.l.beach.ctr@mail.mil
PING_IDENTITY_DEVOPS_KEY=b9cf9356-7f39-2d1b-7109-9f0b9afe5900
ENVIRONMENT=development
DOMAIN=dive25.local


/USERS/AUBREYBEACH/DOCUMENTS/GITHUB/DIVE25/DIVE25/.ENV.DEV CODE IS BELOW
PING_IDENTITY_DEVOPS_USER=aubrey.l.beach.ctr@mail.mil
PING_IDENTITY_DEVOPS_KEY=b9cf9356-7f39-2d1b-7109-9f0b9afe5900
PING_IDENTITY_PASSWORD=2FederateM0re
PA_ADMIN_PASSWORD_INITIAL=2FederateM0re
ENVIRONMENT=development
DOMAIN=dive25.local


/USERS/AUBREYBEACH/DOCUMENTS/GITHUB/DIVE25/DIVE25/.ENV.PROD CODE IS BELOW
PING_IDENTITY_DEVOPS_USER=aubrey.l.beach.ctr@mail.mil
PING_IDENTITY_DEVOPS_KEY=b9cf9356-7f39-2d1b-7109-9f0b9afe5900
PING_IDENTITY_PASSWORD=2FederateM0re
PA_ADMIN_PASSWORD_INITIAL=2FederateM0re
ENVIRONMENT=production
DOMAIN=dive25.com


/USERS/AUBREYBEACH/DOCUMENTS/GITHUB/DIVE25/DIVE25/CERTIFICATES/DEV/CA.CRT CODE IS BELOW
-----BEGIN CERTIFICATE-----
MIIFkzCCA3ugAwIBAgIUChm6+IiZs62b/3LAC5qO4Hf6P8MwDQYJKoZIhvcNAQEL
BQAwVDELMAkGA1UEBhMCVVMxCzAJBgNVBAgMAlZBMRAwDgYDVQQHDAdEZWZhdWx0
MQ8wDQYDVQQKDAZESVZFMjUxFTATBgNVBAMMDGRpdmUyNS5sb2NhbDAeFw0yNTAy
MTAwMzAyNDhaFw0yNzEyMDEwMzAyNDhaMFQxCzAJBgNVBAYTAlVTMQswCQYDVQQI
DAJWQTEQMA4GA1UEBwwHRGVmYXVsdDEPMA0GA1UECgwGRElWRTI1MRUwEwYDVQQD
DAxkaXZlMjUubG9jYWwwggIiMA0GCSqGSIb3DQEBAQUAA4ICDwAwggIKAoICAQDD
t1GpbGsmEQrS3qOpIF9HfOV86SQhFXikCOVVvOZWub+wFKNL9wcxe+EkcvLWz9vo
zA3ckKUZsIZk8Yv2DPlC4vn/E61heoRY46r0ssAEr0/8j7ZWK92l1apycz6Nn3jv
s4EUSW5xcHNmTM/O9X1gYFPTZ2GAHcU2G9hyT602GqjgzebEzx/iX5aTqmeeKN6d
8COCwa9iW1Hvr60W5ETeXAMx1CE+JAZYLx4CAXdcEIwenjuVriqw731RWoQvQ7gD
F1lnI2B0qeE5ql2F/z75PSZE77z2wwShLCSOxlc7mWhiXqDgnfDFP20gtZKL187g
GEiJq3zH9sps2/Te9VZ1FbwG9X2mcs7oW3j2/ETnIC4eDYULFrQfyqJC+dD0KYcm
K9QonMUQAJnuruf1K7M47E6N3H+J2oIpIc98xgUyV8h3AXd8jptn+5miccIcs7dO
aEjx3Pvxcnv6V1D1sPHkNpnsHOHtEr9Yyos9qIMLB1z2/YRWgJ13XQIf5t381NRb
xyEYy6XgpdwPNxxFnGH9zBZhZwFm3IPkrRv3QkCHXfbyZfHsW97cm+Br0hgTAump
PjQq56cXI5/ikChnwej3XEKjXeBHYLrHMa01/aHFh4tNafQ4EfRrH4kXhqWvwKNV
16aVlPnfd20hC+IZFwVcnMSVWE950cBXHhBg4FSjqwIDAQABo10wWzAdBgNVHQ4E
FgQUHFF8ZKX5roMmoYYONJg74yOlK9wwHwYDVR0jBBgwFoAUHFF8ZKX5roMmoYYO
NJg74yOlK9wwDAYDVR0TBAUwAwEB/zALBgNVHQ8EBAMCAQYwDQYJKoZIhvcNAQEL
BQADggIBAFsMyss0oeq1Q37AfdpiWQPGEChemfU8XQT6/uGVokOJFlpmRe3AvP4g
DmVQwOddIM0/feChZ/VsLEp5gKud4zTMKlJWaUWJZELn+kkwJ0qGaHl+ZBjlZj4o
sqfW9pe8SfdWZjLtV+la0NJNqogjxH8DBArKZ6sk06Wvm5nSHn/JZDqFnBPt8mJJ
VzVQNs+bmTeclEgakp34jB04eVJPpWP4SkWtOd52dhHaX+UQ4e3MhljamOfi7zxv
hTh+oMD0w+rpLW6ln4WhdRUAvH414qGyW4Bcg+J6Z6w8isNqR8exS5fuYdJCndjH
FLLhvtUqbJcoM4LKnar569KBqxt7MZLtQxqWIt+ROgJg5eylD5I73uowyxW2G4lG
OlLV5ittE7uZWbN8kojbnHH9Peb+2td5+6gME/R0euBRrgojZWxW827/YM51ijSJ
dTGnC7yblqX8AA5pdeI3orm0MpYnf5oI+0Doq+8DrN6vOhRctIdtM1QsJiYW21T+
QAH48W76rC3XKtBFRBXEFNnOyYQU6a1h87RpSV2mdWc5z7kBuJWr0K5WgbG0EGlb
cF86mCIxl3p8fOBRhWksIBOtuibeOi9dHXyH1UcCue1pKe6/w55S8G5jyJS20yFD
V0h9dBG2R96dHZE+xinBh68Ka/2NqCmsxOnnjurQbtJZyAFAOIhk
-----END CERTIFICATE-----


/USERS/AUBREYBEACH/DOCUMENTS/GITHUB/DIVE25/DIVE25/CERTIFICATES/DEV/CA.KEY CODE IS BELOW
-----BEGIN PRIVATE KEY-----
MIIJQwIBADANBgkqhkiG9w0BAQEFAASCCS0wggkpAgEAAoICAQDDt1GpbGsmEQrS
3qOpIF9HfOV86SQhFXikCOVVvOZWub+wFKNL9wcxe+EkcvLWz9vozA3ckKUZsIZk
8Yv2DPlC4vn/E61heoRY46r0ssAEr0/8j7ZWK92l1apycz6Nn3jvs4EUSW5xcHNm
TM/O9X1gYFPTZ2GAHcU2G9hyT602GqjgzebEzx/iX5aTqmeeKN6d8COCwa9iW1Hv
r60W5ETeXAMx1CE+JAZYLx4CAXdcEIwenjuVriqw731RWoQvQ7gDF1lnI2B0qeE5
ql2F/z75PSZE77z2wwShLCSOxlc7mWhiXqDgnfDFP20gtZKL187gGEiJq3zH9sps
2/Te9VZ1FbwG9X2mcs7oW3j2/ETnIC4eDYULFrQfyqJC+dD0KYcmK9QonMUQAJnu
ruf1K7M47E6N3H+J2oIpIc98xgUyV8h3AXd8jptn+5miccIcs7dOaEjx3Pvxcnv6
V1D1sPHkNpnsHOHtEr9Yyos9qIMLB1z2/YRWgJ13XQIf5t381NRbxyEYy6XgpdwP
NxxFnGH9zBZhZwFm3IPkrRv3QkCHXfbyZfHsW97cm+Br0hgTAumpPjQq56cXI5/i
kChnwej3XEKjXeBHYLrHMa01/aHFh4tNafQ4EfRrH4kXhqWvwKNV16aVlPnfd20h
C+IZFwVcnMSVWE950cBXHhBg4FSjqwIDAQABAoICAB3SVw0byg/Y1O9goUtp9Vqt
O0KXO7wWy3UjLd6sk+RvFTg9TMyMbXoqyBmHslzs+zMztIEBQUby0OecrpjlTS3V
7AXj9608v+HTfv8eJYgRNnzjYQMsV++m6Pvbd5KY1BKiJW7z6XI7kjnqRlfgrCP9
SYiS3hZpct1VzNtOLLRrx4PJm/otHUyfCBCkDHna/GDQcHjCDnlMNOXyvMsaKSxA
lPQIwK/5SUYyl73yfz91/gPEVIvwJ+0h8NRumGmjReyiqCrBBzd/kyP4Q5vhUrUj
jis+5GotOQ1d7owayLv6Gh+zD4xqRH+ptHUhdZz9WzZmPNdNXAwUHLANq/g1JeEZ
HrDsV1NWO20zfyo2KzISJCw539Emx0mlYrHSfpMwAQVyD/YFoVaV+NinH9oqJyeB
F7LpUmznz4YSFQxn52liCBxG2yCvReRAIBlaRXjPFB0Caq9KTsRTpNqwbM3svusy
8lIkn/OmZlNP/9AqHzm/SXefULtRWkSRAdrcyup1ZPEvQKHx7RW1++4GndmFXvCX
cFnIv6aMBUHffsFwIYZjHwrvAtGCoZ4jM8AEvtUdGBGvmb9AQTAFFjWSaeMCTYB0
5cONyOT7hYeSdZoIv2su+Re7Udqt6p5wYczZIWngg3x2oX2dX7ljlLRsZVefLbNt
6c5R05cX5RGcIq1fhNDRAoIBAQDkJ668j4KSBeoSX11ZwHyQRVe8DXu6XABQOOsI
tfA7luZe1LGaC4SplAcVx6DrU6RCOYX+T7gPqRYwEKwyzgqA0mLtgv/SZS+46GlS
7X2kf19z8+ij03kCEPN66x2BCckuwh3Ln1c7JxHThrkZnJdwC3LRe31fKd/hfxqF
h35bonBYA0ocIRrZpBJ+/AUmnK1wRGEJqKvMb+DWV4wTq3UFEy5LxAB67deUduna
6QGgNR7nJkEdn1dzfHiOZNY52w6x00Cefz2DrEDnAxBnw27iYXMby4TfjBMGZ/ih
EM3P48nNRyIccSiwg3x81EP1jaHtTLbAeDos+wpoXhFTx8GHAoIBAQDbmiMhL125
VmpXwRzOHQvUMnFcFEWDm26SwcGiPUXmwUxixyqTLH12hLwr9KntLT2ZO/InXl5S
gIfapPYU4u8y2m9eQ1ris77MF3jxvdQ20/OBB5+G1Ve3mrN10OQX/g0jsiT+ZwhS
svInLyv2VL2QKRdALOBBWmtbJgRw099rn5M92VQu2fHC8p2/+UgemM+bA6cFYPPH
H5rq5qTxSbBZrGQev7mYXO1SA/VQejxni7VDVEmduF9+wfsXDjwouhx9xY/g2Rjt
PtiIKSJlyiOepReQg+maJf1FKmutlgk3asUNPsjeEbFPCW5jOQC/6jQbXRmDihy9
oiPQtZrPm+W9AoIBAFJPCpfWAhnh7lbgdpH5gjad/Y/HIXrS0/4c+pWy5U7qGoPd
oZDcVOjEkWXHFgOvshN+Ixvi8Jkdu/ZtHWJauKlOvQfIebgSbwv7NHwJV4lvtiTj
umrX0NDxApW2mndB64Vl3E/oVRTu/FxePwrBVlTCnJJ8RXd+aNk1/IBtqCUwzezC
iwro2oHn0hBjpQwP+/YDhSpx4kCnn+pTvSIfeeDx0YLd2/p9MYfK+oTSCJcect6b
C2S/ZlIwdmGQeUR4Ba4bczV629tT2jo8/b8hXzBmTZuaaX4oT3jBK44XvNgh6lyX
K/Qs0qwTU2bJQRcmGGO+iDOZbAtsKY4LWZ7q8qMCggEBAJN++a1mVPsQ8agzSped
pr5FiyIfc3krwp7LiLThlrughR+rSgtDzJj4GjMjx6ZHxqHPQ5vxpEShk53lQmtQ
6Pws/rQ/ZSHzPGl0MoWbzJdu0JSPfDRhwuLNA1BUl38N4eFh27sLlOmGy2JKKqru
y8ux7a3q9kyu4IB+DmmBxQRST+EwwXweYmVf81hnpGr4lCg30cypC9NohPLVK1/s
8IeqZCzK9WtCrxtxESmWkE+z5HFugWtv1KQcwfsAUqPALTbEpRiOeFGQ7nq1tibM
GBSMKkGkeBhS/8Oe9GfI6DPSgLueued91quRWBVIyhocwhbG90YEU72C069w6qQa
v7kCggEBANxNfN0wyBwu31zcGl73XYw/hYBoYdrIG6Gop5ybv9W2gdJiOuNz/KEk
GTyqZT0KkfjXhGS7kWpMcuO40uSeswwjWtcAxr8LhU5SCevnt2XEMP5oLVwaQHH0
oxkTmur3gUMG/Lh9KuYv8++CdGgUnWbM2az7/of5qx5fYI0Dg2a/dmcbgxhsBtAh
e5AEmy8r/H6g2w/5cZtDKC5cfyvnbYZKumSaef8Jrdq0PPTRQ8SrqF3V9mEBu3Ae
jquau6qJlpPlsrZO6PLx6HbTyf3hLBU+UIHdr2LX6W1be6tOCWQjcqtvJRcb/xJn
gw9hzbDoiHqn49aUli9FqhlZaGBbEaU=
-----END PRIVATE KEY-----


/USERS/AUBREYBEACH/DOCUMENTS/GITHUB/DIVE25/DIVE25/CERTIFICATES/DEV/CA.SRL CODE IS BELOW
28128F55EF8D086B7A78E2CBC06D77C4B1A3AA4A


/USERS/AUBREYBEACH/DOCUMENTS/GITHUB/DIVE25/DIVE25/CERTIFICATES/DEV/SERVER.CRT CODE IS BELOW
-----BEGIN CERTIFICATE-----
MIIEzDCCArSgAwIBAgIUKBKPVe+NCGt6eOLLwG13xLGjqkowDQYJKoZIhvcNAQEL
BQAwVDELMAkGA1UEBhMCVVMxCzAJBgNVBAgMAlZBMRAwDgYDVQQHDAdEZWZhdWx0
MQ8wDQYDVQQKDAZESVZFMjUxFTATBgNVBAMMDGRpdmUyNS5sb2NhbDAeFw0yNTAy
MTAwMzAyNDhaFw0yNjAyMTAwMzAyNDhaMFQxCzAJBgNVBAYTAlVTMQswCQYDVQQI
DAJWQTEQMA4GA1UEBwwHRGVmYXVsdDEPMA0GA1UECgwGRElWRTI1MRUwEwYDVQQD
DAxkaXZlMjUubG9jYWwwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQDL
ZWUp3oaM4AkUf31EY3etGOAuZGCjTI8BgB+rwpDVdbw7DQXhag0nPx3P1UTwYj7x
FwEjNFuDofWqNDB79ZFjlgHJP+C7fEWHpO+/5cdt5zXeL6t/dIFr2G/t3yWmeFIv
kV1HmjktRHDIg9mkW8keeLY/kbQqfIXIpW/BuClYQckTeKaijSYH31/mcELGuG49
QxRNOiJgTJWUBKGa52L+6+G6eBN4VMHHjMi+MsIwwKhDTBYJ0YHUwGW9NC1q2Nwn
+qmwc9vtcBdMtD/DRfEqcrPVtVwJItLF/j/iE/9mQTIOrwZM0Vo5N1dXDz+9gLqN
15zX2U5kthtjk22WYGmPAgMBAAGjgZUwgZIwCQYDVR0TBAIwADALBgNVHQ8EBAMC
BeAwOAYDVR0RBDEwL4IMZGl2ZTI1LmxvY2Fsgg4qLmRpdmUyNS5sb2NhbIIJbG9j
YWxob3N0hwR/AAABMB0GA1UdDgQWBBRQshTcsh50wjQJ5MeiKcPWebWyKzAfBgNV
HSMEGDAWgBQcUXxkpfmugyahhg40mDvjI6Ur3DANBgkqhkiG9w0BAQsFAAOCAgEA
JvAIvBEY1N61Yte7om0PCsbRC9dz27oByps/Ly35QHZp4lRdRIBA8K3En8ZzF/Qh
ZBmQdHI2xC7mmlAs+ugUYvgT130wUU1sp1+imq69VyvyWZFOVZHj5VY1/Texhpgf
sLBmrAily2q5DgNtZtcbf2sdW+gB4Gb2KUX4Hf4+pXx2lAJDewSdGnPvirymI/DO
jaw4YQIpgbMzHWDhmL19O3lM5K5l9xmSK1wiCKcWNuTY0Zxi8lB/oKBd6zNT0rPr
eaK2EVHAaP7cdMEQc1vebro4uDrBYjWUa14vj+cBH9T1cFit4HuZ404F/uWzP4qy
U7eSHhxEai5O/O0fQDX86AEK/PiLiJhup8U8r1mPesOUmclBM83cujOT3p2gsSeM
G9oMg+M7wu7koYrPYYJJlkAzaF/pPkgE32x72ASN4WHQYrt37O2Yi2LR9EW32Hk4
PkzxvC687LMMcNPWrPBjBmQxFxVp5Qy0sw33oQ8gu1r5hLHOjOk9Gna2sVtgnsF3
tH6uigcKuV/SjrRi52sXMZCBKDEgFnzIM0vt3kqMrzeBjukDchCeZ9cufnKyL//n
OKgt4BEGzzx4U22bXUXVCWqV8nf6krylBjo4KjHbsvopIGZWoBsqXSgFr1z9cLkE
F/yVImRMi5XVYIvbRw2z1mT+kUEy05EJ4hM5/9f+hNo=
-----END CERTIFICATE-----


/USERS/AUBREYBEACH/DOCUMENTS/GITHUB/DIVE25/DIVE25/CERTIFICATES/DEV/SERVER.CSR CODE IS BELOW
-----BEGIN CERTIFICATE REQUEST-----
MIIC/DCCAeQCAQAwVDELMAkGA1UEBhMCVVMxCzAJBgNVBAgMAlZBMRAwDgYDVQQH
DAdEZWZhdWx0MQ8wDQYDVQQKDAZESVZFMjUxFTATBgNVBAMMDGRpdmUyNS5sb2Nh
bDCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBAMtlZSnehozgCRR/fURj
d60Y4C5kYKNMjwGAH6vCkNV1vDsNBeFqDSc/Hc/VRPBiPvEXASM0W4Oh9ao0MHv1
kWOWAck/4Lt8RYek77/lx23nNd4vq390gWvYb+3fJaZ4Ui+RXUeaOS1EcMiD2aRb
yR54tj+RtCp8hcilb8G4KVhByRN4pqKNJgffX+ZwQsa4bj1DFE06ImBMlZQEoZrn
Yv7r4bp4E3hUwceMyL4ywjDAqENMFgnRgdTAZb00LWrY3Cf6qbBz2+1wF0y0P8NF
8Spys9W1XAki0sX+P+IT/2ZBMg6vBkzRWjk3V1cPP72Auo3XnNfZTmS2G2OTbZZg
aY8CAwEAAaBjMGEGCSqGSIb3DQEJDjFUMFIwCQYDVR0TBAIwADALBgNVHQ8EBAMC
BeAwOAYDVR0RBDEwL4IMZGl2ZTI1LmxvY2Fsgg4qLmRpdmUyNS5sb2NhbIIJbG9j
YWxob3N0hwR/AAABMA0GCSqGSIb3DQEBCwUAA4IBAQDAMJKzhdDbYLmiOnWBLzJW
GMiAISszRot7LOJ4NlJVvkeQq80HorlO1YTBA01GGZdo+IOsqaBR5rUTf+fG2PTU
xJDJtTM9NubzfP5SnQv2M3hN3z66ULJplRHSZ+PaAlmaDFXe1n0ffuWLxnxMBiwX
VcT9AKw5PsvRg6h7crT278hq7U4xl9o9dcx4mDWsbRAoI+pHOEmY0iF26BTMRstq
aEVcmodxKRrKu9lqxqz+9SGAV8fIeeOyx7O79UD+9bvnu6ua2t76G/oB+agY0fk0
H2uKZCBvEnr0O423xrOY07yien9UVQ5MuovIsVQFqRjP8d0ADeMkqmA97zZyBs9e
-----END CERTIFICATE REQUEST-----


/USERS/AUBREYBEACH/DOCUMENTS/GITHUB/DIVE25/DIVE25/CERTIFICATES/DEV/SERVER.KEY CODE IS BELOW
-----BEGIN PRIVATE KEY-----
MIIEvQIBADANBgkqhkiG9w0BAQEFAASCBKcwggSjAgEAAoIBAQDLZWUp3oaM4AkU
f31EY3etGOAuZGCjTI8BgB+rwpDVdbw7DQXhag0nPx3P1UTwYj7xFwEjNFuDofWq
NDB79ZFjlgHJP+C7fEWHpO+/5cdt5zXeL6t/dIFr2G/t3yWmeFIvkV1HmjktRHDI
g9mkW8keeLY/kbQqfIXIpW/BuClYQckTeKaijSYH31/mcELGuG49QxRNOiJgTJWU
BKGa52L+6+G6eBN4VMHHjMi+MsIwwKhDTBYJ0YHUwGW9NC1q2Nwn+qmwc9vtcBdM
tD/DRfEqcrPVtVwJItLF/j/iE/9mQTIOrwZM0Vo5N1dXDz+9gLqN15zX2U5kthtj
k22WYGmPAgMBAAECggEAIddE9apoiJfd6uMrXG2QQ+SXqCBbU9AxGvbOTi2ZG2rz
Xn/UMqUKezUtKJ87USOHhWVmcw0LDOOtlBwK1RUOk5spwOo34fnTN7ZhjXQVslt9
wvH7fsFLpz3joZg3E3OBeRiehINMcBOrEDGfzJDY7ZD4AaukZk1BlRixd3HEr0I2
uqdu0bLKHQK3qxUU0Np9mOdt4vhcsfg85D9bHY1eu4ZcMptrWxwWfsqJFzZSPCEK
EH6wPv1Nt7AsSFKVEADX/Qs+Bd8SIhO9I8cLgFpeqlsjfzzNGUm7Ekj3rTWYByLz
y/wL7KU/MvXuMmwJ/jIFjVa1FIpPhQFaapJEDgrQQQKBgQDx4WvUltfK4tTeIyHe
jLfNboqQ9G/Gc/GNivteNZ93StYBVhvCR6ieDipy7dnBp6OsTo9/DQEsATLH6L+Q
6/e88aY4BG8nFbgbxcO6nzeHqnH8/6lNJmYkt0d8DBHKuEo9TN2Ov+9y1v7Q0u4L
YHf/MYIKrypfi/shjWy1Sy1WHQKBgQDXROAVon2r6ZOBoHKkspmNAbCnKhBslaeA
UsAHLXyZCo0mPR1x58+Zm68oIeAzAH2RDMKVKfLIp9cmLSI4I3WwQnZeHMd6Bxl6
4Y8O0+geouUnqSagfeeWrGODpN0VA7qYv/GWJh3qkl7QUk39d5xFbJMekqDwXX/T
bcz5Rcd+mwKBgQCVRqeDtexLnB3/UfNPI80zjWsa9qAc++Uxk3p6s+FMf/T/MiND
jXH0yY1NDJl9OHZ8mqdYo6/7dmnekjfXuqlUBFau752ho3fSPAUFocllgr2ChE35
/R7AvhPx7Ij2cTHwDwYVWULvvtvYCLU8dDbaWbWF3oDqIrvEA0H5yQGbyQKBgBN3
6CgsvN7aTfvQLe4VNOvatkY3+KpJUo+5bCJ6C6WvnZpStqIBi/XhbZLclXEnXzPK
CqMA2zMocr3CITEgi9k3+YqDYcr4b2Z8lbqKkZiLtNvEYXjsShCHYKycMV5gKvT7
jva8VcJMIIUInIMK2TgyHJAMRL/YROIzMPFuTR93AoGARQsX8Enn47DNuoF8/1MP
GIVEyWYXLRTbCZPHJNfgQh2vSHPytCohS/gsL7kHz1NddEcRVrfc/agB5SoKMjg1
23mU2AdUzCIZF/gbkKf5yMrvNPtnBSQ2uHCcluyAxPoYRkyNnxd2TZCSkHuVzAQC
SQryv7ry5fJYUj3MY9zAf34=
-----END PRIVATE KEY-----


/USERS/AUBREYBEACH/DOCUMENTS/GITHUB/DIVE25/DIVE25/CERTIFICATES/DEV/SERVER.P12 CODE IS BELOW
0��0��	*�H�������0��0��	*�H�����0�� 0��	*�H��0_	*�H��0R01	*�H��0$���joC��Fh��� 0*�H��	 0	`�He*A�i��b~��a���I��P���W��q��e�0,�|�󪥟��j2QLl$n���Ag�����R���軑�e
��P�(��ݘ6[%�&
qK�x����O�/�$�J~�����;�_�����$��'�CbG)�ʤ�E]bD��Ξź4��V��r91%�aG�Ol�8�G��
I�z��]���XUr>h>�7J��4�m6��:���z����U�
勨HxM*��-�1���-gC�q�rn�R՟�,)
t�S�J��F��g�
N��/~�W���b��^b�o$���\� +!��UD�<s�3Wx�(9-� ��
����;4V�qZ˦������B4	�M%��#+j�>o�q G9�}o�mC��U�ו�[�ݮ-e�e���܄�����$�d�ė~��bL,`Bp8$��'F:,�i;_��Ʃ@R]	����W���~���*�JH_M�9A3�������Z�S�'l$|�����m"/J�C�j�v�����!���׳��݇���]t���kL����c����)*��E�:4��J.m��/2�m	�[�✑��@W3!�nh����Li���pQ{�Q���g�"���H1�d�Dyz�bWP?�]��7��- �^>��[��x����6*E����L�V$Yg�e�� B%�T�?��l� �|`BY��Cm�M�������A���>��2�uH�f32cp�/�t�a��誱_��䮨��Xv��KV_s�IY UIۧ0�t)�o�5��<.�n�C���y�a��d���.��eJ�u���	��+_P����||j�;�~oZN��{AuBpA�/wF.z���g����$�5k��+qh�Zc��K'oU�E�N*���������A"C�B�~��D���
�6)�zZ��B���d'?��E�1��x&�F��~�]h�S����(���Z��[���Gk�r��jSR�Y�i���7�m&�Έ��*K�N�:�77�h�tlf_;]o�S�%y0~갆�9�"�a�?��:˯��O�aQ]�'��җ��*�>!S:n껷���z�Y���h�U7����Rr�w����,Ó��e���.�uO4� �t��WMw��u��K����P���s�ޤ�<��m��c��S;\���z��p�ʬ��;_� ���j�mk5�)��	��~��;w.�D�u�#Wa�T)���s'����e�%�� ���4��K��"GD�H����\�{:��������	������&�tר�9,4Nl����).�cnQ� �|�To���}��I�Ȧ�6�2�6P��+�M�*̿�
wWg�:c�d�1$�ؚ�W�A��D���z�U�0��	*�H�������0��0��*�H��
��90�50_	*�H��0R01	*�H��0$�\UH���K�zc'� 0*�H��	 0	`�He*d #��eq��5�+�DP���k�k�G���� L.���t�K�h�xJx�)�1��HѵF���͐	~H�+�)~�uᨈ߉裯:�q��}:(>�G��L��e��,\�}o�zG��ňU�j�x���/Z����Oh�i�3s���U%���p�፡��^!4}��\�5*B��)�����q-"��K�_�Q8�R�F��rx^����=�̫���[bEr�\(�!�1���Š�PU�QcF���C��:!�M�8""�p-ݕr���#�L}d��Yq�m�M���{�un�>|@u0�����%g�4I���H��1ο2:�>k��a9&֕|q �á�*�~B�̰8�weMC�N��FA8����L��Evo�Cˢ���A����*�����x�)a�6�z��U�f�53�)���{
	�`p�:<$ɢV�e����Hb�.o[	윞*=�#�v��;�����j�`N�En|�l3�����cj�>��q�J�3r��J�K����q��:�C|sH8%����d�s�NzOY�k�x:�ߐб۷%ߏ�ecک�Qha�8P��(��:�r�Yj�,� 6�	.Xޭ��"�F������	
���n<�#�n��[ D�2:�����]���"��t�f��O_M�G��)z ��Ni:%��ml"���H�ߌB��_�%<���(GUE��%bK�C��u�X�=3�H���.D�����@6�*�Q�*.�l{�D��_�9�fx�Xq��m�P ��!�U�f�e0^��H;y3�2�!����C��sI�����t0���'�dS!����E6�۞�z���A+�5�SzW�e	f�������keuh%��ie�C��qެ#b	-��uJHNn�zϷׇW���-$g�,�.�݉�xҋن����.g�67�9_;����׽�!J���|&��~�p�#��I�zS3��
t%jܣ�{�5�������^��d��]u���@br�FH��0��b@ ����R��.�R���A'��+�bvG]�7��1�`�����p[�1+ٴ�Dۏ�mn_�T�����sXA�e��r��:��i�І��gk�uM���j4��۳AK�:��0�˫��ϻж)7x(?8!��Hœ�a���ȋeI=�P��![ >}�8��Rza(���f��{aG�=��g� �6}��(^k%�(�e;wa����$���f�h��^�`�i����0��1B0	*�H��	1 d i v e 2 50#	*�H��	1�]��s����lI)9d�:1j�0A010	`�He  ���;����iw�C�Q�an�N�B�`S���1� 

/USERS/AUBREYBEACH/DOCUMENTS/GITHUB/DIVE25/DIVE25/CONFIG/PINGFEDERATE/PINGFEDERATESERVICE.TS CODE IS BELOW
import axios from 'axios';
import { config } from '../config/config';

export interface PingFederateUserInfo {
  sub: string;
  uniqueIdentifier: string;
  countryOfAffiliation: string;
  clearance: string;
  coiTags?: string[];
  lacvCode?: string;
  organizationalAffiliation?: string;
}

export class PingFederateService {
  private static instance: PingFederateService;
  private baseUrl: string;
  private clientId: string;
  private clientSecret: string;

  private constructor() {
    this.baseUrl = config.pingFederate.baseUrl;
    this.clientId = config.pingFederate.clientId;
    this.clientSecret = config.pingFederate.clientSecret;
  }

  public static getInstance(): PingFederateService {
    if (!PingFederateService.instance) {
      PingFederateService.instance = new PingFederateService();
    }
    return PingFederateService.instance;
  }

  async validateToken(accessToken: string): Promise<PingFederateUserInfo> {
    try {
      const response = await axios.get(`${this.baseUrl}/as/userinfo`, {
        headers: {
          Authorization: `Bearer ${accessToken}`
        }
      });

      return this.normalizeUserInfo(response.data);
    } catch (error) {
      console.error('Token validation error:', error);
      throw new Error('Invalid token');
    }
  }

  private normalizeUserInfo(rawUserInfo: any): PingFederateUserInfo {
    // Map PingFederate attributes to our normalized format
    return {
      sub: rawUserInfo.sub,
      uniqueIdentifier: rawUserInfo.uid || rawUserInfo.sub,
      countryOfAffiliation: rawUserInfo.country || rawUserInfo.countryCode,
      clearance: this.normalizeClassification(rawUserInfo.clearance),
      coiTags: this.parseCoiTags(rawUserInfo.coiTags),
      lacvCode: rawUserInfo.lacvCode,
      organizationalAffiliation: rawUserInfo.org
    };
  }

  private normalizeClassification(clearance: string): string {
    // Normalize different classification formats to our standard
    const normalizedMap: { [key: string]: string } = {
      'NU': 'UNCLASSIFIED',
      'NR': 'RESTRICTED',
      'NC': 'NATO CONFIDENTIAL',
      'NS': 'NATO SECRET',
      'CTS': 'COSMIC TOP SECRET',
      // Add more mappings as needed
    };

    return normalizedMap[clearance] || clearance;
  }

  private parseCoiTags(coiTags: string | string[]): string[] {
    if (!coiTags) return [];
    if (Array.isArray(coiTags)) return coiTags;
    return coiTags.split(',').map(tag => tag.trim());
  }
}

/USERS/AUBREYBEACH/DOCUMENTS/GITHUB/DIVE25/DIVE25/DEPLOY.SH CODE IS BELOW
#!/bin/bash

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m'

ENV=$1
DOMAIN=${ENV:-"dev"}

echo -e "${GREEN}Starting DIVE25 deployment for ${ENV} environment${NC}"

# Setup certificates
echo -e "${YELLOW}Generating certificates...${NC}"
./scripts/setup-certs.sh

# Import certificates to PingFederate
echo -e "${YELLOW}Importing certificates to PingFederate...${NC}"
docker exec pingfederate keytool -importkeystore \
    -srckeystore /opt/in/certificates/dev/server.p12 \
    -srcstoretype PKCS12 \
    -srcstorepass 2FederateM0re \
    -destkeystore /opt/out/instance/server/default/conf/keystore.jks \
    -deststoretype JKS \
    -deststorepass 2FederateM0re \
    -noprompt

# Import certificates to PingAccess
echo -e "${YELLOW}Importing certificates to PingAccess...${NC}"
docker exec pingaccess keytool -importkeystore \
    -srckeystore /opt/in/certificates/dev/server.p12 \
    -srcstoretype PKCS12 \
    -srcstorepass 2FederateM0re \
    -destkeystore /opt/out/instance/conf/keystore \
    -deststorepass 2Access \
    -noprompt

# Deploy server profiles
echo -e "${YELLOW}Deploying server profiles...${NC}"
./server-profiles/deploy-profiles.sh

echo -e "${GREEN}Deployment complete!${NC}"


/USERS/AUBREYBEACH/DOCUMENTS/GITHUB/DIVE25/DIVE25/DOCKER/.ENV CODE IS BELOW
PING_IDENTITY_ACCEPT_EULA=YES
PING_IDENTITY_DEVOPS_USER=aubrey.l.beach.ctr@mail.mil
PING_IDENTITY_DEVOPS_KEY=b9cf9356-7f39-2d1b-7109-9f0b9afe5900
PING_IDENTITY_PASSWORD=2FederateM0re
PA_ADMIN_PASSWORD_INITIAL=2FederateM0re
PA_ADMIN_USER_PASSWORD=2FederateM0re
PF_ADMIN_USER_PASSWORD=2FederateM0re
PD_ADMIN_USER_PASSWORD=2FederateM0re

/USERS/AUBREYBEACH/DOCUMENTS/GITHUB/DIVE25/DIVE25/DOCKER/DEPLOY.SH CODE IS BELOW
#!/bin/bash

# deployment.sh
# DIVE25 Initial Deployment Script

# Color codes for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Logging function
log() {
    local level=$1
    shift
    local message=$@
    timestamp=$(date '+%Y-%m-%d %H:%M:%S')
    case $level in
        "INFO")
            echo -e "${GREEN}[INFO]${NC} ${timestamp} - $message"
            ;;
        "WARN")
            echo -e "${YELLOW}[WARN]${NC} ${timestamp} - $message"
            ;;
        "ERROR")
            echo -e "${RED}[ERROR]${NC} ${timestamp} - $message"
            ;;
    esac
}

# Error handling
set -e
trap 'log "ERROR" "An error occurred on line $LINENO. Exiting..."; exit 1' ERR

# Check prerequisites
check_prerequisites() {
    log "INFO" "Checking prerequisites..."
    
    # Check Docker
    if ! command -v docker &> /dev/null; then
        log "ERROR" "Docker is not installed. Please install Docker first."
        exit 1
    fi

    # Check Node.js
    if ! command -v node &> /dev/null; then
        log "ERROR" "Node.js is not installed. Please install Node.js first."
        exit 1
    fi

    # Check kubectl
    if ! command -v kubectl &> /dev/null; then
        log "ERROR" "kubectl is not installed. Please install kubectl first."
        exit 1
    fi

    # Check helm
    if ! command -v helm &> /dev/null; then
        log "ERROR" "Helm is not installed. Please install Helm first."
        exit 1
    fi

    log "INFO" "All prerequisites satisfied."
}

# Create directory structure
create_directory_structure() {
    log "INFO" "Creating directory structure..."
    
    mkdir -p dive25/{src,docker,config,licenses,helm,scripts}
    mkdir -p dive25/src/{backend,policies,wordpress}
    mkdir -p dive25/docker/monitoring
    mkdir -p dive25/config/{pingfederate,pingaccess,pingdirectory}
    
    log "INFO" "Directory structure created successfully."
}

# Check and copy license files
setup_licenses() {
    log "INFO" "Setting up license files..."
    
    local license_dir="dive25/licenses"
    
    # Check for required license files
    for product in "pingfederate" "pingaccess" "pingdirectory"; do
        if [[ ! -f "input/${product}.lic" ]]; then
            log "ERROR" "Missing license file: ${product}.lic"
            exit 1
        fi
        cp "input/${product}.lic" "${license_dir}/"
    done
    
    log "INFO" "License files copied successfully."
}

# Generate configuration files
generate_configs() {
    log "INFO" "Generating configuration files..."
    
    # Generate .env file
    cat > dive25/.env << EOL
# Environment
NODE_ENV=development
PORT=3001

# Ping Identity
PING_IDENTITY_DEVOPS_USER=${PING_IDENTITY_DEVOPS_USER:-""}
PING_IDENTITY_DEVOPS_KEY=${PING_IDENTITY_DEVOPS_KEY:-""}

# MongoDB
MONGO_URI=mongodb://localhost:27017/dive25

# Redis
REDIS_URL=redis://localhost:6379

# Domain settings
DOMAIN_DEV=dive25.local
DOMAIN_PROD=dive25.com
EOL

    log "INFO" "Configuration files generated successfully."
}

# Setup Docker environment
setup_docker() {
    log "INFO" "Setting up Docker environment..."
    
    cd dive25/docker
    
    # Copy docker-compose file
    cat > docker-compose.yml << EOL
# ... (previous docker-compose content) ...
EOL

    # Start containers
    docker-compose up -d
    
    # Wait for containers to be ready
    sleep 30
    
    # Verify containers are running
    if ! docker-compose ps | grep -q "Up"; then
        log "ERROR" "Container startup failed. Please check docker-compose logs."
        exit 1
    fi
    
    cd ../
    log "INFO" "Docker environment setup successfully."
}

# Initialize backend
setup_backend() {
    log "INFO" "Setting up backend..."
    
    cd dive25/src/backend
    
    # Initialize Node.js project
    npm init -y
    
    # Install dependencies
    npm install express express-jwt mongodb @open-policy-agent/opa-wasm axios dotenv helmet cors winston ldapjs
    npm install --save-dev typescript @types/express @types/node ts-node nodemon
    
    # Copy TypeScript configuration
    cat > tsconfig.json << EOL
{
    "compilerOptions": {
        "target": "es2020",
        "module": "commonjs",
        "outDir": "./dist",
        "rootDir": "./src",
        "strict": true,
        "esModuleInterop": true,
        "skipLibCheck": true,
        "forceConsistentCasingInFileNames": true
    },
    "include": ["src/**/*"],
    "exclude": ["node_modules"]
}
EOL

    cd ../../
    log "INFO" "Backend setup completed successfully."
}

# Deploy monitoring stack
setup_monitoring() {
    log "INFO" "Setting up monitoring stack..."
    
    cd dive25/docker/monitoring
    
    # Deploy Prometheus and Grafana
    docker-compose -f monitoring-stack.yml up -d
    
    cd ../../
    log "INFO" "Monitoring stack deployed successfully."
}

# Main deployment function
main() {
    log "INFO" "Starting DIVE25 deployment..."
    
    # Run deployment steps
    check_prerequisites
    create_directory_structure
    setup_licenses
    generate_configs
    setup_docker
    setup_backend
    setup_monitoring
    
    log "INFO" "Initial deployment completed successfully."
    log "INFO" "Please configure PingFederate and PingAccess using the admin consoles:"
    log "INFO" "PingFederate: https://localhost:9999/pingfederate"
    log "INFO" "PingAccess: https://localhost:9000"
}

# Script execution
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    # Check if running with correct permissions
    if [[ $EUID -ne 0 ]]; then
        log "ERROR" "This script must be run as root or with sudo"
        exit 1
    fi
    
    # Parse command line arguments
    while [[ $# -gt 0 ]]; do
        case $1 in
            --ping-user)
                PING_IDENTITY_DEVOPS_USER="$2"
                shift 2
                ;;
            --ping-key)
                PING_IDENTITY_DEVOPS_KEY="$2"
                shift 2
                ;;
            --help)
                echo "Usage: $0 --ping-user <username> --ping-key <key>"
                exit 0
                ;;
            *)
                log "ERROR" "Unknown parameter: $1"
                exit 1
                ;;
        esac
    done
    
    # Validate required parameters
    if [[ -z "$PING_IDENTITY_DEVOPS_USER" || -z "$PING_IDENTITY_DEVOPS_KEY" ]]; then
        log "ERROR" "Ping Identity credentials are required"
        echo "Usage: $0 --ping-user <username> --ping-key <key>"
        exit 1
    fi
    
    # Execute main function
    main
fi

/USERS/AUBREYBEACH/DOCUMENTS/GITHUB/DIVE25/DIVE25/DOCKER/DOCKER-COMPOSE.YML CODE IS BELOW
# docker/docker-compose.yml
services:
  pingfederate:
    container_name: pingfederate
    image: pingidentity/pingfederate:12.2.0-latest
    env_file:
      - ../.env
    environment:
      - PING_IDENTITY_ACCEPT_EULA=YES
      - PING_IDENTITY_DEVOPS_USER=${PING_IDENTITY_DEVOPS_USER}
      - PING_IDENTITY_DEVOPS_KEY=${PING_IDENTITY_DEVOPS_KEY}
      - PING_IDENTITY_PASSWORD=2FederateM0re
      - PF_ADMIN_USER_PASSWORD=2FederateM0re
      - PF_LICENSE_FILE=/opt/in/licenses/pingfederate.lic
    volumes:
      - ../licenses:/opt/in/licenses
      - ../server-profiles/pingfederate/instance:/opt/in/instance
      - ../certificates:/opt/in/certificates
      - pingfederate-out:/opt/out
    ports:
      - "9999:9999"
      - "9031:9031"
    networks:
      - dive25-net

  pingaccess:
    container_name: pingaccess
    image: pingidentity/pingaccess:8.2.0-latest
    environment:
      - PING_IDENTITY_ACCEPT_EULA=YES
      - PING_IDENTITY_DEVOPS_USER=${PING_IDENTITY_DEVOPS_USER}
      - PING_IDENTITY_DEVOPS_KEY=${PING_IDENTITY_DEVOPS_KEY}
      - PING_IDENTITY_PASSWORD=2FederateM0re
      - PA_ADMIN_PASSWORD_INITIAL=2FederateM0re
      - PA_ADMIN_USER_PASSWORD=2FederateM0re
    env_file:
      - ../server-profiles/pingaccess/instance/conf/pingaccess.env
      - ../.env
    command: ["sh", "-c", "export PA_ADMIN_PASSWORD_INITIAL=2FederateM0re && export PING_IDENTITY_PASSWORD=2FederateM0re && /opt/entrypoint.sh start-server"]
    volumes:
      - ../licenses:/opt/in/licenses
      - ../certificates:/opt/in/certificates
      - ../server-profiles/pingaccess/instance:/opt/in/instance
      - pingaccess-out:/opt/out
    ports:
      - "9000:9000"
      - "3000:3000"
    networks:
      - dive25-net

  pingdirectory:
    container_name: pingdirectory
    image: pingidentity/pingdirectory:10.2.0.0-latest
    env_file:
      - ../.env
    environment:
      - PING_IDENTITY_ACCEPT_EULA=YES
      - PING_IDENTITY_DEVOPS_USER=${PING_IDENTITY_DEVOPS_USER}
      - PING_IDENTITY_DEVOPS_KEY=${PING_IDENTITY_DEVOPS_KEY}
      - PING_IDENTITY_PASSWORD=2FederateM0re
      - PD_ADMIN_USER_PASSWORD=2FederateM0re
      - PD_LICENSE_FILE=/opt/in/licenses/pingdirectory.lic
    volumes:
      - ../licenses:/opt/in/licenses
      - ../server-profiles/pingdirectory:/opt/in/instance
      - ../certificates:/opt/in/certificates
      - pingdirectory-out:/opt/out
    ports:
      - "1636:636"
      - "1389:389"
    networks:
      - dive25-net

volumes:
  pingfederate-out:
  pingaccess-out:
  pingdirectory-out:

networks:
  dive25-net:
    driver: bridge

/USERS/AUBREYBEACH/DOCUMENTS/GITHUB/DIVE25/DIVE25/DOCKER/MONITORING/ALERTMANAGER/ALERTMANAGER.YML CODE IS BELOW
# docker/monitoring/alertmanager/alertmanager.yml
global:
  slack_api_url: '${SLACK_WEBHOOK_URL}'
  resolve_timeout: 5m

route:
  group_by: ['alertname', 'cluster', 'service']
  group_wait: 30s
  group_interval: 5m
  repeat_interval: 4h
  receiver: 'team-federation'
  routes:
    - match:
        severity: critical
      receiver: 'team-federation-urgent'
      repeat_interval: 1h

receivers:
  - name: 'team-federation'
    slack_configs:
      - channel: '#federation-alerts'
        title: '{{ template "slack.title" . }}'
        text: '{{ template "slack.text" . }}'
        send_resolved: true

  - name: 'team-federation-urgent'
    slack_configs:
      - channel: '#federation-alerts-urgent'
        title: '{{ template "slack.title" . }}'
        text: '{{ template "slack.text" . }}'
        send_resolved: true
    pagerduty_configs:
      - service_key: '${PAGERDUTY_SERVICE_KEY}'
        description: '{{ template "pagerduty.description" . }}'

templates:
  - '/etc/alertmanager/templates/*.tmpl'

/USERS/AUBREYBEACH/DOCUMENTS/GITHUB/DIVE25/DIVE25/DOCKER/MONITORING/DOCKER-COMPOSE.YML CODE IS BELOW
# docker/monitoring/docker-compose.yml
version: '3.8'

services:
  prometheus:
    image: prom/prometheus:latest
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    ports:
      - "9090:9090"
    networks:
      - monitoring_net

  grafana:
    image: grafana/grafana:latest
    volumes:
      - ./grafana/provisioning:/etc/grafana/provisioning
      - ./grafana/dashboards:/var/lib/grafana/dashboards
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
    ports:
      - "3000:3000"
    networks:
      - monitoring_net
    depends_on:
      - prometheus

  alertmanager:
    image: prom/alertmanager:latest
    volumes:
      - ./alertmanager/alertmanager.yml:/etc/alertmanager/alertmanager.yml
    ports:
      - "9093:9093"
    networks:
      - monitoring_net
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
      - '--storage.path=/alertmanager'

networks:
  monitoring_net:
    driver: bridge

volumes:
  prometheus_data:

/USERS/AUBREYBEACH/DOCUMENTS/GITHUB/DIVE25/DIVE25/DOCKER/MONITORING/GRAFANA/DASHBOARDS/FEDERATION-OVERVIEW.JSON CODE IS BELOW
// docker/monitoring/grafana/dashboards/federation-overview.json
{
    "dashboard": {
      "id": null,
      "title": "Federation Overview",
      "tags": ["federation", "dive25"],
      "timezone": "browser",
      "panels": [
        {
          "title": "Authentication Success Rate",
          "type": "gauge",
          "gridPos": {
            "h": 8,
            "w": 8,
            "x": 0,
            "y": 0
          },
          "targets": [
            {
              "expr": "rate(federation_auth_attempts_total[5m] - federation_auth_failures_total[5m]) / rate(federation_auth_attempts_total[5m])",
              "refId": "A"
            }
          ],
          "options": {
            "thresholds": [
              { "value": 0.9, "color": "red" },
              { "value": 0.95, "color": "yellow" },
              { "value": 0.98, "color": "green" }
            ]
          }
        },
        {
          "title": "Partner Health Status",
          "type": "table",
          "gridPos": {
            "h": 8,
            "w": 16,
            "x": 8,
            "y": 0
          },
          "targets": [
            {
              "expr": "federation_partner_health",
              "instant": true,
              "refId": "A"
            }
          ],
          "transformations": [
            {
              "type": "value_mapping",
              "options": {
                "mappings": [
                  { "value": "0", "text": "Down", "color": "red" },
                  { "value": "1", "text": "Degraded", "color": "yellow" },
                  { "value": "2", "text": "Healthy", "color": "green" }
                ]
              }
            }
          ]
        }
      ]
    }
  }

/USERS/AUBREYBEACH/DOCUMENTS/GITHUB/DIVE25/DIVE25/DOCKER/MONITORING/PROMETHEUS/ALERT.RULES.YML CODE IS BELOW
# docker/monitoring/prometheus/alert.rules.yml
groups:
  - name: federation_alerts
    rules:
      - alert: HighAuthFailureRate
        expr: rate(federation_auth_failures_total[5m]) / rate(federation_auth_attempts_total[5m]) > 0.1
        for: 5m
        labels:
          severity: warning
        annotations:
          summary: High authentication failure rate
          description: Authentication failure rate is above 10% for the last 5 minutes

      - alert: PartnerDown
        expr: federation_partner_health == 0
        for: 5m
        labels:
          severity: critical
        annotations:
          summary: Federation partner is down
          description: Federation partner {{ $labels.partner_id }} is down

      - alert: SlowResponseTime
        expr: federation_response_time_seconds > 2
        for: 5m
        labels:
          severity: warning
        annotations:
          summary: Slow federation response time
          description: Federation response time is above 2 seconds

/USERS/AUBREYBEACH/DOCUMENTS/GITHUB/DIVE25/DIVE25/DOCKER/MONITORING/PROMETHEUS/PROMETHEUS.YML CODE IS BELOW
# docker/monitoring/prometheus/prometheus.yml
global:
  scrape_interval: 15s
  evaluation_interval: 15s

rule_files:
  - 'alert.rules.yml'

alerting:
  alertmanagers:
    - static_configs:
        - targets:
          - 'alertmanager:9093'

scrape_configs:
  - job_name: 'dive25-federation'
    static_configs:
      - targets: ['dive25-api:3001']
    metrics_path: '/metrics'

  - job_name: 'pingfederate'
    static_configs:
      - targets: ['pingfederate:9999']
    metrics_path: '/pf/monitor/metrics'
    basic_auth:
      username: ${PF_ADMIN_USERNAME}
      password: ${PF_ADMIN_PASSWORD}

/USERS/AUBREYBEACH/DOCUMENTS/GITHUB/DIVE25/DIVE25/HELM/CHART.YAML CODE IS BELOW
apiVersion: v2
name: dive25
description: NATO Document Access System with Ping Identity Integration
version: 0.1.0
appVersion: "1.0.0"
dependencies:
  - name: ping-devops
    version: "0.9.9"
    repository: "https://helm.pingidentity.com/"

/USERS/AUBREYBEACH/DOCUMENTS/GITHUB/DIVE25/DIVE25/HELM/TEMPLATES/LICENSE-SECRET.YAML CODE IS BELOW
apiVersion: v1
kind: Secret
metadata:
  name: ping-license-files
type: Opaque
data:
  pingfederate.lic: {{ .Files.Get "licenses/pingfederate.lic" | b64enc }}
  pingaccess.lic: {{ .Files.Get "licenses/pingaccess.lic" | b64enc }}
  pingdirectory.lic: {{ .Files.Get "licenses/pingdirectory.lic" | b64enc }}

/USERS/AUBREYBEACH/DOCUMENTS/GITHUB/DIVE25/DIVE25/HELM/VALUES-PROD.YML CODE IS BELOW
# helm/values-prod.yaml
global:
  environment: production
  domain: dive25.com

pingfederate:
  replicas: 2
  resources:
    requests:
      memory: "4Gi"
      cpu: "2"
    limits:
      memory: "8Gi"
      cpu: "4"

pingaccess:
  replicas: 2
  resources:
    requests:
      memory: "2Gi"
      cpu: "1"
    limits:
      memory: "4Gi"
      cpu: "2"

api:
  replicas: 3
  resources:
    requests:
      memory: "1Gi"
      cpu: "500m"
    limits:
      memory: "2Gi"
      cpu: "1"

monitoring:
  enabled: true
  grafana:
    adminPassword: ${GRAFANA_ADMIN_PASSWORD}
  alertmanager:
    receivers:
      - name: 'team-federation'
        slack_configs:
          - channel: '#federation-alerts'
            api_url: ${SLACK_WEBHOOK_URL}

redis:
  cluster:
    enabled: true
    slaveCount: 2

mongodb:
  replicaSet:
    enabled: true
    replicas: 3

/USERS/AUBREYBEACH/DOCUMENTS/GITHUB/DIVE25/DIVE25/HELM/VALUES.YAML CODE IS BELOW
global:
  image:
    repository: pingidentity
  license:
    acceptEula: true
    licenseFileSecret: ping-license-files

pingfederate-admin:
  enabled: true
  container:
    resources:
      requests:
        cpu: "1"
        memory: "2Gi"
      limits:
        cpu: "2"
        memory: "4Gi"
  license:
    useDevLicense: false
    mountPath: /opt/in/instance/server/default/conf/pingfederate.lic
  
pingfederate-engine:
  enabled: true
  container:
    resources:
      requests:
        cpu: "1"
        memory: "2Gi"
      limits:
        cpu: "2"
        memory: "4Gi"

pingaccess-admin:
  enabled: true
  container:
    resources:
      requests:
        cpu: "1"
        memory: "1Gi"
      limits:
        cpu: "2"
        memory: "2Gi"

pingaccess-engine:
  enabled: true
  container:
    resources:
      requests:
        cpu: "1"
        memory: "1Gi"
      limits:
        cpu: "2"
        memory: "2Gi"

pingdirectory:
  enabled: true
  container:
    resources:
      requests:
        cpu: "1"
        memory: "2Gi"
      limits:
        cpu: "2"
        memory: "4Gi"

/USERS/AUBREYBEACH/DOCUMENTS/GITHUB/DIVE25/DIVE25/LICENSES/PINGACCESS.LIC CODE IS BELOW
ID=00757626
Product=PingAccess
Version=8.2
EnforcementType=3
Tier=Free
IssueDate=2025-01-29
ExpirationDate=2025-03-01
GracePeriod=1
DeploymentMethod=Traditional
Name=PingAccess-8.2-Development
SignCode=FF03
Signature=302D02150091115F807DDD5A4B7BD87E069F1B6455E92A154002146419FA54C07D0BC299064BE8786DCE61327CD6DD

/USERS/AUBREYBEACH/DOCUMENTS/GITHUB/DIVE25/DIVE25/LICENSES/PINGDIRECTORY.LIC CODE IS BELOW
ID=00755094
Product=PingDirectory
Version=10.2.0.0
EnforcementType=3
Tier=Free
IssueDate=2025-01-21
ExpirationDate=2025-04-30
GracePeriod=1
DeploymentMethod=Traditional
Name=PingDirectory-10.2.0.0-Development
SignCode=FF03
Signature=302C02142280335A1BA552F81589DB551BBFDE79F2C3A1D002146E1C7A4E9CB4D5BE6FF56FD3BF20C9769ADA2FA0

/USERS/AUBREYBEACH/DOCUMENTS/GITHUB/DIVE25/DIVE25/LICENSES/PINGFEDERATE.LIC CODE IS BELOW
ID=00735459
WSTrustSTS=true
OAuth=true
SaasProvisioning=true
Product=PingFederate
Version=12.1
EnforcementType=3
Tier=Free
IssueDate=2024-11-21
ExpirationDate=2025-03-01
GracePeriod=1
DeploymentMethod=Traditional
SignCode=FF0F
Signature=302C0214469A8FC86A4123451531600F332EFBDCA8BC9F58021432D21CF52CB6DBBADC0FD803DEDB1E1114D5D377

/USERS/AUBREYBEACH/DOCUMENTS/GITHUB/DIVE25/DIVE25/OPENSSL.CNF CODE IS BELOW
[ req ]
default_bits = 2048
prompt = no
default_md = sha256
req_extensions = v3_req
distinguished_name = dn
x509_extensions = v3_ca

[ dn ]
C = US
ST = VA
L = Default
O = DIVE25
CN = dive25.local

[ v3_req ]
basicConstraints = CA:FALSE
keyUsage = nonRepudiation, digitalSignature, keyEncipherment
subjectAltName = @alt_names

[ v3_ca ]
subjectKeyIdentifier=hash
authorityKeyIdentifier=keyid:always,issuer
basicConstraints = CA:true
keyUsage = keyCertSign, cRLSign

[ alt_names ]
DNS.1 = dive25.local
DNS.2 = *.dive25.local
DNS.3 = localhost
IP.1 = 127.0.0.1


/USERS/AUBREYBEACH/DOCUMENTS/GITHUB/DIVE25/DIVE25/SCRIPTS/CERT-MANAGER.SH CODE IS BELOW
#!/bin/bash
# dive25/scripts/cert-manager.sh

generate_certs() {
    local env=$1
    local domain=$2
    
    # Generate root CA
    openssl genrsa -out ca.key 4096
    openssl req -new -x509 -sha256 -days 1095 -key ca.key -out ca.crt \
        -subj "/C=US/ST=VA/L=Default/O=DIVE25/CN=DIVE25 Root CA"

    # Generate server certificate
    openssl genrsa -out server.key 2048
    openssl req -new -key server.key -out server.csr \
        -subj "/C=US/ST=VA/L=Default/O=DIVE25/CN=${domain}"

    # Sign server certificate
    openssl x509 -req -sha256 -days 365 -in server.csr \
        -CA ca.crt -CAkey ca.key -CAcreateserial \
        -out server.crt

    # Move certificates to appropriate locations
    mkdir -p dive25/certificates/${env}
    mv {ca,server}.{key,crt} dive25/certificates/${env}/
    rm server.csr ca.srl
}

# Usage
case "$1" in
    "dev")
        generate_certs "dev" "dive25.local"
        ;;
    "prod")
        generate_certs "prod" "dive25.com"
        ;;
    *)
        echo "Usage: $0 {dev|prod}"
        exit 1
        ;;
esac

/USERS/AUBREYBEACH/DOCUMENTS/GITHUB/DIVE25/DIVE25/SCRIPTS/MONITOR.SH CODE IS BELOW
#!/bin/bash
# dive25/scripts/monitor.sh

check_services() {
    services=("pingfederate:9031" "pingaccess:3000" "pingdirectory:1636")
    
    for service in "${services[@]}"; do
        IFS=':' read -r name port <<< "$service"
        if curl -sf https://${DOMAIN}:${port}/heartbeat.ping > /dev/null; then
            echo -e "${GREEN}${name} is healthy${NC}"
        else
            echo -e "${RED}${name} is not responding${NC}"
        fi
    done
}

while true; do
    check_services
    sleep 60
done

/USERS/AUBREYBEACH/DOCUMENTS/GITHUB/DIVE25/DIVE25/SCRIPTS/SECURITY/OAUTH-SECURITY-SCANNER.TS CODE IS BELOW
// scripts/security/oauth-security-scanner.ts
import { readFileSync, readdirSync } from 'fs';
import { join } from 'path';

interface OAuthSecurityCheck {
  id: string;
  description: string;
  severity: 'LOW' | 'MEDIUM' | 'HIGH' | 'CRITICAL';
  check: (config: any) => boolean;
}

const oauthChecks: OAuthSecurityCheck[] = [
  {
    id: 'OAUTH001',
    description: 'Insecure grant type detected',
    severity: 'HIGH',
    check: (config) => {
      const allowedGrants = ['authorization_code', 'client_credentials'];
      return config.grantTypes.every((grant: string) => 
        allowedGrants.includes(grant));
    }
  },
  {
    id: 'OAUTH002',
    description: 'Missing PKCE requirement',
    severity: 'HIGH',
    check: (config) => config.requirePKCE === true
  },
  {
    id: 'OAUTH003',
    description: 'Insufficient token lifetime',
    severity: 'MEDIUM',
    check: (config) => {
      const maxLifetime = 3600; // 1 hour
      return config.accessTokenLifetime <= maxLifetime;
    }
  }
];

async function analyzeOAuthConfig(configPath: string): Promise<void> {
  // Implementation similar to SAML analyzer
}

/USERS/AUBREYBEACH/DOCUMENTS/GITHUB/DIVE25/DIVE25/SCRIPTS/SECURITY/SAML-CONFIG-ANALYZER.TS CODE IS BELOW
// scripts/security/saml-config-analyzer.ts
import { readFileSync, readdirSync } from 'fs';
import { join } from 'path';
import { XMLParser } from 'fast-xml-parser';

interface SecurityCheck {
  id: string;
  description: string;
  severity: 'LOW' | 'MEDIUM' | 'HIGH' | 'CRITICAL';
  check: (config: any) => boolean;
}

const securityChecks: SecurityCheck[] = [
  {
    id: 'SAML001',
    description: 'Weak signature algorithm detected',
    severity: 'HIGH',
    check: (config) => {
      const allowedAlgorithms = ['RSA-SHA256', 'RSA-SHA512'];
      return allowedAlgorithms.includes(config.signatureAlgorithm);
    }
  },
  {
    id: 'SAML002',
    description: 'Missing signature validation requirement',
    severity: 'CRITICAL',
    check: (config) => config.requireSignedAssertions === true
  },
  {
    id: 'SAML003',
    description: 'Insufficient session timeout',
    severity: 'MEDIUM',
    check: (config) => (config.sessionTimeout || 0) <= 3600
  }
];

async function analyzeSAMLConfig(configPath: string): Promise<void> {
  const files = readdirSync(configPath);
  const violations: any[] = [];

  for (const file of files) {
    if (file.endsWith('.xml')) {
      const content = readFileSync(join(configPath, file), 'utf-8');
      const parser = new XMLParser();
      const config = parser.parse(content);

      for (const check of securityChecks) {
        if (!check.check(config)) {
          violations.push({
            file,
            ...check
          });
        }
      }
    }
  }

  if (violations.length > 0) {
    console.error('SAML Security violations found:', violations);
    process.exit(1);
  }
}

/USERS/AUBREYBEACH/DOCUMENTS/GITHUB/DIVE25/DIVE25/SCRIPTS/SETUP-CERTS.SH CODE IS BELOW
#!/bin/bash
# dive25/scripts/setup-certs.sh

# Create OpenSSL configuration
cat > openssl.cnf << EOL
[ req ]
default_bits = 2048
prompt = no
default_md = sha256
req_extensions = v3_req
distinguished_name = dn
x509_extensions = v3_ca

[ dn ]
C = US
ST = VA
L = Default
O = DIVE25
CN = dive25.local

[ v3_req ]
basicConstraints = CA:FALSE
keyUsage = nonRepudiation, digitalSignature, keyEncipherment
subjectAltName = @alt_names

[ v3_ca ]
subjectKeyIdentifier=hash
authorityKeyIdentifier=keyid:always,issuer
basicConstraints = CA:true
keyUsage = keyCertSign, cRLSign

[ alt_names ]
DNS.1 = dive25.local
DNS.2 = *.dive25.local
DNS.3 = localhost
IP.1 = 127.0.0.1
EOL

# Create directory structure
mkdir -p certificates/{dev,prod}

# Generate certificates for development
generate_dev_certs() {
    cd certificates/dev

    # Generate CA key and certificate
    openssl genrsa -out ca.key 4096
    openssl req -x509 -new -nodes -key ca.key -sha256 -days 1024 -out ca.crt \
        -config ../../openssl.cnf -extensions v3_ca

    # Generate server key and CSR
    openssl genrsa -out server.key 2048
    openssl req -new -key server.key -out server.csr \
        -config ../../openssl.cnf

    # Sign the certificate
    openssl x509 -req -in server.csr -CA ca.crt -CAkey ca.key \
        -CAcreateserial -out server.crt -days 365 \
        -sha256 -extfile ../../openssl.cnf -extensions v3_req

    # Create PKCS12 file for Java keystores
    openssl pkcs12 -export -in server.crt -inkey server.key \
        -out server.p12 -name dive25 \
        -CAfile ca.crt -caname root \
        -password pass:2FederateM0re

    cd ../..
}

# Updated deployment script
cat > deploy.sh << 'EOL'
#!/bin/bash

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m'

ENV=$1
DOMAIN=${ENV:-"dev"}

echo -e "${GREEN}Starting DIVE25 deployment for ${ENV} environment${NC}"

# Setup certificates
echo -e "${YELLOW}Generating certificates...${NC}"
./scripts/setup-certs.sh

# Import certificates to PingFederate
echo -e "${YELLOW}Importing certificates to PingFederate...${NC}"
docker exec pingfederate keytool -importkeystore \
    -srckeystore /opt/in/certificates/dev/server.p12 \
    -srcstoretype PKCS12 \
    -srcstorepass 2FederateM0re \
    -destkeystore /opt/out/instance/server/default/conf/keystore.jks \
    -deststoretype JKS \
    -deststorepass 2FederateM0re \
    -noprompt

# Import certificates to PingAccess
echo -e "${YELLOW}Importing certificates to PingAccess...${NC}"
docker exec pingaccess keytool -importkeystore \
    -srckeystore /opt/in/certificates/dev/server.p12 \
    -srcstoretype PKCS12 \
    -srcstorepass 2FederateM0re \
    -destkeystore /opt/out/instance/conf/keystore \
    -deststorepass 2Access \
    -noprompt

# Deploy server profiles
echo -e "${YELLOW}Deploying server profiles...${NC}"
./server-profiles/deploy-profiles.sh

echo -e "${GREEN}Deployment complete!${NC}"
EOL

chmod +x deploy.sh

# Create docker-compose extension for certificate mounting
cat > docker-compose.override.yml << EOL
version: '3.8'

services:
  pingfederate:
    volumes:
      - ./certificates:/opt/in/certificates
      
  pingaccess:
    volumes:
      - ./certificates:/opt/in/certificates
      
  pingdirectory:
    volumes:
      - ./certificates:/opt/in/certificates
EOL

# Execute certificate generation
generate_dev_certs

echo "Certificate setup complete!"

chmod +x scripts/setup-certs.sh

/USERS/AUBREYBEACH/DOCUMENTS/GITHUB/DIVE25/DIVE25/SERVER-PROFILES/DEPLOY-PROFILES.SH CODE IS BELOW
#!/bin/bash

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m'

echo -e "${GREEN}Starting DIVE25 server profiles deployment...${NC}"

# Function to check container logs
check_container_logs() {
    local container=$1
    echo -e "${YELLOW}Checking ${container} logs:${NC}"
    docker logs $container
}

# Function to verify container is running
verify_container() {
    local container=$1
    if ! docker ps | grep -q $container; then
        echo -e "${RED}${container} is not running. Checking logs:${NC}"
        check_container_logs $container
        return 1
    fi
    return 0
}

# Deploy PingFederate profile
echo -e "${YELLOW}Deploying PingFederate server profile...${NC}"
if verify_container "pingfederate"; then
    docker exec pingfederate sh -c "cp -r /opt/in/instance/server/default/conf/* /opt/out/instance/server/default/conf/"
fi

# Deploy PingAccess profile
echo -e "${YELLOW}Deploying PingAccess server profile...${NC}"
if verify_container "pingaccess"; then
    docker exec pingaccess sh -c "cp -r /opt/in/instance/conf/* /opt/out/instance/conf/"
fi

# Deploy PingDirectory profile
echo -e "${YELLOW}Deploying PingDirectory server profile...${NC}"
if verify_container "pingdirectory"; then
    docker exec pingdirectory sh -c "cp -r /opt/in/instance/* /opt/out/instance/"
fi

# Restart services
echo -e "${YELLOW}Restarting services...${NC}"
for container in pingfederate pingaccess pingdirectory; do
    if verify_container $container; then
        docker restart $container
        sleep 5
        if ! verify_container $container; then
            echo -e "${RED}${container} failed to restart. Checking logs:${NC}"
            check_container_logs $container
        fi
    fi
done

echo -e "${GREEN}Server profiles deployment complete!${NC}"

/USERS/AUBREYBEACH/DOCUMENTS/GITHUB/DIVE25/DIVE25/SERVER-PROFILES/PINGACCESS/ENV_VARS CODE IS BELOW
export PA_LOG_LEVEL=${PA_LOG_LEVEL:=INFO}
export PING_IDENTITY_PASSWORD=${PING_IDENTITY_PASSWORD:-2FederateM0re}
export PA_ADMIN_PASSWORD_INITIAL=${PA_ADMIN_PASSWORD_INITIAL:-2FederateM0re}
export PA_ADMIN_USER_PASSWORD=${PA_ADMIN_USER_PASSWORD:-2FederateM0re}

/USERS/AUBREYBEACH/DOCUMENTS/GITHUB/DIVE25/DIVE25/SERVER-PROFILES/PINGACCESS/INSTANCE/CONF/ADMIN-CONFIG.PROPERTIES CODE IS BELOW
pa.admin.user.password=2FederateM0re


/USERS/AUBREYBEACH/DOCUMENTS/GITHUB/DIVE25/DIVE25/SERVER-PROFILES/PINGACCESS/INSTANCE/CONF/PINGACCESS.ENV CODE IS BELOW
PING_IDENTITY_ACCEPT_EULA=YES
PING_IDENTITY_PASSWORD=2FederateM0re
PA_ADMIN_PASSWORD_INITIAL=2FederateM0re
PA_ADMIN_USER_PASSWORD=2FederateM0re

/USERS/AUBREYBEACH/DOCUMENTS/GITHUB/DIVE25/DIVE25/SERVER-PROFILES/PINGACCESS/INSTANCE/CONF/RUN.PROPERTIES CODE IS BELOW
admin.port=9000
engine.port=3000
clusterconfig.port=9090
admin.host=localhost
engine.host=localhost
pa.operational.mode=STANDALONE
certificate.keyPair.generator.key.size=2048
site.authenticator.configuration.path=${pa.home}/conf/websession/site-authenticator.conf
pa.admin.session.timeout=30
pa.admin.concurrent.sessions.count=100
pa.admin.user.password.error.count.before.lockout=3
pa.admin.user.password.lockout.period=60

/USERS/AUBREYBEACH/DOCUMENTS/GITHUB/DIVE25/DIVE25/SERVER-PROFILES/PINGACCESS/INSTANCE/DATA/DATA/CONFIG/PA-CONFIG.JSON CODE IS BELOW
{
  "version": "7.0.0",
  "sites": [
    {
      "id": 1,
      "name": "DIVE25 API",
      "targets": [
        "https://dive25-api:3001"
      ],
      "secure": true,
      "trustedCertificateGroupId": 0,
      "sendPaCookie": true,
      "useTargetHostHeader": false,
      "keepAliveTimeout": 0,
      "maxConnections": -1,
      "maxWebSocketConnections": -1,
      "siteAuthenticatorIds": [],
      "skipHostnameVerification": false,
      "expectedHostname": null,
      "availabilityProfileId": 1,
      "loadBalancingStrategyId": 0
    }
  ],
  "rules": [
    {
      "id": 1,
      "name": "DIVE25 API Protection",
      "enabled": true,
      "rewriteUrlPath": false,
      "resourceType": "Standard",
      "agentCacheInvalidatedResponseDuration": 0,
      "applicationId": 1,
      "caseSensitive": false,
      "methods": ["*"],
      "pathPatterns": {
        "pattern": "/api/*",
        "type": "WILDCARD"
      },
      "pathPrefixes": ["/api/"],
      "auditLevel": "ON",
      "rootResource": false,
      "anonymous": false,
      "enabled": true,
      "policy": {
        "Web": {
          "type": "WebSession"
        }
      }
    }
  ],
  "applications": [
    {
      "id": 1,
      "name": "DIVE25 Application",
      "description": "DIVE25 Document Access System",
      "enabled": true,
      "siteId": 1,
      "agentId": 0,
      "virtualHostIds": [1],
      "identityMappingIds": {
        "Web": 0,
        "API": 0
      },
      "contextRoot": "/",
      "caseSensitive": false,
      "policy": {
        "Web": {
          "type": "OAuth"
        }
      }
    }
  ],
  "authTokenMgmt": {
    "keyRollEnabled": true,
    "keyRollPeriodInHours": 24,
    "issuer": "PingAccess",
    "signingAlgorithm": "P-256"
  },
  "pingFederateOAuth": {
    "id": 1,
    "name": "PingFederate",
    "targets": ["https://pingfederate:9031"],
    "secure": true,
    "trustedCertificateGroupId": 2,
    "useProxy": false,
    "audience": "dive25-api",
    "clientId": "pa-client",
    "clientSecret": {
      "encrypted": "OBF:JWE:eyJhbGciOiJkaXIiLCJlbmMiOiJBMTI4Q0JDLUhTMjU2Iiwia2lkIjoiRW1JY1UxODNuSHlkc1AifQ..RfD8BE6w_R6Y9KpDa0BHeg.jC0w7g3MiqH2WhtlybTH0A.c74_s5v7lAqhNDIClAsmYg"
    },
    "subjectAttributeName": "sub",
    "sendAudience": false,
    "tokenTimeToLiveSeconds": 28800,
    "useTokenIntrospection": true,
    "accessValidatorId": 1
  }
}


/USERS/AUBREYBEACH/DOCUMENTS/GITHUB/DIVE25/DIVE25/SERVER-PROFILES/PINGACCESS/INSTANCE/DATA/DATA/CONFIG/VIRTUAL-HOSTS.JSON CODE IS BELOW
{
  "hostPorts": [
    {
      "id": 1,
      "host": "dive25.local",
      "port": 443,
      "secure": true,
      "trustedCertificateGroupId": 0
    }
  ]
}


/USERS/AUBREYBEACH/DOCUMENTS/GITHUB/DIVE25/DIVE25/SERVER-PROFILES/PINGACCESS/INSTANCE/HOOKS/20-SET-PASSWORDS.SH CODE IS BELOW
#!/bin/sh
echo "Pre-setting admin passwords..."

# Ensure passwords are set with fallbacks
export PING_IDENTITY_PASSWORD=${PING_IDENTITY_PASSWORD:-2FederateM0re}
export PA_ADMIN_PASSWORD_INITIAL=${PA_ADMIN_PASSWORD_INITIAL:-2FederateM0re}
export PA_ADMIN_USER_PASSWORD=${PA_ADMIN_USER_PASSWORD:-2FederateM0re}

# Create initial password file
mkdir -p /opt/in/instance/conf
echo "admin.password=${PA_ADMIN_PASSWORD_INITIAL}" > /opt/in/instance/conf/password.properties
chmod 600 /opt/in/instance/conf/password.properties

exit 0

/USERS/AUBREYBEACH/DOCUMENTS/GITHUB/DIVE25/DIVE25/SERVER-PROFILES/PINGACCESS/INSTANCE/HOOKS/50-BEFORE-POST-START.SH CODE IS BELOW
#!/usr/bin/env sh
set -e

echo "Setting up PingAccess passwords..."

# Ensure password files directory exists
mkdir -p /opt/in/instance/conf

# Create initial password file
cat > /opt/in/instance/conf/password.properties << EOF
admin.password=${PA_ADMIN_PASSWORD_INITIAL:-2FederateM0re}
EOF

chmod 600 /opt/in/instance/conf/password.properties

# Create admin config
cat > /opt/in/instance/conf/admin-config.properties << EOF
pa.admin.user.password=${PA_ADMIN_USER_PASSWORD:-2FederateM0re}
EOF

chmod 600 /opt/in/instance/conf/admin-config.properties

exit 0

/USERS/AUBREYBEACH/DOCUMENTS/GITHUB/DIVE25/DIVE25/SERVER-PROFILES/PINGACCESS/INSTANCE/HOOKS/80-POST-START.SH.PRE CODE IS BELOW
#!/usr/bin/env sh
set -e

echo "Running post-start configuration..."

# Verify password files exist
if [ ! -f /opt/in/instance/conf/password.properties ] || [ ! -f /opt/in/instance/conf/admin-config.properties ]; then
    echo "ERROR: Password configuration files missing"
    exit 1
fi

exit 0

/USERS/AUBREYBEACH/DOCUMENTS/GITHUB/DIVE25/DIVE25/SERVER-PROFILES/PINGACCESS/INSTANCE/HOOKS/81-AFTER-START-PROCESS.SH.PRE CODE IS BELOW
#!/usr/bin/env sh
set -e

echo "Verifying PingAccess configuration..."

# Check if PingAccess is responding
curl -k -s -o /dev/null -w "%{http_code}" https://localhost:9000/pa/heartbeat.ping

exit 0

/USERS/AUBREYBEACH/DOCUMENTS/GITHUB/DIVE25/DIVE25/SERVER-PROFILES/PINGACCESS/INSTANCE/HOOKS/83-CHANGE-PASSWORD.SH CODE IS BELOW
#!/bin/sh
set -x  # Enable debug mode

echo "Starting change-password hook..."

# Debug info
echo "Current user: $(id)"
echo "Current directory: $(pwd)"
echo "Environment variables:"
env | grep -E "PING_IDENTITY_PASSWORD|PA_ADMIN"

# Try to get password from environment with fallbacks
ADMIN_PASSWORD="${PA_ADMIN_PASSWORD_INITIAL:-${PING_IDENTITY_PASSWORD}}"
echo "Resolved ADMIN_PASSWORD value present: $([[ -n $ADMIN_PASSWORD ]] && echo 'yes' || echo 'no')"

if [ -z "${ADMIN_PASSWORD}" ]; then
    echo "ERROR: No valid administrator password found - Check variables PING_IDENTITY_PASSWORD and PA_ADMIN_PASSWORD_INITIAL"
    exit 1
fi

# Ensure target directory exists
OUT_CONF_DIR="/opt/out/instance/conf"
if [ ! -d "${OUT_CONF_DIR}" ]; then
    echo "Creating directory ${OUT_CONF_DIR}"
    mkdir -p "${OUT_CONF_DIR}"
fi

# Write password file
echo "Writing password file..."
echo "admin.password=${ADMIN_PASSWORD}" > "${OUT_CONF_DIR}/password.properties"

# Set permissions if possible
if [ -w "${OUT_CONF_DIR}/password.properties" ]; then
    chmod 600 "${OUT_CONF_DIR}/password.properties"
fi

# Verify file exists and has content
if [ ! -f "${OUT_CONF_DIR}/password.properties" ]; then
    echo "ERROR: Failed to create password file"
    exit 1
fi

if [ ! -s "${OUT_CONF_DIR}/password.properties" ]; then
    echo "ERROR: Password file is empty"
    exit 1
fi

echo "Successfully configured password file at ${OUT_CONF_DIR}/password.properties"

/USERS/AUBREYBEACH/DOCUMENTS/GITHUB/DIVE25/DIVE25/SERVER-PROFILES/PINGACCESS/INSTANCE/SETUP.SH CODE IS BELOW
#!/bin/bash
set -e

# Create directories in the project structure instead of /opt
INSTANCE_DIR="./dive25/server-profiles/pingaccess/instance"
mkdir -p "${INSTANCE_DIR}/conf"
mkdir -p "${INSTANCE_DIR}/data"

# Create password files
cat > "${INSTANCE_DIR}/conf/password.properties" << EOF
admin.password=2FederateM0re
EOF

cat > "${INSTANCE_DIR}/conf/admin-config.properties" << EOF
pa.admin.user.password=2FederateM0re
EOF

# Set permissions
chmod -R 750 "${INSTANCE_DIR}"
chmod 600 "${INSTANCE_DIR}/conf/"*.properties

# Verify configuration
if [ ! -f "${INSTANCE_DIR}/conf/password.properties" ]; then
    echo "ERROR: password.properties not found"
    exit 1
fi

if [ ! -f "${INSTANCE_DIR}/conf/admin-config.properties" ]; then
    echo "ERROR: admin-config.properties not found"
    exit 1
fi

echo "PingAccess configuration created successfully"

/USERS/AUBREYBEACH/DOCUMENTS/GITHUB/DIVE25/DIVE25/SERVER-PROFILES/PINGDIRECTORY/INSTANCE/CONFIG/ACCESS-CONTROL/02-NATO-ACIS.LDIF CODE IS BELOW
dn: cn=Access Control Handler,cn=config
changetype: modify
add: ds-cfg-global-aci
ds-cfg-global-aci: (targetattr="clearanceLevel || countryOfAffiliation || coiTags || lacvCode")(version 3.0; acl "Allow PingFederate to read NATO attributes"; allow(read,search,compare) userdn="ldap:///cn=pingfederate,cn=Root DNs,cn=config";)


/USERS/AUBREYBEACH/DOCUMENTS/GITHUB/DIVE25/DIVE25/SERVER-PROFILES/PINGDIRECTORY/INSTANCE/CONFIG/SCHEMA/77-NATO.LDIF CODE IS BELOW
dn: cn=schema
objectClass: top
objectClass: ldapSubentry
objectClass: subschema
cn: schema
attributeTypes: ( 1.3.6.1.4.1.99999.1.1.1 NAME 'clearanceLevel'
  DESC 'NATO Security Clearance Level'
  SYNTAX 1.3.6.1.4.1.1466.115.121.1.15
  SINGLE-VALUE )
attributeTypes: ( 1.3.6.1.4.1.99999.1.1.2 NAME 'countryOfAffiliation'
  DESC 'NATO Country of Affiliation'
  SYNTAX 1.3.6.1.4.1.1466.115.121.1.15
  SINGLE-VALUE )
attributeTypes: ( 1.3.6.1.4.1.99999.1.1.3 NAME 'coiTags'
  DESC 'NATO Communities of Interest Tags'
  SYNTAX 1.3.6.1.4.1.1466.115.121.1.15 )
attributeTypes: ( 1.3.6.1.4.1.99999.1.1.4 NAME 'lacvCode'
  DESC 'NATO LACV Code'
  SYNTAX 1.3.6.1.4.1.1466.115.121.1.15
  SINGLE-VALUE )
objectClasses: ( 1.3.6.1.4.1.99999.2.1.1 NAME 'natoUser'
  DESC 'NATO User'
  SUP top
  AUXILIARY
  MAY ( clearanceLevel $ countryOfAffiliation $ coiTags $ lacvCode ) )


/USERS/AUBREYBEACH/DOCUMENTS/GITHUB/DIVE25/DIVE25/SERVER-PROFILES/PINGFEDERATE/INSTANCE/SERVER/DEFAULT/CONF/PINGFEDERATE.LIC CODE IS BELOW


/USERS/AUBREYBEACH/DOCUMENTS/GITHUB/DIVE25/DIVE25/SERVER-PROFILES/PINGFEDERATE/INSTANCE/SERVER/DEFAULT/DATA/CONFIG-STORE/ADMIN-CONFIG.XML CODE IS BELOW
<?xml version="1.0" encoding="UTF-8"?>
<con:config xmlns:con="http://www.sourceid.org/2004/05/config">
    <con:item name="pf.admin.https.port">9999</con:item>
    <con:item name="pf.admin.hostname">localhost</con:item>
    <con:item name="pf.console.login.mode">native</con:item>
    <con:item name="pf.console.title">DIVE25 Federation Hub</con:item>
    <con:item name="pf.console.session.timeout">30</con:item>
</con:config>


/USERS/AUBREYBEACH/DOCUMENTS/GITHUB/DIVE25/DIVE25/SERVER-PROFILES/PINGFEDERATE/INSTANCE/SERVER/DEFAULT/DATA/CONFIG-STORE/AUTHENTICATION-POLICIES.XML CODE IS BELOW
<?xml version="1.0" encoding="UTF-8"?>
<pol:authentication-policies xmlns:pol="http://www.pingidentity.com/2006/04/authentication-policies">
    <pol:policy name="NATO Authentication">
        <pol:description>Authentication policy for NATO federation</pol:description>
        <pol:steps>
            <pol:step>
                <pol:type>AUTHENTICATION</pol:type>
                <pol:authenticator>IDP</pol:authenticator>
            </pol:step>
        </pol:steps>
        <pol:failure-handling>
            <pol:mode>RESTART_AUTHENTICATION</pol:mode>
            <pol:max-attempts>3</pol:max-attempts>
            <pol:lockout-period>300</pol:lockout-period>
        </pol:failure-handling>
    </pol:policy>
</pol:authentication-policies>


/USERS/AUBREYBEACH/DOCUMENTS/GITHUB/DIVE25/DIVE25/SERVER-PROFILES/PINGFEDERATE/INSTANCE/SERVER/DEFAULT/DATA/CONFIG-STORE/HIVEMODULE.XML CODE IS BELOW
<?xml version="1.0" encoding="UTF-8"?>
<module id="com.pingidentity.module" version="1.0.0">
    <contribution configuration-id="security-properties">
        <property name="addFrameOptionsHeader" value="true"/>
        <property name="frameOptionsValue" value="SAMEORIGIN"/>
        <property name="addContentTypeHeader" value="true"/>
        <property name="addXContentTypeHeader" value="true"/>
    </contribution>
</module>


/USERS/AUBREYBEACH/DOCUMENTS/GITHUB/DIVE25/DIVE25/SERVER-PROFILES/PINGFEDERATE/INSTANCE/SERVER/DEFAULT/DATA/CONFIG-STORE/NATO-ATTRIBUTES.XML CODE IS BELOW
<?xml version="1.0" encoding="UTF-8"?>
<attr:attribute-definitions xmlns:attr="http://www.pingidentity.com/2006/04/attribute-definitions">
    <attr:attribute name="clearance">
        <attr:display-name>Security Clearance</attr:display-name>
        <attr:type>STRING</attr:type>
    </attr:attribute>
    <attr:attribute name="countryOfAffiliation">
        <attr:display-name>Country of Affiliation</attr:display-name>
        <attr:type>STRING</attr:type>
    </attr:attribute>
    <attr:attribute name="coiTags">
        <attr:display-name>Communities of Interest</attr:display-name>
        <attr:type>STRING</attr:type>
    </attr:attribute>
    <attr:attribute name="lacvCode">
        <attr:display-name>LACV Code</attr:display-name>
        <attr:type>STRING</attr:type>
    </attr:attribute>
</attr:attribute-definitions>


/USERS/AUBREYBEACH/DOCUMENTS/GITHUB/DIVE25/DIVE25/SERVER-PROFILES/PINGFEDERATE/INSTANCE/SERVER/DEFAULT/DATA/CONFIG-STORE/SERVER-CONFIG.XML CODE IS BELOW
<?xml version="1.0" encoding="UTF-8"?>
<con:config xmlns:con="http://www.sourceid.org/2004/05/config">
    <con:item name="pf.runtime.context.path">/</con:item>
    <con:item name="pf.runtime.http.port">9031</con:item>
    <con:item name="pf.runtime.https.port">9031</con:item>
    <con:item name="pf.federation.metadata.url">https://federation.dive25.com</con:item>
    <con:item name="pf.monitor.backend.enabled">true</con:item>
</con:config>


/USERS/AUBREYBEACH/DOCUMENTS/GITHUB/DIVE25/DIVE25/SERVER-PROFILES/PINGFEDERATE/INSTANCE/SERVER/DEFAULT/DATA/OAUTH-CLIENT-SETTINGS.XML CODE IS BELOW
<?xml version="1.0" encoding="UTF-8"?>
<oau:oauth-client-settings xmlns:oau="http://www.pingidentity.com/2015/08/oauth-client-settings">
    <oau:client-settings>
        <oau:client>
            <oau:name>DIVE25 API Client</oau:name>
            <oau:client-id>dive25-api</oau:client-id>
            <oau:grant-types>
                <oau:grant-type>authorization_code</oau:grant-type>
                <oau:grant-type>refresh_token</oau:grant-type>
            </oau:grant-types>
            <oau:bypass-approval-page>true</oau:bypass-approval-page>
            <oau:restricted-scopes>openid profile email</oau:restricted-scopes>
            <oau:require-signed-requests>false</oau:require-signed-requests>
            <oau:restrict-to-default-access-token-manager>true</oau:restrict-to-default-access-token-manager>
        </oau:client>
    </oau:client-settings>
</oau:oauth-client-settings>


/USERS/AUBREYBEACH/DOCUMENTS/GITHUB/DIVE25/DIVE25/SRC/BACKEND/DOCKERFILE CODE IS BELOW
# Dockerfile
FROM node:18-alpine as builder

WORKDIR /app

COPY package*.json ./
RUN npm ci

COPY . .
RUN npm run build

FROM node:18-alpine

WORKDIR /app

COPY --from=builder /app/dist ./dist
COPY --from=builder /app/node_modules ./node_modules
COPY package*.json ./

ENV NODE_ENV=production

EXPOSE 3001

CMD ["npm", "start"]

/USERS/AUBREYBEACH/DOCUMENTS/GITHUB/DIVE25/DIVE25/SRC/BACKEND/PACKAGE-LOCK.JSON CODE IS BELOW
{
  "name": "backend",
  "version": "1.0.0",
  "lockfileVersion": 2,
  "requires": true,
  "packages": {
    "": {
      "name": "backend",
      "version": "1.0.0",
      "license": "ISC",
      "dependencies": {
        "@open-policy-agent/opa-wasm": "^1.10.0",
        "axios": "^1.7.9",
        "cors": "^2.8.5",
        "dotenv": "^16.4.7",
        "express": "^4.21.2",
        "express-jwt": "^8.5.1",
        "helmet": "^8.0.0",
        "ldapjs": "^3.0.7",
        "mongodb": "^6.13.0",
        "winston": "^3.17.0"
      },
      "devDependencies": {
        "@types/express": "^5.0.0",
        "@types/node": "^22.13.1",
        "nodemon": "^3.1.9",
        "ts-node": "^10.9.2",
        "typescript": "^5.7.3"
      }
    },
    "node_modules/@colors/colors": {
      "version": "1.6.0",
      "resolved": "https://registry.npmjs.org/@colors/colors/-/colors-1.6.0.tgz",
      "integrity": "sha512-Ir+AOibqzrIsL6ajt3Rz3LskB7OiMVHqltZmspbW/TJuTVuyOMirVqAkjfY6JISiLHgyNqicAC8AyHHGzNd/dA==",
      "engines": {
        "node": ">=0.1.90"
      }
    },
    "node_modules/@cspotcode/source-map-support": {
      "version": "0.8.1",
      "resolved": "https://registry.npmjs.org/@cspotcode/source-map-support/-/source-map-support-0.8.1.tgz",
      "integrity": "sha512-IchNf6dN4tHoMFIn/7OE8LWZ19Y6q/67Bmf6vnGREv8RSbBVb9LPJxEcnwrcwX6ixSvaiGoomAUvu4YSxXrVgw==",
      "dev": true,
      "dependencies": {
        "@jridgewell/trace-mapping": "0.3.9"
      },
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@dabh/diagnostics": {
      "version": "2.0.3",
      "resolved": "https://registry.npmjs.org/@dabh/diagnostics/-/diagnostics-2.0.3.tgz",
      "integrity": "sha512-hrlQOIi7hAfzsMqlGSFyVucrx38O+j6wiGOf//H2ecvIEqYN4ADBSS2iLMh5UFyDunCNniUIPk/q3riFv45xRA==",
      "dependencies": {
        "colorspace": "1.1.x",
        "enabled": "2.0.x",
        "kuler": "^2.0.0"
      }
    },
    "node_modules/@jridgewell/resolve-uri": {
      "version": "3.1.2",
      "resolved": "https://registry.npmjs.org/@jridgewell/resolve-uri/-/resolve-uri-3.1.2.tgz",
      "integrity": "sha512-bRISgCIjP20/tbWSPWMEi54QVPRZExkuD9lJL+UIxUKtwVJA8wW1Trb1jMs1RFXo1CBTNZ/5hpC9QvmKWdopKw==",
      "dev": true,
      "engines": {
        "node": ">=6.0.0"
      }
    },
    "node_modules/@jridgewell/sourcemap-codec": {
      "version": "1.5.0",
      "resolved": "https://registry.npmjs.org/@jridgewell/sourcemap-codec/-/sourcemap-codec-1.5.0.tgz",
      "integrity": "sha512-gv3ZRaISU3fjPAgNsriBRqGWQL6quFx04YMPW/zD8XMLsU32mhCCbfbO6KZFLjvYpCZ8zyDEgqsgf+PwPaM7GQ==",
      "dev": true
    },
    "node_modules/@jridgewell/trace-mapping": {
      "version": "0.3.9",
      "resolved": "https://registry.npmjs.org/@jridgewell/trace-mapping/-/trace-mapping-0.3.9.tgz",
      "integrity": "sha512-3Belt6tdc8bPgAtbcmdtNJlirVoTmEb5e2gC94PnkwEW9jI6CAHUeoG85tjWP5WquqfavoMtMwiG4P926ZKKuQ==",
      "dev": true,
      "dependencies": {
        "@jridgewell/resolve-uri": "^3.0.3",
        "@jridgewell/sourcemap-codec": "^1.4.10"
      }
    },
    "node_modules/@ldapjs/asn1": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/@ldapjs/asn1/-/asn1-2.0.0.tgz",
      "integrity": "sha512-G9+DkEOirNgdPmD0I8nu57ygQJKOOgFEMKknEuQvIHbGLwP3ny1mY+OTUYLCbCaGJP4sox5eYgBJRuSUpnAddA==",
      "deprecated": "This package has been decomissioned. See https://github.com/ldapjs/node-ldapjs/blob/8ffd0bc9c149088a10ec4c1ec6a18450f76ad05d/README.md"
    },
    "node_modules/@ldapjs/attribute": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/@ldapjs/attribute/-/attribute-1.0.0.tgz",
      "integrity": "sha512-ptMl2d/5xJ0q+RgmnqOi3Zgwk/TMJYG7dYMC0Keko+yZU6n+oFM59MjQOUht5pxJeS4FWrImhu/LebX24vJNRQ==",
      "deprecated": "This package has been decomissioned. See https://github.com/ldapjs/node-ldapjs/blob/8ffd0bc9c149088a10ec4c1ec6a18450f76ad05d/README.md",
      "dependencies": {
        "@ldapjs/asn1": "2.0.0",
        "@ldapjs/protocol": "^1.2.1",
        "process-warning": "^2.1.0"
      }
    },
    "node_modules/@ldapjs/change": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/@ldapjs/change/-/change-1.0.0.tgz",
      "integrity": "sha512-EOQNFH1RIku3M1s0OAJOzGfAohuFYXFY4s73wOhRm4KFGhmQQ7MChOh2YtYu9Kwgvuq1B0xKciXVzHCGkB5V+Q==",
      "deprecated": "This package has been decomissioned. See https://github.com/ldapjs/node-ldapjs/blob/8ffd0bc9c149088a10ec4c1ec6a18450f76ad05d/README.md",
      "dependencies": {
        "@ldapjs/asn1": "2.0.0",
        "@ldapjs/attribute": "1.0.0"
      }
    },
    "node_modules/@ldapjs/controls": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/@ldapjs/controls/-/controls-2.1.0.tgz",
      "integrity": "sha512-2pFdD1yRC9V9hXfAWvCCO2RRWK9OdIEcJIos/9cCVP9O4k72BY1bLDQQ4KpUoJnl4y/JoD4iFgM+YWT3IfITWw==",
      "deprecated": "This package has been decomissioned. See https://github.com/ldapjs/node-ldapjs/blob/8ffd0bc9c149088a10ec4c1ec6a18450f76ad05d/README.md",
      "dependencies": {
        "@ldapjs/asn1": "^1.2.0",
        "@ldapjs/protocol": "^1.2.1"
      }
    },
    "node_modules/@ldapjs/controls/node_modules/@ldapjs/asn1": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/@ldapjs/asn1/-/asn1-1.2.0.tgz",
      "integrity": "sha512-KX/qQJ2xxzvO2/WOvr1UdQ+8P5dVvuOLk/C9b1bIkXxZss8BaR28njXdPgFCpj5aHaf1t8PmuVnea+N9YG9YMw==",
      "deprecated": "This package has been decomissioned. See https://github.com/ldapjs/node-ldapjs/blob/8ffd0bc9c149088a10ec4c1ec6a18450f76ad05d/README.md"
    },
    "node_modules/@ldapjs/dn": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/@ldapjs/dn/-/dn-1.1.0.tgz",
      "integrity": "sha512-R72zH5ZeBj/Fujf/yBu78YzpJjJXG46YHFo5E4W1EqfNpo1UsVPqdLrRMXeKIsJT3x9dJVIfR6OpzgINlKpi0A==",
      "deprecated": "This package has been decomissioned. See https://github.com/ldapjs/node-ldapjs/blob/8ffd0bc9c149088a10ec4c1ec6a18450f76ad05d/README.md",
      "dependencies": {
        "@ldapjs/asn1": "2.0.0",
        "process-warning": "^2.1.0"
      }
    },
    "node_modules/@ldapjs/filter": {
      "version": "2.1.1",
      "resolved": "https://registry.npmjs.org/@ldapjs/filter/-/filter-2.1.1.tgz",
      "integrity": "sha512-TwPK5eEgNdUO1ABPBUQabcZ+h9heDORE4V9WNZqCtYLKc06+6+UAJ3IAbr0L0bYTnkkWC/JEQD2F+zAFsuikNw==",
      "deprecated": "This package has been decomissioned. See https://github.com/ldapjs/node-ldapjs/blob/8ffd0bc9c149088a10ec4c1ec6a18450f76ad05d/README.md",
      "dependencies": {
        "@ldapjs/asn1": "2.0.0",
        "@ldapjs/protocol": "^1.2.1",
        "process-warning": "^2.1.0"
      }
    },
    "node_modules/@ldapjs/messages": {
      "version": "1.3.0",
      "resolved": "https://registry.npmjs.org/@ldapjs/messages/-/messages-1.3.0.tgz",
      "integrity": "sha512-K7xZpXJ21bj92jS35wtRbdcNrwmxAtPwy4myeh9duy/eR3xQKvikVycbdWVzkYEAVE5Ce520VXNOwCHjomjCZw==",
      "deprecated": "This package has been decomissioned. See https://github.com/ldapjs/node-ldapjs/blob/8ffd0bc9c149088a10ec4c1ec6a18450f76ad05d/README.md",
      "dependencies": {
        "@ldapjs/asn1": "^2.0.0",
        "@ldapjs/attribute": "^1.0.0",
        "@ldapjs/change": "^1.0.0",
        "@ldapjs/controls": "^2.1.0",
        "@ldapjs/dn": "^1.1.0",
        "@ldapjs/filter": "^2.1.1",
        "@ldapjs/protocol": "^1.2.1",
        "process-warning": "^2.2.0"
      }
    },
    "node_modules/@ldapjs/protocol": {
      "version": "1.2.1",
      "resolved": "https://registry.npmjs.org/@ldapjs/protocol/-/protocol-1.2.1.tgz",
      "integrity": "sha512-O89xFDLW2gBoZWNXuXpBSM32/KealKCTb3JGtJdtUQc7RjAk8XzrRgyz02cPAwGKwKPxy0ivuC7UP9bmN87egQ==",
      "deprecated": "This package has been decomissioned. See https://github.com/ldapjs/node-ldapjs/blob/8ffd0bc9c149088a10ec4c1ec6a18450f76ad05d/README.md"
    },
    "node_modules/@mongodb-js/saslprep": {
      "version": "1.1.9",
      "resolved": "https://registry.npmjs.org/@mongodb-js/saslprep/-/saslprep-1.1.9.tgz",
      "integrity": "sha512-tVkljjeEaAhCqTzajSdgbQ6gE6f3oneVwa3iXR6csiEwXXOFsiC6Uh9iAjAhXPtqa/XMDHWjjeNH/77m/Yq2dw==",
      "dependencies": {
        "sparse-bitfield": "^3.0.3"
      }
    },
    "node_modules/@open-policy-agent/opa-wasm": {
      "version": "1.10.0",
      "resolved": "https://registry.npmjs.org/@open-policy-agent/opa-wasm/-/opa-wasm-1.10.0.tgz",
      "integrity": "sha512-ymR/nFS3nO9o24j9xowGGQaf+Gmb813QcxUpVZkfRlJkawKWqSIllnEH15agyWjijmOIyhA+OBErenx6N3jphw==",
      "dependencies": {
        "sprintf-js": "^1.1.2",
        "yaml": "^1.10.2"
      }
    },
    "node_modules/@tsconfig/node10": {
      "version": "1.0.11",
      "resolved": "https://registry.npmjs.org/@tsconfig/node10/-/node10-1.0.11.tgz",
      "integrity": "sha512-DcRjDCujK/kCk/cUe8Xz8ZSpm8mS3mNNpta+jGCA6USEDfktlNvm1+IuZ9eTcDbNk41BHwpHHeW+N1lKCz4zOw==",
      "dev": true
    },
    "node_modules/@tsconfig/node12": {
      "version": "1.0.11",
      "resolved": "https://registry.npmjs.org/@tsconfig/node12/-/node12-1.0.11.tgz",
      "integrity": "sha512-cqefuRsh12pWyGsIoBKJA9luFu3mRxCA+ORZvA4ktLSzIuCUtWVxGIuXigEwO5/ywWFMZ2QEGKWvkZG1zDMTag==",
      "dev": true
    },
    "node_modules/@tsconfig/node14": {
      "version": "1.0.3",
      "resolved": "https://registry.npmjs.org/@tsconfig/node14/-/node14-1.0.3.tgz",
      "integrity": "sha512-ysT8mhdixWK6Hw3i1V2AeRqZ5WfXg1G43mqoYlM2nc6388Fq5jcXyr5mRsqViLx/GJYdoL0bfXD8nmF+Zn/Iow==",
      "dev": true
    },
    "node_modules/@tsconfig/node16": {
      "version": "1.0.4",
      "resolved": "https://registry.npmjs.org/@tsconfig/node16/-/node16-1.0.4.tgz",
      "integrity": "sha512-vxhUy4J8lyeyinH7Azl1pdd43GJhZH/tP2weN8TntQblOY+A0XbT8DJk1/oCPuOOyg/Ja757rG0CgHcWC8OfMA==",
      "dev": true
    },
    "node_modules/@types/body-parser": {
      "version": "1.19.5",
      "resolved": "https://registry.npmjs.org/@types/body-parser/-/body-parser-1.19.5.tgz",
      "integrity": "sha512-fB3Zu92ucau0iQ0JMCFQE7b/dv8Ot07NI3KaZIkIUNXq82k4eBAqUaneXfleGY9JWskeS9y+u0nXMyspcuQrCg==",
      "dev": true,
      "dependencies": {
        "@types/connect": "*",
        "@types/node": "*"
      }
    },
    "node_modules/@types/connect": {
      "version": "3.4.38",
      "resolved": "https://registry.npmjs.org/@types/connect/-/connect-3.4.38.tgz",
      "integrity": "sha512-K6uROf1LD88uDQqJCktA4yzL1YYAK6NgfsI0v/mTgyPKWsX1CnJ0XPSDhViejru1GcRkLWb8RlzFYJRqGUbaug==",
      "dev": true,
      "dependencies": {
        "@types/node": "*"
      }
    },
    "node_modules/@types/express": {
      "version": "5.0.0",
      "resolved": "https://registry.npmjs.org/@types/express/-/express-5.0.0.tgz",
      "integrity": "sha512-DvZriSMehGHL1ZNLzi6MidnsDhUZM/x2pRdDIKdwbUNqqwHxMlRdkxtn6/EPKyqKpHqTl/4nRZsRNLpZxZRpPQ==",
      "dev": true,
      "dependencies": {
        "@types/body-parser": "*",
        "@types/express-serve-static-core": "^5.0.0",
        "@types/qs": "*",
        "@types/serve-static": "*"
      }
    },
    "node_modules/@types/express-serve-static-core": {
      "version": "5.0.6",
      "resolved": "https://registry.npmjs.org/@types/express-serve-static-core/-/express-serve-static-core-5.0.6.tgz",
      "integrity": "sha512-3xhRnjJPkULekpSzgtoNYYcTWgEZkp4myc+Saevii5JPnHNvHMRlBSHDbs7Bh1iPPoVTERHEZXyhyLbMEsExsA==",
      "dev": true,
      "dependencies": {
        "@types/node": "*",
        "@types/qs": "*",
        "@types/range-parser": "*",
        "@types/send": "*"
      }
    },
    "node_modules/@types/http-errors": {
      "version": "2.0.4",
      "resolved": "https://registry.npmjs.org/@types/http-errors/-/http-errors-2.0.4.tgz",
      "integrity": "sha512-D0CFMMtydbJAegzOyHjtiKPLlvnm3iTZyZRSZoLq2mRhDdmLfIWOCYPfQJ4cu2erKghU++QvjcUjp/5h7hESpA==",
      "dev": true
    },
    "node_modules/@types/jsonwebtoken": {
      "version": "9.0.8",
      "resolved": "https://registry.npmjs.org/@types/jsonwebtoken/-/jsonwebtoken-9.0.8.tgz",
      "integrity": "sha512-7fx54m60nLFUVYlxAB1xpe9CBWX2vSrk50Y6ogRJ1v5xxtba7qXTg5BgYDN5dq+yuQQ9HaVlHJyAAt1/mxryFg==",
      "dependencies": {
        "@types/ms": "*",
        "@types/node": "*"
      }
    },
    "node_modules/@types/mime": {
      "version": "1.3.5",
      "resolved": "https://registry.npmjs.org/@types/mime/-/mime-1.3.5.tgz",
      "integrity": "sha512-/pyBZWSLD2n0dcHE3hq8s8ZvcETHtEuF+3E7XVt0Ig2nvsVQXdghHVcEkIWjy9A0wKfTn97a/PSDYohKIlnP/w==",
      "dev": true
    },
    "node_modules/@types/ms": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/@types/ms/-/ms-2.1.0.tgz",
      "integrity": "sha512-GsCCIZDE/p3i96vtEqx+7dBUGXrc7zeSK3wwPHIaRThS+9OhWIXRqzs4d6k1SVU8g91DrNRWxWUGhp5KXQb2VA=="
    },
    "node_modules/@types/node": {
      "version": "22.13.1",
      "resolved": "https://registry.npmjs.org/@types/node/-/node-22.13.1.tgz",
      "integrity": "sha512-jK8uzQlrvXqEU91UxiK5J7pKHyzgnI1Qnl0QDHIgVGuolJhRb9EEl28Cj9b3rGR8B2lhFCtvIm5os8lFnO/1Ew==",
      "dependencies": {
        "undici-types": "~6.20.0"
      }
    },
    "node_modules/@types/qs": {
      "version": "6.9.18",
      "resolved": "https://registry.npmjs.org/@types/qs/-/qs-6.9.18.tgz",
      "integrity": "sha512-kK7dgTYDyGqS+e2Q4aK9X3D7q234CIZ1Bv0q/7Z5IwRDoADNU81xXJK/YVyLbLTZCoIwUoDoffFeF+p/eIklAA==",
      "dev": true
    },
    "node_modules/@types/range-parser": {
      "version": "1.2.7",
      "resolved": "https://registry.npmjs.org/@types/range-parser/-/range-parser-1.2.7.tgz",
      "integrity": "sha512-hKormJbkJqzQGhziax5PItDUTMAM9uE2XXQmM37dyd4hVM+5aVl7oVxMVUiVQn2oCQFN/LKCZdvSM0pFRqbSmQ==",
      "dev": true
    },
    "node_modules/@types/send": {
      "version": "0.17.4",
      "resolved": "https://registry.npmjs.org/@types/send/-/send-0.17.4.tgz",
      "integrity": "sha512-x2EM6TJOybec7c52BX0ZspPodMsQUd5L6PRwOunVyVUhXiBSKf3AezDL8Dgvgt5o0UfKNfuA0eMLr2wLT4AiBA==",
      "dev": true,
      "dependencies": {
        "@types/mime": "^1",
        "@types/node": "*"
      }
    },
    "node_modules/@types/serve-static": {
      "version": "1.15.7",
      "resolved": "https://registry.npmjs.org/@types/serve-static/-/serve-static-1.15.7.tgz",
      "integrity": "sha512-W8Ym+h8nhuRwaKPaDw34QUkwsGi6Rc4yYqvKFo5rm2FUEhCFbzVWrxXUxuKK8TASjWsysJY0nsmNCGhCOIsrOw==",
      "dev": true,
      "dependencies": {
        "@types/http-errors": "*",
        "@types/node": "*",
        "@types/send": "*"
      }
    },
    "node_modules/@types/triple-beam": {
      "version": "1.3.5",
      "resolved": "https://registry.npmjs.org/@types/triple-beam/-/triple-beam-1.3.5.tgz",
      "integrity": "sha512-6WaYesThRMCl19iryMYP7/x2OVgCtbIVflDGFpWnb9irXI3UjYE4AzmYuiUKY1AJstGijoY+MgUszMgRxIYTYw=="
    },
    "node_modules/@types/webidl-conversions": {
      "version": "7.0.3",
      "resolved": "https://registry.npmjs.org/@types/webidl-conversions/-/webidl-conversions-7.0.3.tgz",
      "integrity": "sha512-CiJJvcRtIgzadHCYXw7dqEnMNRjhGZlYK05Mj9OyktqV8uVT8fD2BFOB7S1uwBE3Kj2Z+4UyPmFw/Ixgw/LAlA=="
    },
    "node_modules/@types/whatwg-url": {
      "version": "11.0.5",
      "resolved": "https://registry.npmjs.org/@types/whatwg-url/-/whatwg-url-11.0.5.tgz",
      "integrity": "sha512-coYR071JRaHa+xoEvvYqvnIHaVqaYrLPbsufM9BF63HkwI5Lgmy2QR8Q5K/lYDYo5AK82wOvSOS0UsLTpTG7uQ==",
      "dependencies": {
        "@types/webidl-conversions": "*"
      }
    },
    "node_modules/abstract-logging": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/abstract-logging/-/abstract-logging-2.0.1.tgz",
      "integrity": "sha512-2BjRTZxTPvheOvGbBslFSYOUkr+SjPtOnrLP33f+VIWLzezQpZcqVg7ja3L4dBXmzzgwT+a029jRx5PCi3JuiA=="
    },
    "node_modules/accepts": {
      "version": "1.3.8",
      "resolved": "https://registry.npmjs.org/accepts/-/accepts-1.3.8.tgz",
      "integrity": "sha512-PYAthTa2m2VKxuvSD3DPC/Gy+U+sOA1LAuT8mkmRuvw+NACSaeXEQ+NHcVF7rONl6qcaxV3Uuemwawk+7+SJLw==",
      "dependencies": {
        "mime-types": "~2.1.34",
        "negotiator": "0.6.3"
      },
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/acorn": {
      "version": "8.14.0",
      "resolved": "https://registry.npmjs.org/acorn/-/acorn-8.14.0.tgz",
      "integrity": "sha512-cl669nCJTZBsL97OF4kUQm5g5hC2uihk0NxY3WENAC0TYdILVkAyHymAntgxGkl7K+t0cXIrH5siy5S4XkFycA==",
      "dev": true,
      "bin": {
        "acorn": "bin/acorn"
      },
      "engines": {
        "node": ">=0.4.0"
      }
    },
    "node_modules/acorn-walk": {
      "version": "8.3.4",
      "resolved": "https://registry.npmjs.org/acorn-walk/-/acorn-walk-8.3.4.tgz",
      "integrity": "sha512-ueEepnujpqee2o5aIYnvHU6C0A42MNdsIDeqy5BydrkuC5R1ZuUFnm27EeFJGoEHJQgn3uleRvmTXaJgfXbt4g==",
      "dev": true,
      "dependencies": {
        "acorn": "^8.11.0"
      },
      "engines": {
        "node": ">=0.4.0"
      }
    },
    "node_modules/anymatch": {
      "version": "3.1.3",
      "resolved": "https://registry.npmjs.org/anymatch/-/anymatch-3.1.3.tgz",
      "integrity": "sha512-KMReFUr0B4t+D+OBkjR3KYqvocp2XaSzO55UcB6mgQMd3KbcE+mWTyvVV7D/zsdEbNnV6acZUutkiHQXvTr1Rw==",
      "dev": true,
      "dependencies": {
        "normalize-path": "^3.0.0",
        "picomatch": "^2.0.4"
      },
      "engines": {
        "node": ">= 8"
      }
    },
    "node_modules/arg": {
      "version": "4.1.3",
      "resolved": "https://registry.npmjs.org/arg/-/arg-4.1.3.tgz",
      "integrity": "sha512-58S9QDqG0Xx27YwPSt9fJxivjYl432YCwfDMfZ+71RAqUrZef7LrKQZ3LHLOwCS4FLNBplP533Zx895SeOCHvA==",
      "dev": true
    },
    "node_modules/array-flatten": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/array-flatten/-/array-flatten-1.1.1.tgz",
      "integrity": "sha512-PCVAQswWemu6UdxsDFFX/+gVeYqKAod3D3UVm91jHwynguOwAvYPhx8nNlM++NqRcK6CxxpUafjmhIdKiHibqg=="
    },
    "node_modules/assert-plus": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/assert-plus/-/assert-plus-1.0.0.tgz",
      "integrity": "sha512-NfJ4UzBCcQGLDlQq7nHxH+tv3kyZ0hHQqF5BO6J7tNJeP5do1llPr8dZ8zHonfhAu0PHAdMkSo+8o0wxg9lZWw==",
      "engines": {
        "node": ">=0.8"
      }
    },
    "node_modules/async": {
      "version": "3.2.6",
      "resolved": "https://registry.npmjs.org/async/-/async-3.2.6.tgz",
      "integrity": "sha512-htCUDlxyyCLMgaM3xXg0C0LW2xqfuQ6p05pCEIsXuyQ+a1koYKTuBMzRNwmybfLgvJDMd0r1LTn4+E0Ti6C2AA=="
    },
    "node_modules/asynckit": {
      "version": "0.4.0",
      "resolved": "https://registry.npmjs.org/asynckit/-/asynckit-0.4.0.tgz",
      "integrity": "sha512-Oei9OH4tRh0YqU3GxhX79dM/mwVgvbZJaSNaRk+bshkj0S5cfHcgYakreBjrHwatXKbz+IoIdYLxrKim2MjW0Q=="
    },
    "node_modules/axios": {
      "version": "1.7.9",
      "resolved": "https://registry.npmjs.org/axios/-/axios-1.7.9.tgz",
      "integrity": "sha512-LhLcE7Hbiryz8oMDdDptSrWowmB4Bl6RCt6sIJKpRB4XtVf0iEgewX3au/pJqm+Py1kCASkb/FFKjxQaLtxJvw==",
      "dependencies": {
        "follow-redirects": "^1.15.6",
        "form-data": "^4.0.0",
        "proxy-from-env": "^1.1.0"
      }
    },
    "node_modules/backoff": {
      "version": "2.5.0",
      "resolved": "https://registry.npmjs.org/backoff/-/backoff-2.5.0.tgz",
      "integrity": "sha512-wC5ihrnUXmR2douXmXLCe5O3zg3GKIyvRi/hi58a/XyRxVI+3/yM0PYueQOZXPXQ9pxBislYkw+sF9b7C/RuMA==",
      "dependencies": {
        "precond": "0.2"
      },
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/balanced-match": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/balanced-match/-/balanced-match-1.0.2.tgz",
      "integrity": "sha512-3oSeUO0TMV67hN1AmbXsK4yaqU7tjiHlbxRDZOpH0KW9+CeX4bRAaX0Anxt0tx2MrpRpWwQaPwIlISEJhYU5Pw==",
      "dev": true
    },
    "node_modules/binary-extensions": {
      "version": "2.3.0",
      "resolved": "https://registry.npmjs.org/binary-extensions/-/binary-extensions-2.3.0.tgz",
      "integrity": "sha512-Ceh+7ox5qe7LJuLHoY0feh3pHuUDHAcRUeyL2VYghZwfpkNIy/+8Ocg0a3UuSoYzavmylwuLWQOf3hl0jjMMIw==",
      "dev": true,
      "engines": {
        "node": ">=8"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/body-parser": {
      "version": "1.20.3",
      "resolved": "https://registry.npmjs.org/body-parser/-/body-parser-1.20.3.tgz",
      "integrity": "sha512-7rAxByjUMqQ3/bHJy7D6OGXvx/MMc4IqBn/X0fcM1QUcAItpZrBEYhWGem+tzXH90c+G01ypMcYJBO9Y30203g==",
      "dependencies": {
        "bytes": "3.1.2",
        "content-type": "~1.0.5",
        "debug": "2.6.9",
        "depd": "2.0.0",
        "destroy": "1.2.0",
        "http-errors": "2.0.0",
        "iconv-lite": "0.4.24",
        "on-finished": "2.4.1",
        "qs": "6.13.0",
        "raw-body": "2.5.2",
        "type-is": "~1.6.18",
        "unpipe": "1.0.0"
      },
      "engines": {
        "node": ">= 0.8",
        "npm": "1.2.8000 || >= 1.4.16"
      }
    },
    "node_modules/brace-expansion": {
      "version": "1.1.11",
      "resolved": "https://registry.npmjs.org/brace-expansion/-/brace-expansion-1.1.11.tgz",
      "integrity": "sha512-iCuPHDFgrHX7H2vEI/5xpz07zSHB00TpugqhmYtVmMO6518mCuRMoOYFldEBl0g187ufozdaHgWKcYFb61qGiA==",
      "dev": true,
      "dependencies": {
        "balanced-match": "^1.0.0",
        "concat-map": "0.0.1"
      }
    },
    "node_modules/braces": {
      "version": "3.0.3",
      "resolved": "https://registry.npmjs.org/braces/-/braces-3.0.3.tgz",
      "integrity": "sha512-yQbXgO/OSZVD2IsiLlro+7Hf6Q18EJrKSEsdoMzKePKXct3gvD8oLcOQdIzGupr5Fj+EDe8gO/lxc1BzfMpxvA==",
      "dev": true,
      "dependencies": {
        "fill-range": "^7.1.1"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/bson": {
      "version": "6.10.2",
      "resolved": "https://registry.npmjs.org/bson/-/bson-6.10.2.tgz",
      "integrity": "sha512-5afhLTjqDSA3akH56E+/2J6kTDuSIlBxyXPdQslj9hcIgOUE378xdOfZvC/9q3LifJNI6KR/juZ+d0NRNYBwXg==",
      "engines": {
        "node": ">=16.20.1"
      }
    },
    "node_modules/buffer-equal-constant-time": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/buffer-equal-constant-time/-/buffer-equal-constant-time-1.0.1.tgz",
      "integrity": "sha512-zRpUiDwd/xk6ADqPMATG8vc9VPrkck7T07OIx0gnjmJAnHnTVXNQG3vfvWNuiZIkwu9KrKdA1iJKfsfTVxE6NA=="
    },
    "node_modules/bytes": {
      "version": "3.1.2",
      "resolved": "https://registry.npmjs.org/bytes/-/bytes-3.1.2.tgz",
      "integrity": "sha512-/Nf7TyzTx6S3yRJObOAV7956r8cr2+Oj8AC5dt8wSP3BQAoeX58NoHyCU8P8zGkNXStjTSi6fzO6F0pBdcYbEg==",
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/call-bind-apply-helpers": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/call-bind-apply-helpers/-/call-bind-apply-helpers-1.0.1.tgz",
      "integrity": "sha512-BhYE+WDaywFg2TBWYNXAE+8B1ATnThNBqXHP5nQu0jWJdVvY2hvkpyB3qOmtmDePiS5/BDQ8wASEWGMWRG148g==",
      "dependencies": {
        "es-errors": "^1.3.0",
        "function-bind": "^1.1.2"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/call-bound": {
      "version": "1.0.3",
      "resolved": "https://registry.npmjs.org/call-bound/-/call-bound-1.0.3.tgz",
      "integrity": "sha512-YTd+6wGlNlPxSuri7Y6X8tY2dmm12UMH66RpKMhiX6rsk5wXXnYgbUcOt8kiS31/AjfoTOvCsE+w8nZQLQnzHA==",
      "dependencies": {
        "call-bind-apply-helpers": "^1.0.1",
        "get-intrinsic": "^1.2.6"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/chokidar": {
      "version": "3.6.0",
      "resolved": "https://registry.npmjs.org/chokidar/-/chokidar-3.6.0.tgz",
      "integrity": "sha512-7VT13fmjotKpGipCW9JEQAusEPE+Ei8nl6/g4FBAmIm0GOOLMua9NDDo/DWp0ZAxCr3cPq5ZpBqmPAQgDda2Pw==",
      "dev": true,
      "dependencies": {
        "anymatch": "~3.1.2",
        "braces": "~3.0.2",
        "glob-parent": "~5.1.2",
        "is-binary-path": "~2.1.0",
        "is-glob": "~4.0.1",
        "normalize-path": "~3.0.0",
        "readdirp": "~3.6.0"
      },
      "engines": {
        "node": ">= 8.10.0"
      },
      "funding": {
        "url": "https://paulmillr.com/funding/"
      },
      "optionalDependencies": {
        "fsevents": "~2.3.2"
      }
    },
    "node_modules/color": {
      "version": "3.2.1",
      "resolved": "https://registry.npmjs.org/color/-/color-3.2.1.tgz",
      "integrity": "sha512-aBl7dZI9ENN6fUGC7mWpMTPNHmWUSNan9tuWN6ahh5ZLNk9baLJOnSMlrQkHcrfFgz2/RigjUVAjdx36VcemKA==",
      "dependencies": {
        "color-convert": "^1.9.3",
        "color-string": "^1.6.0"
      }
    },
    "node_modules/color-convert": {
      "version": "1.9.3",
      "resolved": "https://registry.npmjs.org/color-convert/-/color-convert-1.9.3.tgz",
      "integrity": "sha512-QfAUtd+vFdAtFQcC8CCyYt1fYWxSqAiK2cSD6zDB8N3cpsEBAvRxp9zOGg6G/SHHJYAT88/az/IuDGALsNVbGg==",
      "dependencies": {
        "color-name": "1.1.3"
      }
    },
    "node_modules/color-name": {
      "version": "1.1.3",
      "resolved": "https://registry.npmjs.org/color-name/-/color-name-1.1.3.tgz",
      "integrity": "sha512-72fSenhMw2HZMTVHeCA9KCmpEIbzWiQsjN+BHcBbS9vr1mtt+vJjPdksIBNUmKAW8TFUDPJK5SUU3QhE9NEXDw=="
    },
    "node_modules/color-string": {
      "version": "1.9.1",
      "resolved": "https://registry.npmjs.org/color-string/-/color-string-1.9.1.tgz",
      "integrity": "sha512-shrVawQFojnZv6xM40anx4CkoDP+fZsw/ZerEMsW/pyzsRbElpsL/DBVW7q3ExxwusdNXI3lXpuhEZkzs8p5Eg==",
      "dependencies": {
        "color-name": "^1.0.0",
        "simple-swizzle": "^0.2.2"
      }
    },
    "node_modules/colorspace": {
      "version": "1.1.4",
      "resolved": "https://registry.npmjs.org/colorspace/-/colorspace-1.1.4.tgz",
      "integrity": "sha512-BgvKJiuVu1igBUF2kEjRCZXol6wiiGbY5ipL/oVPwm0BL9sIpMIzM8IK7vwuxIIzOXMV3Ey5w+vxhm0rR/TN8w==",
      "dependencies": {
        "color": "^3.1.3",
        "text-hex": "1.0.x"
      }
    },
    "node_modules/combined-stream": {
      "version": "1.0.8",
      "resolved": "https://registry.npmjs.org/combined-stream/-/combined-stream-1.0.8.tgz",
      "integrity": "sha512-FQN4MRfuJeHf7cBbBMJFXhKSDq+2kAArBlmRBvcvFE5BB1HZKXtSFASDhdlz9zOYwxh8lDdnvmMOe/+5cdoEdg==",
      "dependencies": {
        "delayed-stream": "~1.0.0"
      },
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/concat-map": {
      "version": "0.0.1",
      "resolved": "https://registry.npmjs.org/concat-map/-/concat-map-0.0.1.tgz",
      "integrity": "sha512-/Srv4dswyQNBfohGpz9o6Yb3Gz3SrUDqBH5rTuhGR7ahtlbYKnVxw2bCFMRljaA7EXHaXZ8wsHdodFvbkhKmqg==",
      "dev": true
    },
    "node_modules/content-disposition": {
      "version": "0.5.4",
      "resolved": "https://registry.npmjs.org/content-disposition/-/content-disposition-0.5.4.tgz",
      "integrity": "sha512-FveZTNuGw04cxlAiWbzi6zTAL/lhehaWbTtgluJh4/E95DqMwTmha3KZN1aAWA8cFIhHzMZUvLevkw5Rqk+tSQ==",
      "dependencies": {
        "safe-buffer": "5.2.1"
      },
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/content-type": {
      "version": "1.0.5",
      "resolved": "https://registry.npmjs.org/content-type/-/content-type-1.0.5.tgz",
      "integrity": "sha512-nTjqfcBFEipKdXCv4YDQWCfmcLZKm81ldF0pAopTvyrFGVbcR6P/VAAd5G7N+0tTr8QqiU0tFadD6FK4NtJwOA==",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/cookie": {
      "version": "0.7.1",
      "resolved": "https://registry.npmjs.org/cookie/-/cookie-0.7.1.tgz",
      "integrity": "sha512-6DnInpx7SJ2AK3+CTUE/ZM0vWTUboZCegxhC2xiIydHR9jNuTAASBrfEpHhiGOZw/nX51bHt6YQl8jsGo4y/0w==",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/cookie-signature": {
      "version": "1.0.6",
      "resolved": "https://registry.npmjs.org/cookie-signature/-/cookie-signature-1.0.6.tgz",
      "integrity": "sha512-QADzlaHc8icV8I7vbaJXJwod9HWYp8uCqf1xa4OfNu1T7JVxQIrUgOWtHdNDtPiywmFbiS12VjotIXLrKM3orQ=="
    },
    "node_modules/core-util-is": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/core-util-is/-/core-util-is-1.0.2.tgz",
      "integrity": "sha512-3lqz5YjWTYnW6dlDa5TLaTCcShfar1e40rmcJVwCBJC6mWlFuj0eCHIElmG1g5kyuJ/GD+8Wn4FFCcz4gJPfaQ=="
    },
    "node_modules/cors": {
      "version": "2.8.5",
      "resolved": "https://registry.npmjs.org/cors/-/cors-2.8.5.tgz",
      "integrity": "sha512-KIHbLJqu73RGr/hnbrO9uBeixNGuvSQjul/jdFvS/KFSIH1hWVd1ng7zOHx+YrEfInLG7q4n6GHQ9cDtxv/P6g==",
      "dependencies": {
        "object-assign": "^4",
        "vary": "^1"
      },
      "engines": {
        "node": ">= 0.10"
      }
    },
    "node_modules/create-require": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/create-require/-/create-require-1.1.1.tgz",
      "integrity": "sha512-dcKFX3jn0MpIaXjisoRvexIJVEKzaq7z2rZKxf+MSr9TkdmHmsU4m2lcLojrj/FHl8mk5VxMmYA+ftRkP/3oKQ==",
      "dev": true
    },
    "node_modules/debug": {
      "version": "2.6.9",
      "resolved": "https://registry.npmjs.org/debug/-/debug-2.6.9.tgz",
      "integrity": "sha512-bC7ElrdJaJnPbAP+1EotYvqZsb3ecl5wi6Bfi6BJTUcNowp6cvspg0jXznRTKDjm/E7AdgFBVeAPVMNcKGsHMA==",
      "dependencies": {
        "ms": "2.0.0"
      }
    },
    "node_modules/delayed-stream": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/delayed-stream/-/delayed-stream-1.0.0.tgz",
      "integrity": "sha512-ZySD7Nf91aLB0RxL4KGrKHBXl7Eds1DAmEdcoVawXnLD7SDhpNgtuII2aAkg7a7QS41jxPSZ17p4VdGnMHk3MQ==",
      "engines": {
        "node": ">=0.4.0"
      }
    },
    "node_modules/depd": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/depd/-/depd-2.0.0.tgz",
      "integrity": "sha512-g7nH6P6dyDioJogAAGprGpCtVImJhpPk/roCzdb3fIh61/s/nPsfR6onyMwkCAR/OlC3yBC0lESvUoQEAssIrw==",
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/destroy": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/destroy/-/destroy-1.2.0.tgz",
      "integrity": "sha512-2sJGJTaXIIaR1w4iJSNoN0hnMY7Gpc/n8D4qSCJw8QqFWXf7cuAgnEHxBpweaVcPevC2l3KpjYCx3NypQQgaJg==",
      "engines": {
        "node": ">= 0.8",
        "npm": "1.2.8000 || >= 1.4.16"
      }
    },
    "node_modules/diff": {
      "version": "4.0.2",
      "resolved": "https://registry.npmjs.org/diff/-/diff-4.0.2.tgz",
      "integrity": "sha512-58lmxKSA4BNyLz+HHMUzlOEpg09FV+ev6ZMe3vJihgdxzgcwZ8VoEEPmALCZG9LmqfVoNMMKpttIYTVG6uDY7A==",
      "dev": true,
      "engines": {
        "node": ">=0.3.1"
      }
    },
    "node_modules/dotenv": {
      "version": "16.4.7",
      "resolved": "https://registry.npmjs.org/dotenv/-/dotenv-16.4.7.tgz",
      "integrity": "sha512-47qPchRCykZC03FhkYAhrvwU4xDBFIj1QPqaarj6mdM/hgUzfPHcpkHJOn3mJAufFeeAxAzeGsr5X0M4k6fLZQ==",
      "engines": {
        "node": ">=12"
      },
      "funding": {
        "url": "https://dotenvx.com"
      }
    },
    "node_modules/dunder-proto": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/dunder-proto/-/dunder-proto-1.0.1.tgz",
      "integrity": "sha512-KIN/nDJBQRcXw0MLVhZE9iQHmG68qAVIBg9CqmUYjmQIhgij9U5MFvrqkUL5FbtyyzZuOeOt0zdeRe4UY7ct+A==",
      "dependencies": {
        "call-bind-apply-helpers": "^1.0.1",
        "es-errors": "^1.3.0",
        "gopd": "^1.2.0"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/ecdsa-sig-formatter": {
      "version": "1.0.11",
      "resolved": "https://registry.npmjs.org/ecdsa-sig-formatter/-/ecdsa-sig-formatter-1.0.11.tgz",
      "integrity": "sha512-nagl3RYrbNv6kQkeJIpt6NJZy8twLB/2vtz6yN9Z4vRKHN4/QZJIEbqohALSgwKdnksuY3k5Addp5lg8sVoVcQ==",
      "dependencies": {
        "safe-buffer": "^5.0.1"
      }
    },
    "node_modules/ee-first": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/ee-first/-/ee-first-1.1.1.tgz",
      "integrity": "sha512-WMwm9LhRUo+WUaRN+vRuETqG89IgZphVSNkdFgeb6sS/E4OrDIN7t48CAewSHXc6C8lefD8KKfr5vY61brQlow=="
    },
    "node_modules/enabled": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/enabled/-/enabled-2.0.0.tgz",
      "integrity": "sha512-AKrN98kuwOzMIdAizXGI86UFBoo26CL21UM763y1h/GMSJ4/OHU9k2YlsmBpyScFo/wbLzWQJBMCW4+IO3/+OQ=="
    },
    "node_modules/encodeurl": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/encodeurl/-/encodeurl-2.0.0.tgz",
      "integrity": "sha512-Q0n9HRi4m6JuGIV1eFlmvJB7ZEVxu93IrMyiMsGC0lrMJMWzRgx6WGquyfQgZVb31vhGgXnfmPNNXmxnOkRBrg==",
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/es-define-property": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/es-define-property/-/es-define-property-1.0.1.tgz",
      "integrity": "sha512-e3nRfgfUZ4rNGL232gUgX06QNyyez04KdjFrF+LTRoOXmrOgFKDg4BCdsjW8EnT69eqdYGmRpJwiPVYNrCaW3g==",
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/es-errors": {
      "version": "1.3.0",
      "resolved": "https://registry.npmjs.org/es-errors/-/es-errors-1.3.0.tgz",
      "integrity": "sha512-Zf5H2Kxt2xjTvbJvP2ZWLEICxA6j+hAmMzIlypy4xcBg1vKVnx89Wy0GbS+kf5cwCVFFzdCFh2XSCFNULS6csw==",
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/es-object-atoms": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/es-object-atoms/-/es-object-atoms-1.1.1.tgz",
      "integrity": "sha512-FGgH2h8zKNim9ljj7dankFPcICIK9Cp5bm+c2gQSYePhpaG5+esrLODihIorn+Pe6FGJzWhXQotPv73jTaldXA==",
      "dependencies": {
        "es-errors": "^1.3.0"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/escape-html": {
      "version": "1.0.3",
      "resolved": "https://registry.npmjs.org/escape-html/-/escape-html-1.0.3.tgz",
      "integrity": "sha512-NiSupZ4OeuGwr68lGIeym/ksIZMJodUGOSCZ/FSnTxcrekbvqrgdUxlJOMpijaKZVjAJrWrGs/6Jy8OMuyj9ow=="
    },
    "node_modules/etag": {
      "version": "1.8.1",
      "resolved": "https://registry.npmjs.org/etag/-/etag-1.8.1.tgz",
      "integrity": "sha512-aIL5Fx7mawVa300al2BnEE4iNvo1qETxLrPI/o05L7z6go7fCw1J6EQmbK4FmJ2AS7kgVF/KEZWufBfdClMcPg==",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/express": {
      "version": "4.21.2",
      "resolved": "https://registry.npmjs.org/express/-/express-4.21.2.tgz",
      "integrity": "sha512-28HqgMZAmih1Czt9ny7qr6ek2qddF4FclbMzwhCREB6OFfH+rXAnuNCwo1/wFvrtbgsQDb4kSbX9de9lFbrXnA==",
      "dependencies": {
        "accepts": "~1.3.8",
        "array-flatten": "1.1.1",
        "body-parser": "1.20.3",
        "content-disposition": "0.5.4",
        "content-type": "~1.0.4",
        "cookie": "0.7.1",
        "cookie-signature": "1.0.6",
        "debug": "2.6.9",
        "depd": "2.0.0",
        "encodeurl": "~2.0.0",
        "escape-html": "~1.0.3",
        "etag": "~1.8.1",
        "finalhandler": "1.3.1",
        "fresh": "0.5.2",
        "http-errors": "2.0.0",
        "merge-descriptors": "1.0.3",
        "methods": "~1.1.2",
        "on-finished": "2.4.1",
        "parseurl": "~1.3.3",
        "path-to-regexp": "0.1.12",
        "proxy-addr": "~2.0.7",
        "qs": "6.13.0",
        "range-parser": "~1.2.1",
        "safe-buffer": "5.2.1",
        "send": "0.19.0",
        "serve-static": "1.16.2",
        "setprototypeof": "1.2.0",
        "statuses": "2.0.1",
        "type-is": "~1.6.18",
        "utils-merge": "1.0.1",
        "vary": "~1.1.2"
      },
      "engines": {
        "node": ">= 0.10.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/express"
      }
    },
    "node_modules/express-jwt": {
      "version": "8.5.1",
      "resolved": "https://registry.npmjs.org/express-jwt/-/express-jwt-8.5.1.tgz",
      "integrity": "sha512-Dv6QjDLpR2jmdb8M6XQXiCcpEom7mK8TOqnr0/TngDKsG2DHVkO8+XnVxkJVN7BuS1I3OrGw6N8j5DaaGgkDRQ==",
      "dependencies": {
        "@types/jsonwebtoken": "^9",
        "express-unless": "^2.1.3",
        "jsonwebtoken": "^9.0.0"
      },
      "engines": {
        "node": ">= 8.0.0"
      }
    },
    "node_modules/express-unless": {
      "version": "2.1.3",
      "resolved": "https://registry.npmjs.org/express-unless/-/express-unless-2.1.3.tgz",
      "integrity": "sha512-wj4tLMyCVYuIIKHGt0FhCtIViBcwzWejX0EjNxveAa6dG+0XBCQhMbx+PnkLkFCxLC69qoFrxds4pIyL88inaQ=="
    },
    "node_modules/extsprintf": {
      "version": "1.4.1",
      "resolved": "https://registry.npmjs.org/extsprintf/-/extsprintf-1.4.1.tgz",
      "integrity": "sha512-Wrk35e8ydCKDj/ArClo1VrPVmN8zph5V4AtHwIuHhvMXsKf73UT3BOD+azBIW+3wOJ4FhEH7zyaJCFvChjYvMA==",
      "engines": [
        "node >=0.6.0"
      ]
    },
    "node_modules/fecha": {
      "version": "4.2.3",
      "resolved": "https://registry.npmjs.org/fecha/-/fecha-4.2.3.tgz",
      "integrity": "sha512-OP2IUU6HeYKJi3i0z4A19kHMQoLVs4Hc+DPqqxI2h/DPZHTm/vjsfC6P0b4jCMy14XizLBqvndQ+UilD7707Jw=="
    },
    "node_modules/fill-range": {
      "version": "7.1.1",
      "resolved": "https://registry.npmjs.org/fill-range/-/fill-range-7.1.1.tgz",
      "integrity": "sha512-YsGpe3WHLK8ZYi4tWDg2Jy3ebRz2rXowDxnld4bkQB00cc/1Zw9AWnC0i9ztDJitivtQvaI9KaLyKrc+hBW0yg==",
      "dev": true,
      "dependencies": {
        "to-regex-range": "^5.0.1"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/finalhandler": {
      "version": "1.3.1",
      "resolved": "https://registry.npmjs.org/finalhandler/-/finalhandler-1.3.1.tgz",
      "integrity": "sha512-6BN9trH7bp3qvnrRyzsBz+g3lZxTNZTbVO2EV1CS0WIcDbawYVdYvGflME/9QP0h0pYlCDBCTjYa9nZzMDpyxQ==",
      "dependencies": {
        "debug": "2.6.9",
        "encodeurl": "~2.0.0",
        "escape-html": "~1.0.3",
        "on-finished": "2.4.1",
        "parseurl": "~1.3.3",
        "statuses": "2.0.1",
        "unpipe": "~1.0.0"
      },
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/fn.name": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/fn.name/-/fn.name-1.1.0.tgz",
      "integrity": "sha512-GRnmB5gPyJpAhTQdSZTSp9uaPSvl09KoYcMQtsB9rQoOmzs9dH6ffeccH+Z+cv6P68Hu5bC6JjRh4Ah/mHSNRw=="
    },
    "node_modules/follow-redirects": {
      "version": "1.15.9",
      "resolved": "https://registry.npmjs.org/follow-redirects/-/follow-redirects-1.15.9.tgz",
      "integrity": "sha512-gew4GsXizNgdoRyqmyfMHyAmXsZDk6mHkSxZFCzW9gwlbtOW44CDtYavM+y+72qD/Vq2l550kMF52DT8fOLJqQ==",
      "funding": [
        {
          "type": "individual",
          "url": "https://github.com/sponsors/RubenVerborgh"
        }
      ],
      "engines": {
        "node": ">=4.0"
      },
      "peerDependenciesMeta": {
        "debug": {
          "optional": true
        }
      }
    },
    "node_modules/form-data": {
      "version": "4.0.1",
      "resolved": "https://registry.npmjs.org/form-data/-/form-data-4.0.1.tgz",
      "integrity": "sha512-tzN8e4TX8+kkxGPK8D5u0FNmjPUjw3lwC9lSLxxoB/+GtsJG91CO8bSWy73APlgAZzZbXEYZJuxjkHH2w+Ezhw==",
      "dependencies": {
        "asynckit": "^0.4.0",
        "combined-stream": "^1.0.8",
        "mime-types": "^2.1.12"
      },
      "engines": {
        "node": ">= 6"
      }
    },
    "node_modules/forwarded": {
      "version": "0.2.0",
      "resolved": "https://registry.npmjs.org/forwarded/-/forwarded-0.2.0.tgz",
      "integrity": "sha512-buRG0fpBtRHSTCOASe6hD258tEubFoRLb4ZNA6NxMVHNw2gOcwHo9wyablzMzOA5z9xA9L1KNjk/Nt6MT9aYow==",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/fresh": {
      "version": "0.5.2",
      "resolved": "https://registry.npmjs.org/fresh/-/fresh-0.5.2.tgz",
      "integrity": "sha512-zJ2mQYM18rEFOudeV4GShTGIQ7RbzA7ozbU9I/XBpm7kqgMywgmylMwXHxZJmkVoYkna9d2pVXVXPdYTP9ej8Q==",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/fsevents": {
      "version": "2.3.3",
      "resolved": "https://registry.npmjs.org/fsevents/-/fsevents-2.3.3.tgz",
      "integrity": "sha512-5xoDfX+fL7faATnagmWPpbFtwh/R77WmMMqqHGS65C3vvB0YHrgF+B1YmZ3441tMj5n63k0212XNoJwzlhffQw==",
      "dev": true,
      "hasInstallScript": true,
      "optional": true,
      "os": [
        "darwin"
      ],
      "engines": {
        "node": "^8.16.0 || ^10.6.0 || >=11.0.0"
      }
    },
    "node_modules/function-bind": {
      "version": "1.1.2",
      "resolved": "https://registry.npmjs.org/function-bind/-/function-bind-1.1.2.tgz",
      "integrity": "sha512-7XHNxH7qX9xG5mIwxkhumTox/MIRNcOgDrxWsMt2pAr23WHp6MrRlN7FBSFpCpr+oVO0F744iUgR82nJMfG2SA==",
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/get-intrinsic": {
      "version": "1.2.7",
      "resolved": "https://registry.npmjs.org/get-intrinsic/-/get-intrinsic-1.2.7.tgz",
      "integrity": "sha512-VW6Pxhsrk0KAOqs3WEd0klDiF/+V7gQOpAvY1jVU/LHmaD/kQO4523aiJuikX/QAKYiW6x8Jh+RJej1almdtCA==",
      "dependencies": {
        "call-bind-apply-helpers": "^1.0.1",
        "es-define-property": "^1.0.1",
        "es-errors": "^1.3.0",
        "es-object-atoms": "^1.0.0",
        "function-bind": "^1.1.2",
        "get-proto": "^1.0.0",
        "gopd": "^1.2.0",
        "has-symbols": "^1.1.0",
        "hasown": "^2.0.2",
        "math-intrinsics": "^1.1.0"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/get-proto": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/get-proto/-/get-proto-1.0.1.tgz",
      "integrity": "sha512-sTSfBjoXBp89JvIKIefqw7U2CCebsc74kiY6awiGogKtoSGbgjYE/G/+l9sF3MWFPNc9IcoOC4ODfKHfxFmp0g==",
      "dependencies": {
        "dunder-proto": "^1.0.1",
        "es-object-atoms": "^1.0.0"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/glob-parent": {
      "version": "5.1.2",
      "resolved": "https://registry.npmjs.org/glob-parent/-/glob-parent-5.1.2.tgz",
      "integrity": "sha512-AOIgSQCepiJYwP3ARnGx+5VnTu2HBYdzbGP45eLw1vr3zB3vZLeyed1sC9hnbcOc9/SrMyM5RPQrkGz4aS9Zow==",
      "dev": true,
      "dependencies": {
        "is-glob": "^4.0.1"
      },
      "engines": {
        "node": ">= 6"
      }
    },
    "node_modules/gopd": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/gopd/-/gopd-1.2.0.tgz",
      "integrity": "sha512-ZUKRh6/kUFoAiTAtTYPZJ3hw9wNxx+BIBOijnlG9PnrJsCcSjs1wyyD6vJpaYtgnzDrKYRSqf3OO6Rfa93xsRg==",
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/has-flag": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/has-flag/-/has-flag-3.0.0.tgz",
      "integrity": "sha512-sKJf1+ceQBr4SMkvQnBDNDtf4TXpVhVGateu0t918bl30FnbE2m4vNLX+VWe/dpjlb+HugGYzW7uQXH98HPEYw==",
      "dev": true,
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/has-symbols": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/has-symbols/-/has-symbols-1.1.0.tgz",
      "integrity": "sha512-1cDNdwJ2Jaohmb3sg4OmKaMBwuC48sYni5HUw2DvsC8LjGTLK9h+eb1X6RyuOHe4hT0ULCW68iomhjUoKUqlPQ==",
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/hasown": {
      "version": "2.0.2",
      "resolved": "https://registry.npmjs.org/hasown/-/hasown-2.0.2.tgz",
      "integrity": "sha512-0hJU9SCPvmMzIBdZFqNPXWa6dqh7WdH0cII9y+CyS8rG3nL48Bclra9HmKhVVUHyPWNH5Y7xDwAB7bfgSjkUMQ==",
      "dependencies": {
        "function-bind": "^1.1.2"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/helmet": {
      "version": "8.0.0",
      "resolved": "https://registry.npmjs.org/helmet/-/helmet-8.0.0.tgz",
      "integrity": "sha512-VyusHLEIIO5mjQPUI1wpOAEu+wl6Q0998jzTxqUYGE45xCIcAxy3MsbEK/yyJUJ3ADeMoB6MornPH6GMWAf+Pw==",
      "engines": {
        "node": ">=18.0.0"
      }
    },
    "node_modules/http-errors": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/http-errors/-/http-errors-2.0.0.tgz",
      "integrity": "sha512-FtwrG/euBzaEjYeRqOgly7G0qviiXoJWnvEH2Z1plBdXgbyjv34pHTSb9zoeHMyDy33+DWy5Wt9Wo+TURtOYSQ==",
      "dependencies": {
        "depd": "2.0.0",
        "inherits": "2.0.4",
        "setprototypeof": "1.2.0",
        "statuses": "2.0.1",
        "toidentifier": "1.0.1"
      },
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/iconv-lite": {
      "version": "0.4.24",
      "resolved": "https://registry.npmjs.org/iconv-lite/-/iconv-lite-0.4.24.tgz",
      "integrity": "sha512-v3MXnZAcvnywkTUEZomIActle7RXXeedOR31wwl7VlyoXO4Qi9arvSenNQWne1TcRwhCL1HwLI21bEqdpj8/rA==",
      "dependencies": {
        "safer-buffer": ">= 2.1.2 < 3"
      },
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/ignore-by-default": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/ignore-by-default/-/ignore-by-default-1.0.1.tgz",
      "integrity": "sha512-Ius2VYcGNk7T90CppJqcIkS5ooHUZyIQK+ClZfMfMNFEF9VSE73Fq+906u/CWu92x4gzZMWOwfFYckPObzdEbA==",
      "dev": true
    },
    "node_modules/inherits": {
      "version": "2.0.4",
      "resolved": "https://registry.npmjs.org/inherits/-/inherits-2.0.4.tgz",
      "integrity": "sha512-k/vGaX4/Yla3WzyMCvTQOXYeIHvqOKtnqBduzTHpzpQZzAskKMhZ2K+EnBiSM9zGSoIFeMpXKxa4dYeZIQqewQ=="
    },
    "node_modules/ipaddr.js": {
      "version": "1.9.1",
      "resolved": "https://registry.npmjs.org/ipaddr.js/-/ipaddr.js-1.9.1.tgz",
      "integrity": "sha512-0KI/607xoxSToH7GjN1FfSbLoU0+btTicjsQSWQlh/hZykN8KpmMf7uYwPW3R+akZ6R/w18ZlXSHBYXiYUPO3g==",
      "engines": {
        "node": ">= 0.10"
      }
    },
    "node_modules/is-arrayish": {
      "version": "0.3.2",
      "resolved": "https://registry.npmjs.org/is-arrayish/-/is-arrayish-0.3.2.tgz",
      "integrity": "sha512-eVRqCvVlZbuw3GrM63ovNSNAeA1K16kaR/LRY/92w0zxQ5/1YzwblUX652i4Xs9RwAGjW9d9y6X88t8OaAJfWQ=="
    },
    "node_modules/is-binary-path": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/is-binary-path/-/is-binary-path-2.1.0.tgz",
      "integrity": "sha512-ZMERYes6pDydyuGidse7OsHxtbI7WVeUEozgR/g7rd0xUimYNlvZRE/K2MgZTjWy725IfelLeVcEM97mmtRGXw==",
      "dev": true,
      "dependencies": {
        "binary-extensions": "^2.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/is-extglob": {
      "version": "2.1.1",
      "resolved": "https://registry.npmjs.org/is-extglob/-/is-extglob-2.1.1.tgz",
      "integrity": "sha512-SbKbANkN603Vi4jEZv49LeVJMn4yGwsbzZworEoyEiutsN3nJYdbO36zfhGJ6QEDpOZIFkDtnq5JRxmvl3jsoQ==",
      "dev": true,
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/is-glob": {
      "version": "4.0.3",
      "resolved": "https://registry.npmjs.org/is-glob/-/is-glob-4.0.3.tgz",
      "integrity": "sha512-xelSayHH36ZgE7ZWhli7pW34hNbNl8Ojv5KVmkJD4hBdD3th8Tfk9vYasLM+mXWOZhFkgZfxhLSnrwRr4elSSg==",
      "dev": true,
      "dependencies": {
        "is-extglob": "^2.1.1"
      },
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/is-number": {
      "version": "7.0.0",
      "resolved": "https://registry.npmjs.org/is-number/-/is-number-7.0.0.tgz",
      "integrity": "sha512-41Cifkg6e8TylSpdtTpeLVMqvSBEVzTttHvERD741+pnZ8ANv0004MRL43QKPDlK9cGvNp6NZWZUBlbGXYxxng==",
      "dev": true,
      "engines": {
        "node": ">=0.12.0"
      }
    },
    "node_modules/is-stream": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/is-stream/-/is-stream-2.0.1.tgz",
      "integrity": "sha512-hFoiJiTl63nn+kstHGBtewWSKnQLpyb155KHheA1l39uvtO9nWIop1p3udqPcUd/xbF1VLMO4n7OI6p7RbngDg==",
      "engines": {
        "node": ">=8"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/jsonwebtoken": {
      "version": "9.0.2",
      "resolved": "https://registry.npmjs.org/jsonwebtoken/-/jsonwebtoken-9.0.2.tgz",
      "integrity": "sha512-PRp66vJ865SSqOlgqS8hujT5U4AOgMfhrwYIuIhfKaoSCZcirrmASQr8CX7cUg+RMih+hgznrjp99o+W4pJLHQ==",
      "dependencies": {
        "jws": "^3.2.2",
        "lodash.includes": "^4.3.0",
        "lodash.isboolean": "^3.0.3",
        "lodash.isinteger": "^4.0.4",
        "lodash.isnumber": "^3.0.3",
        "lodash.isplainobject": "^4.0.6",
        "lodash.isstring": "^4.0.1",
        "lodash.once": "^4.0.0",
        "ms": "^2.1.1",
        "semver": "^7.5.4"
      },
      "engines": {
        "node": ">=12",
        "npm": ">=6"
      }
    },
    "node_modules/jsonwebtoken/node_modules/ms": {
      "version": "2.1.3",
      "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.3.tgz",
      "integrity": "sha512-6FlzubTLZG3J2a/NVCAleEhjzq5oxgHyaCU9yYXvcLsvoVaHJq/s5xXI6/XXP6tz7R9xAOtHnSO/tXtF3WRTlA=="
    },
    "node_modules/jwa": {
      "version": "1.4.1",
      "resolved": "https://registry.npmjs.org/jwa/-/jwa-1.4.1.tgz",
      "integrity": "sha512-qiLX/xhEEFKUAJ6FiBMbes3w9ATzyk5W7Hvzpa/SLYdxNtng+gcurvrI7TbACjIXlsJyr05/S1oUhZrc63evQA==",
      "dependencies": {
        "buffer-equal-constant-time": "1.0.1",
        "ecdsa-sig-formatter": "1.0.11",
        "safe-buffer": "^5.0.1"
      }
    },
    "node_modules/jws": {
      "version": "3.2.2",
      "resolved": "https://registry.npmjs.org/jws/-/jws-3.2.2.tgz",
      "integrity": "sha512-YHlZCB6lMTllWDtSPHz/ZXTsi8S00usEV6v1tjq8tOUZzw7DpSDWVXjXDre6ed1w/pd495ODpHZYSdkRTsa0HA==",
      "dependencies": {
        "jwa": "^1.4.1",
        "safe-buffer": "^5.0.1"
      }
    },
    "node_modules/kuler": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/kuler/-/kuler-2.0.0.tgz",
      "integrity": "sha512-Xq9nH7KlWZmXAtodXDDRE7vs6DU1gTU8zYDHDiWLSip45Egwq3plLHzPn27NgvzL2r1LMPC1vdqh98sQxtqj4A=="
    },
    "node_modules/ldapjs": {
      "version": "3.0.7",
      "resolved": "https://registry.npmjs.org/ldapjs/-/ldapjs-3.0.7.tgz",
      "integrity": "sha512-1ky+WrN+4CFMuoekUOv7Y1037XWdjKpu0xAPwSP+9KdvmV9PG+qOKlssDV6a+U32apwxdD3is/BZcWOYzN30cg==",
      "deprecated": "This package has been decomissioned. See https://github.com/ldapjs/node-ldapjs/blob/8ffd0bc9c149088a10ec4c1ec6a18450f76ad05d/README.md",
      "dependencies": {
        "@ldapjs/asn1": "^2.0.0",
        "@ldapjs/attribute": "^1.0.0",
        "@ldapjs/change": "^1.0.0",
        "@ldapjs/controls": "^2.1.0",
        "@ldapjs/dn": "^1.1.0",
        "@ldapjs/filter": "^2.1.1",
        "@ldapjs/messages": "^1.3.0",
        "@ldapjs/protocol": "^1.2.1",
        "abstract-logging": "^2.0.1",
        "assert-plus": "^1.0.0",
        "backoff": "^2.5.0",
        "once": "^1.4.0",
        "vasync": "^2.2.1",
        "verror": "^1.10.1"
      }
    },
    "node_modules/lodash.includes": {
      "version": "4.3.0",
      "resolved": "https://registry.npmjs.org/lodash.includes/-/lodash.includes-4.3.0.tgz",
      "integrity": "sha512-W3Bx6mdkRTGtlJISOvVD/lbqjTlPPUDTMnlXZFnVwi9NKJ6tiAk6LVdlhZMm17VZisqhKcgzpO5Wz91PCt5b0w=="
    },
    "node_modules/lodash.isboolean": {
      "version": "3.0.3",
      "resolved": "https://registry.npmjs.org/lodash.isboolean/-/lodash.isboolean-3.0.3.tgz",
      "integrity": "sha512-Bz5mupy2SVbPHURB98VAcw+aHh4vRV5IPNhILUCsOzRmsTmSQ17jIuqopAentWoehktxGd9e/hbIXq980/1QJg=="
    },
    "node_modules/lodash.isinteger": {
      "version": "4.0.4",
      "resolved": "https://registry.npmjs.org/lodash.isinteger/-/lodash.isinteger-4.0.4.tgz",
      "integrity": "sha512-DBwtEWN2caHQ9/imiNeEA5ys1JoRtRfY3d7V9wkqtbycnAmTvRRmbHKDV4a0EYc678/dia0jrte4tjYwVBaZUA=="
    },
    "node_modules/lodash.isnumber": {
      "version": "3.0.3",
      "resolved": "https://registry.npmjs.org/lodash.isnumber/-/lodash.isnumber-3.0.3.tgz",
      "integrity": "sha512-QYqzpfwO3/CWf3XP+Z+tkQsfaLL/EnUlXWVkIk5FUPc4sBdTehEqZONuyRt2P67PXAk+NXmTBcc97zw9t1FQrw=="
    },
    "node_modules/lodash.isplainobject": {
      "version": "4.0.6",
      "resolved": "https://registry.npmjs.org/lodash.isplainobject/-/lodash.isplainobject-4.0.6.tgz",
      "integrity": "sha512-oSXzaWypCMHkPC3NvBEaPHf0KsA5mvPrOPgQWDsbg8n7orZ290M0BmC/jgRZ4vcJ6DTAhjrsSYgdsW/F+MFOBA=="
    },
    "node_modules/lodash.isstring": {
      "version": "4.0.1",
      "resolved": "https://registry.npmjs.org/lodash.isstring/-/lodash.isstring-4.0.1.tgz",
      "integrity": "sha512-0wJxfxH1wgO3GrbuP+dTTk7op+6L41QCXbGINEmD+ny/G/eCqGzxyCsh7159S+mgDDcoarnBw6PC1PS5+wUGgw=="
    },
    "node_modules/lodash.once": {
      "version": "4.1.1",
      "resolved": "https://registry.npmjs.org/lodash.once/-/lodash.once-4.1.1.tgz",
      "integrity": "sha512-Sb487aTOCr9drQVL8pIxOzVhafOjZN9UU54hiN8PU3uAiSV7lx1yYNpbNmex2PK6dSJoNTSJUUswT651yww3Mg=="
    },
    "node_modules/logform": {
      "version": "2.7.0",
      "resolved": "https://registry.npmjs.org/logform/-/logform-2.7.0.tgz",
      "integrity": "sha512-TFYA4jnP7PVbmlBIfhlSe+WKxs9dklXMTEGcBCIvLhE/Tn3H6Gk1norupVW7m5Cnd4bLcr08AytbyV/xj7f/kQ==",
      "dependencies": {
        "@colors/colors": "1.6.0",
        "@types/triple-beam": "^1.3.2",
        "fecha": "^4.2.0",
        "ms": "^2.1.1",
        "safe-stable-stringify": "^2.3.1",
        "triple-beam": "^1.3.0"
      },
      "engines": {
        "node": ">= 12.0.0"
      }
    },
    "node_modules/logform/node_modules/ms": {
      "version": "2.1.3",
      "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.3.tgz",
      "integrity": "sha512-6FlzubTLZG3J2a/NVCAleEhjzq5oxgHyaCU9yYXvcLsvoVaHJq/s5xXI6/XXP6tz7R9xAOtHnSO/tXtF3WRTlA=="
    },
    "node_modules/make-error": {
      "version": "1.3.6",
      "resolved": "https://registry.npmjs.org/make-error/-/make-error-1.3.6.tgz",
      "integrity": "sha512-s8UhlNe7vPKomQhC1qFelMokr/Sc3AgNbso3n74mVPA5LTZwkB9NlXf4XPamLxJE8h0gh73rM94xvwRT2CVInw==",
      "dev": true
    },
    "node_modules/math-intrinsics": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/math-intrinsics/-/math-intrinsics-1.1.0.tgz",
      "integrity": "sha512-/IXtbwEk5HTPyEwyKX6hGkYXxM9nbj64B+ilVJnC/R6B0pH5G4V3b0pVbL7DBj4tkhBAppbQUlf6F6Xl9LHu1g==",
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/media-typer": {
      "version": "0.3.0",
      "resolved": "https://registry.npmjs.org/media-typer/-/media-typer-0.3.0.tgz",
      "integrity": "sha512-dq+qelQ9akHpcOl/gUVRTxVIOkAJ1wR3QAvb4RsVjS8oVoFjDGTc679wJYmUmknUF5HwMLOgb5O+a3KxfWapPQ==",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/memory-pager": {
      "version": "1.5.0",
      "resolved": "https://registry.npmjs.org/memory-pager/-/memory-pager-1.5.0.tgz",
      "integrity": "sha512-ZS4Bp4r/Zoeq6+NLJpP+0Zzm0pR8whtGPf1XExKLJBAczGMnSi3It14OiNCStjQjM6NU1okjQGSxgEZN8eBYKg=="
    },
    "node_modules/merge-descriptors": {
      "version": "1.0.3",
      "resolved": "https://registry.npmjs.org/merge-descriptors/-/merge-descriptors-1.0.3.tgz",
      "integrity": "sha512-gaNvAS7TZ897/rVaZ0nMtAyxNyi/pdbjbAwUpFQpN70GqnVfOiXpeUUMKRBmzXaSQ8DdTX4/0ms62r2K+hE6mQ==",
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/methods": {
      "version": "1.1.2",
      "resolved": "https://registry.npmjs.org/methods/-/methods-1.1.2.tgz",
      "integrity": "sha512-iclAHeNqNm68zFtnZ0e+1L2yUIdvzNoauKU4WBA3VvH/vPFieF7qfRlwUZU+DA9P9bPXIS90ulxoUoCH23sV2w==",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/mime": {
      "version": "1.6.0",
      "resolved": "https://registry.npmjs.org/mime/-/mime-1.6.0.tgz",
      "integrity": "sha512-x0Vn8spI+wuJ1O6S7gnbaQg8Pxh4NNHb7KSINmEWKiPE4RKOplvijn+NkmYmmRgP68mc70j2EbeTFRsrswaQeg==",
      "bin": {
        "mime": "cli.js"
      },
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/mime-db": {
      "version": "1.52.0",
      "resolved": "https://registry.npmjs.org/mime-db/-/mime-db-1.52.0.tgz",
      "integrity": "sha512-sPU4uV7dYlvtWJxwwxHD0PuihVNiE7TyAbQ5SWxDCB9mUYvOgroQOwYQQOKPJ8CIbE+1ETVlOoK1UC2nU3gYvg==",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/mime-types": {
      "version": "2.1.35",
      "resolved": "https://registry.npmjs.org/mime-types/-/mime-types-2.1.35.tgz",
      "integrity": "sha512-ZDY+bPm5zTTF+YpCrAU9nK0UgICYPT0QtT1NZWFv4s++TNkcgVaT0g6+4R2uI4MjQjzysHB1zxuWL50hzaeXiw==",
      "dependencies": {
        "mime-db": "1.52.0"
      },
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/minimatch": {
      "version": "3.1.2",
      "resolved": "https://registry.npmjs.org/minimatch/-/minimatch-3.1.2.tgz",
      "integrity": "sha512-J7p63hRiAjw1NDEww1W7i37+ByIrOWO5XQQAzZ3VOcL0PNybwpfmV/N05zFAzwQ9USyEcX6t3UO+K5aqBQOIHw==",
      "dev": true,
      "dependencies": {
        "brace-expansion": "^1.1.7"
      },
      "engines": {
        "node": "*"
      }
    },
    "node_modules/mongodb": {
      "version": "6.13.0",
      "resolved": "https://registry.npmjs.org/mongodb/-/mongodb-6.13.0.tgz",
      "integrity": "sha512-KeESYR5TEaFxOuwRqkOm3XOsMqCSkdeDMjaW5u2nuKfX7rqaofp7JQGoi7sVqQcNJTKuveNbzZtWMstb8ABP6Q==",
      "dependencies": {
        "@mongodb-js/saslprep": "^1.1.9",
        "bson": "^6.10.1",
        "mongodb-connection-string-url": "^3.0.0"
      },
      "engines": {
        "node": ">=16.20.1"
      },
      "peerDependencies": {
        "@aws-sdk/credential-providers": "^3.188.0",
        "@mongodb-js/zstd": "^1.1.0 || ^2.0.0",
        "gcp-metadata": "^5.2.0",
        "kerberos": "^2.0.1",
        "mongodb-client-encryption": ">=6.0.0 <7",
        "snappy": "^7.2.2",
        "socks": "^2.7.1"
      },
      "peerDependenciesMeta": {
        "@aws-sdk/credential-providers": {
          "optional": true
        },
        "@mongodb-js/zstd": {
          "optional": true
        },
        "gcp-metadata": {
          "optional": true
        },
        "kerberos": {
          "optional": true
        },
        "mongodb-client-encryption": {
          "optional": true
        },
        "snappy": {
          "optional": true
        },
        "socks": {
          "optional": true
        }
      }
    },
    "node_modules/mongodb-connection-string-url": {
      "version": "3.0.2",
      "resolved": "https://registry.npmjs.org/mongodb-connection-string-url/-/mongodb-connection-string-url-3.0.2.tgz",
      "integrity": "sha512-rMO7CGo/9BFwyZABcKAWL8UJwH/Kc2x0g72uhDWzG48URRax5TCIcJ7Rc3RZqffZzO/Gwff/jyKwCU9TN8gehA==",
      "dependencies": {
        "@types/whatwg-url": "^11.0.2",
        "whatwg-url": "^14.1.0 || ^13.0.0"
      }
    },
    "node_modules/ms": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/ms/-/ms-2.0.0.tgz",
      "integrity": "sha512-Tpp60P6IUJDTuOq/5Z8cdskzJujfwqfOTkrwIwj7IRISpnkJnT6SyJ4PCPnGMoFjC9ddhal5KVIYtAt97ix05A=="
    },
    "node_modules/negotiator": {
      "version": "0.6.3",
      "resolved": "https://registry.npmjs.org/negotiator/-/negotiator-0.6.3.tgz",
      "integrity": "sha512-+EUsqGPLsM+j/zdChZjsnX51g4XrHFOIXwfnCVPGlQk/k5giakcKsuxCObBRu6DSm9opw/O6slWbJdghQM4bBg==",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/nodemon": {
      "version": "3.1.9",
      "resolved": "https://registry.npmjs.org/nodemon/-/nodemon-3.1.9.tgz",
      "integrity": "sha512-hdr1oIb2p6ZSxu3PB2JWWYS7ZQ0qvaZsc3hK8DR8f02kRzc8rjYmxAIvdz+aYC+8F2IjNaB7HMcSDg8nQpJxyg==",
      "dev": true,
      "dependencies": {
        "chokidar": "^3.5.2",
        "debug": "^4",
        "ignore-by-default": "^1.0.1",
        "minimatch": "^3.1.2",
        "pstree.remy": "^1.1.8",
        "semver": "^7.5.3",
        "simple-update-notifier": "^2.0.0",
        "supports-color": "^5.5.0",
        "touch": "^3.1.0",
        "undefsafe": "^2.0.5"
      },
      "bin": {
        "nodemon": "bin/nodemon.js"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/nodemon"
      }
    },
    "node_modules/nodemon/node_modules/debug": {
      "version": "4.4.0",
      "resolved": "https://registry.npmjs.org/debug/-/debug-4.4.0.tgz",
      "integrity": "sha512-6WTZ/IxCY/T6BALoZHaE4ctp9xm+Z5kY/pzYaCHRFeyVhojxlrm+46y68HA6hr0TcwEssoxNiDEUJQjfPZ/RYA==",
      "dev": true,
      "dependencies": {
        "ms": "^2.1.3"
      },
      "engines": {
        "node": ">=6.0"
      },
      "peerDependenciesMeta": {
        "supports-color": {
          "optional": true
        }
      }
    },
    "node_modules/nodemon/node_modules/ms": {
      "version": "2.1.3",
      "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.3.tgz",
      "integrity": "sha512-6FlzubTLZG3J2a/NVCAleEhjzq5oxgHyaCU9yYXvcLsvoVaHJq/s5xXI6/XXP6tz7R9xAOtHnSO/tXtF3WRTlA==",
      "dev": true
    },
    "node_modules/normalize-path": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/normalize-path/-/normalize-path-3.0.0.tgz",
      "integrity": "sha512-6eZs5Ls3WtCisHWp9S2GUy8dqkpGi4BVSz3GaqiE6ezub0512ESztXUwUB6C6IKbQkY2Pnb/mD4WYojCRwcwLA==",
      "dev": true,
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/object-assign": {
      "version": "4.1.1",
      "resolved": "https://registry.npmjs.org/object-assign/-/object-assign-4.1.1.tgz",
      "integrity": "sha512-rJgTQnkUnH1sFw8yT6VSU3zD3sWmu6sZhIseY8VX+GRu3P6F7Fu+JNDoXfklElbLJSnc3FUQHVe4cU5hj+BcUg==",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/object-inspect": {
      "version": "1.13.4",
      "resolved": "https://registry.npmjs.org/object-inspect/-/object-inspect-1.13.4.tgz",
      "integrity": "sha512-W67iLl4J2EXEGTbfeHCffrjDfitvLANg0UlX3wFUUSTx92KXRFegMHUVgSqE+wvhAbi4WqjGg9czysTV2Epbew==",
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/on-finished": {
      "version": "2.4.1",
      "resolved": "https://registry.npmjs.org/on-finished/-/on-finished-2.4.1.tgz",
      "integrity": "sha512-oVlzkg3ENAhCk2zdv7IJwd/QUD4z2RxRwpkcGY8psCVcCYZNq4wYnVWALHM+brtuJjePWiYF/ClmuDr8Ch5+kg==",
      "dependencies": {
        "ee-first": "1.1.1"
      },
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/once": {
      "version": "1.4.0",
      "resolved": "https://registry.npmjs.org/once/-/once-1.4.0.tgz",
      "integrity": "sha512-lNaJgI+2Q5URQBkccEKHTQOPaXdUxnZZElQTZY0MFUAuaEqe1E+Nyvgdz/aIyNi6Z9MzO5dv1H8n58/GELp3+w==",
      "dependencies": {
        "wrappy": "1"
      }
    },
    "node_modules/one-time": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/one-time/-/one-time-1.0.0.tgz",
      "integrity": "sha512-5DXOiRKwuSEcQ/l0kGCF6Q3jcADFv5tSmRaJck/OqkVFcOzutB134KRSfF0xDrL39MNnqxbHBbUUcjZIhTgb2g==",
      "dependencies": {
        "fn.name": "1.x.x"
      }
    },
    "node_modules/parseurl": {
      "version": "1.3.3",
      "resolved": "https://registry.npmjs.org/parseurl/-/parseurl-1.3.3.tgz",
      "integrity": "sha512-CiyeOxFT/JZyN5m0z9PfXw4SCBJ6Sygz1Dpl0wqjlhDEGGBP1GnsUVEL0p63hoG1fcj3fHynXi9NYO4nWOL+qQ==",
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/path-to-regexp": {
      "version": "0.1.12",
      "resolved": "https://registry.npmjs.org/path-to-regexp/-/path-to-regexp-0.1.12.tgz",
      "integrity": "sha512-RA1GjUVMnvYFxuqovrEqZoxxW5NUZqbwKtYz/Tt7nXerk0LbLblQmrsgdeOxV5SFHf0UDggjS/bSeOZwt1pmEQ=="
    },
    "node_modules/picomatch": {
      "version": "2.3.1",
      "resolved": "https://registry.npmjs.org/picomatch/-/picomatch-2.3.1.tgz",
      "integrity": "sha512-JU3teHTNjmE2VCGFzuY8EXzCDVwEqB2a8fsIvwaStHhAWJEeVd1o1QD80CU6+ZdEXXSLbSsuLwJjkCBWqRQUVA==",
      "dev": true,
      "engines": {
        "node": ">=8.6"
      },
      "funding": {
        "url": "https://github.com/sponsors/jonschlinkert"
      }
    },
    "node_modules/precond": {
      "version": "0.2.3",
      "resolved": "https://registry.npmjs.org/precond/-/precond-0.2.3.tgz",
      "integrity": "sha512-QCYG84SgGyGzqJ/vlMsxeXd/pgL/I94ixdNFyh1PusWmTCyVfPJjZ1K1jvHtsbfnXQs2TSkEP2fR7QiMZAnKFQ==",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/process-warning": {
      "version": "2.3.2",
      "resolved": "https://registry.npmjs.org/process-warning/-/process-warning-2.3.2.tgz",
      "integrity": "sha512-n9wh8tvBe5sFmsqlg+XQhaQLumwpqoAUruLwjCopgTmUBjJ/fjtBsJzKleCaIGBOMXYEhp1YfKl4d7rJ5ZKJGA=="
    },
    "node_modules/proxy-addr": {
      "version": "2.0.7",
      "resolved": "https://registry.npmjs.org/proxy-addr/-/proxy-addr-2.0.7.tgz",
      "integrity": "sha512-llQsMLSUDUPT44jdrU/O37qlnifitDP+ZwrmmZcoSKyLKvtZxpyV0n2/bD/N4tBAAZ/gJEdZU7KMraoK1+XYAg==",
      "dependencies": {
        "forwarded": "0.2.0",
        "ipaddr.js": "1.9.1"
      },
      "engines": {
        "node": ">= 0.10"
      }
    },
    "node_modules/proxy-from-env": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/proxy-from-env/-/proxy-from-env-1.1.0.tgz",
      "integrity": "sha512-D+zkORCbA9f1tdWRK0RaCR3GPv50cMxcrz4X8k5LTSUD1Dkw47mKJEZQNunItRTkWwgtaUSo1RVFRIG9ZXiFYg=="
    },
    "node_modules/pstree.remy": {
      "version": "1.1.8",
      "resolved": "https://registry.npmjs.org/pstree.remy/-/pstree.remy-1.1.8.tgz",
      "integrity": "sha512-77DZwxQmxKnu3aR542U+X8FypNzbfJ+C5XQDk3uWjWxn6151aIMGthWYRXTqT1E5oJvg+ljaa2OJi+VfvCOQ8w==",
      "dev": true
    },
    "node_modules/punycode": {
      "version": "2.3.1",
      "resolved": "https://registry.npmjs.org/punycode/-/punycode-2.3.1.tgz",
      "integrity": "sha512-vYt7UD1U9Wg6138shLtLOvdAu+8DsC/ilFtEVHcH+wydcSpNE20AfSOduf6MkRFahL5FY7X1oU7nKVZFtfq8Fg==",
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/qs": {
      "version": "6.13.0",
      "resolved": "https://registry.npmjs.org/qs/-/qs-6.13.0.tgz",
      "integrity": "sha512-+38qI9SOr8tfZ4QmJNplMUxqjbe7LKvvZgWdExBOmd+egZTtjLB67Gu0HRX3u/XOq7UU2Nx6nsjvS16Z9uwfpg==",
      "dependencies": {
        "side-channel": "^1.0.6"
      },
      "engines": {
        "node": ">=0.6"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/range-parser": {
      "version": "1.2.1",
      "resolved": "https://registry.npmjs.org/range-parser/-/range-parser-1.2.1.tgz",
      "integrity": "sha512-Hrgsx+orqoygnmhFbKaHE6c296J+HTAQXoxEF6gNupROmmGJRoyzfG3ccAveqCBrwr/2yxQ5BVd/GTl5agOwSg==",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/raw-body": {
      "version": "2.5.2",
      "resolved": "https://registry.npmjs.org/raw-body/-/raw-body-2.5.2.tgz",
      "integrity": "sha512-8zGqypfENjCIqGhgXToC8aB2r7YrBX+AQAfIPs/Mlk+BtPTztOvTS01NRW/3Eh60J+a48lt8qsCzirQ6loCVfA==",
      "dependencies": {
        "bytes": "3.1.2",
        "http-errors": "2.0.0",
        "iconv-lite": "0.4.24",
        "unpipe": "1.0.0"
      },
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/readable-stream": {
      "version": "3.6.2",
      "resolved": "https://registry.npmjs.org/readable-stream/-/readable-stream-3.6.2.tgz",
      "integrity": "sha512-9u/sniCrY3D5WdsERHzHE4G2YCXqoG5FTHUiCC4SIbr6XcLZBY05ya9EKjYek9O5xOAwjGq+1JdGBAS7Q9ScoA==",
      "dependencies": {
        "inherits": "^2.0.3",
        "string_decoder": "^1.1.1",
        "util-deprecate": "^1.0.1"
      },
      "engines": {
        "node": ">= 6"
      }
    },
    "node_modules/readdirp": {
      "version": "3.6.0",
      "resolved": "https://registry.npmjs.org/readdirp/-/readdirp-3.6.0.tgz",
      "integrity": "sha512-hOS089on8RduqdbhvQ5Z37A0ESjsqz6qnRcffsMU3495FuTdqSm+7bhJ29JvIOsBDEEnan5DPu9t3To9VRlMzA==",
      "dev": true,
      "dependencies": {
        "picomatch": "^2.2.1"
      },
      "engines": {
        "node": ">=8.10.0"
      }
    },
    "node_modules/safe-buffer": {
      "version": "5.2.1",
      "resolved": "https://registry.npmjs.org/safe-buffer/-/safe-buffer-5.2.1.tgz",
      "integrity": "sha512-rp3So07KcdmmKbGvgaNxQSJr7bGVSVk5S9Eq1F+ppbRo70+YeaDxkw5Dd8NPN+GD6bjnYm2VuPuCXmpuYvmCXQ==",
      "funding": [
        {
          "type": "github",
          "url": "https://github.com/sponsors/feross"
        },
        {
          "type": "patreon",
          "url": "https://www.patreon.com/feross"
        },
        {
          "type": "consulting",
          "url": "https://feross.org/support"
        }
      ]
    },
    "node_modules/safe-stable-stringify": {
      "version": "2.5.0",
      "resolved": "https://registry.npmjs.org/safe-stable-stringify/-/safe-stable-stringify-2.5.0.tgz",
      "integrity": "sha512-b3rppTKm9T+PsVCBEOUR46GWI7fdOs00VKZ1+9c1EWDaDMvjQc6tUwuFyIprgGgTcWoVHSKrU8H31ZHA2e0RHA==",
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/safer-buffer": {
      "version": "2.1.2",
      "resolved": "https://registry.npmjs.org/safer-buffer/-/safer-buffer-2.1.2.tgz",
      "integrity": "sha512-YZo3K82SD7Riyi0E1EQPojLz7kpepnSQI9IyPbHHg1XXXevb5dJI7tpyN2ADxGcQbHG7vcyRHk0cbwqcQriUtg=="
    },
    "node_modules/semver": {
      "version": "7.7.1",
      "resolved": "https://registry.npmjs.org/semver/-/semver-7.7.1.tgz",
      "integrity": "sha512-hlq8tAfn0m/61p4BVRcPzIGr6LKiMwo4VM6dGi6pt4qcRkmNzTcWq6eCEjEh+qXjkMDvPlOFFSGwQjoEa6gyMA==",
      "bin": {
        "semver": "bin/semver.js"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/send": {
      "version": "0.19.0",
      "resolved": "https://registry.npmjs.org/send/-/send-0.19.0.tgz",
      "integrity": "sha512-dW41u5VfLXu8SJh5bwRmyYUbAoSB3c9uQh6L8h/KtsFREPWpbX1lrljJo186Jc4nmci/sGUZ9a0a0J2zgfq2hw==",
      "dependencies": {
        "debug": "2.6.9",
        "depd": "2.0.0",
        "destroy": "1.2.0",
        "encodeurl": "~1.0.2",
        "escape-html": "~1.0.3",
        "etag": "~1.8.1",
        "fresh": "0.5.2",
        "http-errors": "2.0.0",
        "mime": "1.6.0",
        "ms": "2.1.3",
        "on-finished": "2.4.1",
        "range-parser": "~1.2.1",
        "statuses": "2.0.1"
      },
      "engines": {
        "node": ">= 0.8.0"
      }
    },
    "node_modules/send/node_modules/encodeurl": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/encodeurl/-/encodeurl-1.0.2.tgz",
      "integrity": "sha512-TPJXq8JqFaVYm2CWmPvnP2Iyo4ZSM7/QKcSmuMLDObfpH5fi7RUGmd/rTDf+rut/saiDiQEeVTNgAmJEdAOx0w==",
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/send/node_modules/ms": {
      "version": "2.1.3",
      "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.3.tgz",
      "integrity": "sha512-6FlzubTLZG3J2a/NVCAleEhjzq5oxgHyaCU9yYXvcLsvoVaHJq/s5xXI6/XXP6tz7R9xAOtHnSO/tXtF3WRTlA=="
    },
    "node_modules/serve-static": {
      "version": "1.16.2",
      "resolved": "https://registry.npmjs.org/serve-static/-/serve-static-1.16.2.tgz",
      "integrity": "sha512-VqpjJZKadQB/PEbEwvFdO43Ax5dFBZ2UECszz8bQ7pi7wt//PWe1P6MN7eCnjsatYtBT6EuiClbjSWP2WrIoTw==",
      "dependencies": {
        "encodeurl": "~2.0.0",
        "escape-html": "~1.0.3",
        "parseurl": "~1.3.3",
        "send": "0.19.0"
      },
      "engines": {
        "node": ">= 0.8.0"
      }
    },
    "node_modules/setprototypeof": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/setprototypeof/-/setprototypeof-1.2.0.tgz",
      "integrity": "sha512-E5LDX7Wrp85Kil5bhZv46j8jOeboKq5JMmYM3gVGdGH8xFpPWXUMsNrlODCrkoxMEeNi/XZIwuRvY4XNwYMJpw=="
    },
    "node_modules/side-channel": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/side-channel/-/side-channel-1.1.0.tgz",
      "integrity": "sha512-ZX99e6tRweoUXqR+VBrslhda51Nh5MTQwou5tnUDgbtyM0dBgmhEDtWGP/xbKn6hqfPRHujUNwz5fy/wbbhnpw==",
      "dependencies": {
        "es-errors": "^1.3.0",
        "object-inspect": "^1.13.3",
        "side-channel-list": "^1.0.0",
        "side-channel-map": "^1.0.1",
        "side-channel-weakmap": "^1.0.2"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/side-channel-list": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/side-channel-list/-/side-channel-list-1.0.0.tgz",
      "integrity": "sha512-FCLHtRD/gnpCiCHEiJLOwdmFP+wzCmDEkc9y7NsYxeF4u7Btsn1ZuwgwJGxImImHicJArLP4R0yX4c2KCrMrTA==",
      "dependencies": {
        "es-errors": "^1.3.0",
        "object-inspect": "^1.13.3"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/side-channel-map": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/side-channel-map/-/side-channel-map-1.0.1.tgz",
      "integrity": "sha512-VCjCNfgMsby3tTdo02nbjtM/ewra6jPHmpThenkTYh8pG9ucZ/1P8So4u4FGBek/BjpOVsDCMoLA/iuBKIFXRA==",
      "dependencies": {
        "call-bound": "^1.0.2",
        "es-errors": "^1.3.0",
        "get-intrinsic": "^1.2.5",
        "object-inspect": "^1.13.3"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/side-channel-weakmap": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/side-channel-weakmap/-/side-channel-weakmap-1.0.2.tgz",
      "integrity": "sha512-WPS/HvHQTYnHisLo9McqBHOJk2FkHO/tlpvldyrnem4aeQp4hai3gythswg6p01oSoTl58rcpiFAjF2br2Ak2A==",
      "dependencies": {
        "call-bound": "^1.0.2",
        "es-errors": "^1.3.0",
        "get-intrinsic": "^1.2.5",
        "object-inspect": "^1.13.3",
        "side-channel-map": "^1.0.1"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/simple-swizzle": {
      "version": "0.2.2",
      "resolved": "https://registry.npmjs.org/simple-swizzle/-/simple-swizzle-0.2.2.tgz",
      "integrity": "sha512-JA//kQgZtbuY83m+xT+tXJkmJncGMTFT+C+g2h2R9uxkYIrE2yy9sgmcLhCnw57/WSD+Eh3J97FPEDFnbXnDUg==",
      "dependencies": {
        "is-arrayish": "^0.3.1"
      }
    },
    "node_modules/simple-update-notifier": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/simple-update-notifier/-/simple-update-notifier-2.0.0.tgz",
      "integrity": "sha512-a2B9Y0KlNXl9u/vsW6sTIu9vGEpfKu2wRV6l1H3XEas/0gUIzGzBoP/IouTcUQbm9JWZLH3COxyn03TYlFax6w==",
      "dev": true,
      "dependencies": {
        "semver": "^7.5.3"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/sparse-bitfield": {
      "version": "3.0.3",
      "resolved": "https://registry.npmjs.org/sparse-bitfield/-/sparse-bitfield-3.0.3.tgz",
      "integrity": "sha512-kvzhi7vqKTfkh0PZU+2D2PIllw2ymqJKujUcyPMd9Y75Nv4nPbGJZXNhxsgdQab2BmlDct1YnfQCguEvHr7VsQ==",
      "dependencies": {
        "memory-pager": "^1.0.2"
      }
    },
    "node_modules/sprintf-js": {
      "version": "1.1.3",
      "resolved": "https://registry.npmjs.org/sprintf-js/-/sprintf-js-1.1.3.tgz",
      "integrity": "sha512-Oo+0REFV59/rz3gfJNKQiBlwfHaSESl1pcGyABQsnnIfWOFt6JNj5gCog2U6MLZ//IGYD+nA8nI+mTShREReaA=="
    },
    "node_modules/stack-trace": {
      "version": "0.0.10",
      "resolved": "https://registry.npmjs.org/stack-trace/-/stack-trace-0.0.10.tgz",
      "integrity": "sha512-KGzahc7puUKkzyMt+IqAep+TVNbKP+k2Lmwhub39m1AsTSkaDutx56aDCo+HLDzf/D26BIHTJWNiTG1KAJiQCg==",
      "engines": {
        "node": "*"
      }
    },
    "node_modules/statuses": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/statuses/-/statuses-2.0.1.tgz",
      "integrity": "sha512-RwNA9Z/7PrK06rYLIzFMlaF+l73iwpzsqRIFgbMLbTcLD6cOao82TaWefPXQvB2fOC4AjuYSEndS7N/mTCbkdQ==",
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/string_decoder": {
      "version": "1.3.0",
      "resolved": "https://registry.npmjs.org/string_decoder/-/string_decoder-1.3.0.tgz",
      "integrity": "sha512-hkRX8U1WjJFd8LsDJ2yQ/wWWxaopEsABU1XfkM8A+j0+85JAGppt16cr1Whg6KIbb4okU6Mql6BOj+uup/wKeA==",
      "dependencies": {
        "safe-buffer": "~5.2.0"
      }
    },
    "node_modules/supports-color": {
      "version": "5.5.0",
      "resolved": "https://registry.npmjs.org/supports-color/-/supports-color-5.5.0.tgz",
      "integrity": "sha512-QjVjwdXIt408MIiAqCX4oUKsgU2EqAGzs2Ppkm4aQYbjm+ZEWEcW4SfFNTr4uMNZma0ey4f5lgLrkB0aX0QMow==",
      "dev": true,
      "dependencies": {
        "has-flag": "^3.0.0"
      },
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/text-hex": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/text-hex/-/text-hex-1.0.0.tgz",
      "integrity": "sha512-uuVGNWzgJ4yhRaNSiubPY7OjISw4sw4E5Uv0wbjp+OzcbmVU/rsT8ujgcXJhn9ypzsgr5vlzpPqP+MBBKcGvbg=="
    },
    "node_modules/to-regex-range": {
      "version": "5.0.1",
      "resolved": "https://registry.npmjs.org/to-regex-range/-/to-regex-range-5.0.1.tgz",
      "integrity": "sha512-65P7iz6X5yEr1cwcgvQxbbIw7Uk3gOy5dIdtZ4rDveLqhrdJP+Li/Hx6tyK0NEb+2GCyneCMJiGqrADCSNk8sQ==",
      "dev": true,
      "dependencies": {
        "is-number": "^7.0.0"
      },
      "engines": {
        "node": ">=8.0"
      }
    },
    "node_modules/toidentifier": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/toidentifier/-/toidentifier-1.0.1.tgz",
      "integrity": "sha512-o5sSPKEkg/DIQNmH43V0/uerLrpzVedkUh8tGNvaeXpfpuwjKenlSox/2O/BTlZUtEe+JG7s5YhEz608PlAHRA==",
      "engines": {
        "node": ">=0.6"
      }
    },
    "node_modules/touch": {
      "version": "3.1.1",
      "resolved": "https://registry.npmjs.org/touch/-/touch-3.1.1.tgz",
      "integrity": "sha512-r0eojU4bI8MnHr8c5bNo7lJDdI2qXlWWJk6a9EAFG7vbhTjElYhBVS3/miuE0uOuoLdb8Mc/rVfsmm6eo5o9GA==",
      "dev": true,
      "bin": {
        "nodetouch": "bin/nodetouch.js"
      }
    },
    "node_modules/tr46": {
      "version": "5.0.0",
      "resolved": "https://registry.npmjs.org/tr46/-/tr46-5.0.0.tgz",
      "integrity": "sha512-tk2G5R2KRwBd+ZN0zaEXpmzdKyOYksXwywulIX95MBODjSzMIuQnQ3m8JxgbhnL1LeVo7lqQKsYa1O3Htl7K5g==",
      "dependencies": {
        "punycode": "^2.3.1"
      },
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/triple-beam": {
      "version": "1.4.1",
      "resolved": "https://registry.npmjs.org/triple-beam/-/triple-beam-1.4.1.tgz",
      "integrity": "sha512-aZbgViZrg1QNcG+LULa7nhZpJTZSLm/mXnHXnbAbjmN5aSa0y7V+wvv6+4WaBtpISJzThKy+PIPxc1Nq1EJ9mg==",
      "engines": {
        "node": ">= 14.0.0"
      }
    },
    "node_modules/ts-node": {
      "version": "10.9.2",
      "resolved": "https://registry.npmjs.org/ts-node/-/ts-node-10.9.2.tgz",
      "integrity": "sha512-f0FFpIdcHgn8zcPSbf1dRevwt047YMnaiJM3u2w2RewrB+fob/zePZcrOyQoLMMO7aBIddLcQIEK5dYjkLnGrQ==",
      "dev": true,
      "dependencies": {
        "@cspotcode/source-map-support": "^0.8.0",
        "@tsconfig/node10": "^1.0.7",
        "@tsconfig/node12": "^1.0.7",
        "@tsconfig/node14": "^1.0.0",
        "@tsconfig/node16": "^1.0.2",
        "acorn": "^8.4.1",
        "acorn-walk": "^8.1.1",
        "arg": "^4.1.0",
        "create-require": "^1.1.0",
        "diff": "^4.0.1",
        "make-error": "^1.1.1",
        "v8-compile-cache-lib": "^3.0.1",
        "yn": "3.1.1"
      },
      "bin": {
        "ts-node": "dist/bin.js",
        "ts-node-cwd": "dist/bin-cwd.js",
        "ts-node-esm": "dist/bin-esm.js",
        "ts-node-script": "dist/bin-script.js",
        "ts-node-transpile-only": "dist/bin-transpile.js",
        "ts-script": "dist/bin-script-deprecated.js"
      },
      "peerDependencies": {
        "@swc/core": ">=1.2.50",
        "@swc/wasm": ">=1.2.50",
        "@types/node": "*",
        "typescript": ">=2.7"
      },
      "peerDependenciesMeta": {
        "@swc/core": {
          "optional": true
        },
        "@swc/wasm": {
          "optional": true
        }
      }
    },
    "node_modules/type-is": {
      "version": "1.6.18",
      "resolved": "https://registry.npmjs.org/type-is/-/type-is-1.6.18.tgz",
      "integrity": "sha512-TkRKr9sUTxEH8MdfuCSP7VizJyzRNMjj2J2do2Jr3Kym598JVdEksuzPQCnlFPW4ky9Q+iA+ma9BGm06XQBy8g==",
      "dependencies": {
        "media-typer": "0.3.0",
        "mime-types": "~2.1.24"
      },
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/typescript": {
      "version": "5.7.3",
      "resolved": "https://registry.npmjs.org/typescript/-/typescript-5.7.3.tgz",
      "integrity": "sha512-84MVSjMEHP+FQRPy3pX9sTVV/INIex71s9TL2Gm5FG/WG1SqXeKyZ0k7/blY/4FdOzI12CBy1vGc4og/eus0fw==",
      "dev": true,
      "bin": {
        "tsc": "bin/tsc",
        "tsserver": "bin/tsserver"
      },
      "engines": {
        "node": ">=14.17"
      }
    },
    "node_modules/undefsafe": {
      "version": "2.0.5",
      "resolved": "https://registry.npmjs.org/undefsafe/-/undefsafe-2.0.5.tgz",
      "integrity": "sha512-WxONCrssBM8TSPRqN5EmsjVrsv4A8X12J4ArBiiayv3DyyG3ZlIg6yysuuSYdZsVz3TKcTg2fd//Ujd4CHV1iA==",
      "dev": true
    },
    "node_modules/undici-types": {
      "version": "6.20.0",
      "resolved": "https://registry.npmjs.org/undici-types/-/undici-types-6.20.0.tgz",
      "integrity": "sha512-Ny6QZ2Nju20vw1SRHe3d9jVu6gJ+4e3+MMpqu7pqE5HT6WsTSlce++GQmK5UXS8mzV8DSYHrQH+Xrf2jVcuKNg=="
    },
    "node_modules/unpipe": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/unpipe/-/unpipe-1.0.0.tgz",
      "integrity": "sha512-pjy2bYhSsufwWlKwPc+l3cN7+wuJlK6uz0YdJEOlQDbl6jo/YlPi4mb8agUkVC8BF7V8NuzeyPNqRksA3hztKQ==",
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/util-deprecate": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/util-deprecate/-/util-deprecate-1.0.2.tgz",
      "integrity": "sha512-EPD5q1uXyFxJpCrLnCc1nHnq3gOa6DZBocAIiI2TaSCA7VCJ1UJDMagCzIkXNsUYfD1daK//LTEQ8xiIbrHtcw=="
    },
    "node_modules/utils-merge": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/utils-merge/-/utils-merge-1.0.1.tgz",
      "integrity": "sha512-pMZTvIkT1d+TFGvDOqodOclx0QWkkgi6Tdoa8gC8ffGAAqz9pzPTZWAybbsHHoED/ztMtkv/VoYTYyShUn81hA==",
      "engines": {
        "node": ">= 0.4.0"
      }
    },
    "node_modules/v8-compile-cache-lib": {
      "version": "3.0.1",
      "resolved": "https://registry.npmjs.org/v8-compile-cache-lib/-/v8-compile-cache-lib-3.0.1.tgz",
      "integrity": "sha512-wa7YjyUGfNZngI/vtK0UHAN+lgDCxBPCylVXGp0zu59Fz5aiGtNXaq3DhIov063MorB+VfufLh3JlF2KdTK3xg==",
      "dev": true
    },
    "node_modules/vary": {
      "version": "1.1.2",
      "resolved": "https://registry.npmjs.org/vary/-/vary-1.1.2.tgz",
      "integrity": "sha512-BNGbWLfd0eUPabhkXUVm0j8uuvREyTh5ovRa/dyow/BqAbZJyC+5fU+IzQOzmAKzYqYRAISoRhdQr3eIZ/PXqg==",
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/vasync": {
      "version": "2.2.1",
      "resolved": "https://registry.npmjs.org/vasync/-/vasync-2.2.1.tgz",
      "integrity": "sha512-Hq72JaTpcTFdWiNA4Y22Amej2GH3BFmBaKPPlDZ4/oC8HNn2ISHLkFrJU4Ds8R3jcUi7oo5Y9jcMHKjES+N9wQ==",
      "engines": [
        "node >=0.6.0"
      ],
      "dependencies": {
        "verror": "1.10.0"
      }
    },
    "node_modules/vasync/node_modules/verror": {
      "version": "1.10.0",
      "resolved": "https://registry.npmjs.org/verror/-/verror-1.10.0.tgz",
      "integrity": "sha512-ZZKSmDAEFOijERBLkmYfJ+vmk3w+7hOLYDNkRCuRuMJGEmqYNCNLyBBFwWKVMhfwaEF3WOd0Zlw86U/WC/+nYw==",
      "engines": [
        "node >=0.6.0"
      ],
      "dependencies": {
        "assert-plus": "^1.0.0",
        "core-util-is": "1.0.2",
        "extsprintf": "^1.2.0"
      }
    },
    "node_modules/verror": {
      "version": "1.10.1",
      "resolved": "https://registry.npmjs.org/verror/-/verror-1.10.1.tgz",
      "integrity": "sha512-veufcmxri4e3XSrT0xwfUR7kguIkaxBeosDg00yDWhk49wdwkSUrvvsm7nc75e1PUyvIeZj6nS8VQRYz2/S4Xg==",
      "dependencies": {
        "assert-plus": "^1.0.0",
        "core-util-is": "1.0.2",
        "extsprintf": "^1.2.0"
      },
      "engines": {
        "node": ">=0.6.0"
      }
    },
    "node_modules/webidl-conversions": {
      "version": "7.0.0",
      "resolved": "https://registry.npmjs.org/webidl-conversions/-/webidl-conversions-7.0.0.tgz",
      "integrity": "sha512-VwddBukDzu71offAQR975unBIGqfKZpM+8ZX6ySk8nYhVoo5CYaZyzt3YBvYtRtO+aoGlqxPg/B87NGVZ/fu6g==",
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/whatwg-url": {
      "version": "14.1.0",
      "resolved": "https://registry.npmjs.org/whatwg-url/-/whatwg-url-14.1.0.tgz",
      "integrity": "sha512-jlf/foYIKywAt3x/XWKZ/3rz8OSJPiWktjmk891alJUEjiVxKX9LEO92qH3hv4aJ0mN3MWPvGMCy8jQi95xK4w==",
      "dependencies": {
        "tr46": "^5.0.0",
        "webidl-conversions": "^7.0.0"
      },
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/winston": {
      "version": "3.17.0",
      "resolved": "https://registry.npmjs.org/winston/-/winston-3.17.0.tgz",
      "integrity": "sha512-DLiFIXYC5fMPxaRg832S6F5mJYvePtmO5G9v9IgUFPhXm9/GkXarH/TUrBAVzhTCzAj9anE/+GjrgXp/54nOgw==",
      "dependencies": {
        "@colors/colors": "^1.6.0",
        "@dabh/diagnostics": "^2.0.2",
        "async": "^3.2.3",
        "is-stream": "^2.0.0",
        "logform": "^2.7.0",
        "one-time": "^1.0.0",
        "readable-stream": "^3.4.0",
        "safe-stable-stringify": "^2.3.1",
        "stack-trace": "0.0.x",
        "triple-beam": "^1.3.0",
        "winston-transport": "^4.9.0"
      },
      "engines": {
        "node": ">= 12.0.0"
      }
    },
    "node_modules/winston-transport": {
      "version": "4.9.0",
      "resolved": "https://registry.npmjs.org/winston-transport/-/winston-transport-4.9.0.tgz",
      "integrity": "sha512-8drMJ4rkgaPo1Me4zD/3WLfI/zPdA9o2IipKODunnGDcuqbHwjsbB79ylv04LCGGzU0xQ6vTznOMpQGaLhhm6A==",
      "dependencies": {
        "logform": "^2.7.0",
        "readable-stream": "^3.6.2",
        "triple-beam": "^1.3.0"
      },
      "engines": {
        "node": ">= 12.0.0"
      }
    },
    "node_modules/wrappy": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/wrappy/-/wrappy-1.0.2.tgz",
      "integrity": "sha512-l4Sp/DRseor9wL6EvV2+TuQn63dMkPjZ/sp9XkghTEbV9KlPS1xUsZ3u7/IQO4wxtcFB4bgpQPRcR3QCvezPcQ=="
    },
    "node_modules/yaml": {
      "version": "1.10.2",
      "resolved": "https://registry.npmjs.org/yaml/-/yaml-1.10.2.tgz",
      "integrity": "sha512-r3vXyErRCYJ7wg28yvBY5VSoAF8ZvlcW9/BwUzEtUsjvX/DKs24dIkuwjtuprwJJHsbyUbLApepYTR1BN4uHrg==",
      "engines": {
        "node": ">= 6"
      }
    },
    "node_modules/yn": {
      "version": "3.1.1",
      "resolved": "https://registry.npmjs.org/yn/-/yn-3.1.1.tgz",
      "integrity": "sha512-Ux4ygGWsu2c7isFWe8Yu1YluJmqVhxqK2cLXNQA5AcC3QfbGNpM7fu0Y8b/z16pXLnFxZYvWhd3fhBY9DLmC6Q==",
      "dev": true,
      "engines": {
        "node": ">=6"
      }
    }
  },
  "dependencies": {
    "@colors/colors": {
      "version": "1.6.0",
      "resolved": "https://registry.npmjs.org/@colors/colors/-/colors-1.6.0.tgz",
      "integrity": "sha512-Ir+AOibqzrIsL6ajt3Rz3LskB7OiMVHqltZmspbW/TJuTVuyOMirVqAkjfY6JISiLHgyNqicAC8AyHHGzNd/dA=="
    },
    "@cspotcode/source-map-support": {
      "version": "0.8.1",
      "resolved": "https://registry.npmjs.org/@cspotcode/source-map-support/-/source-map-support-0.8.1.tgz",
      "integrity": "sha512-IchNf6dN4tHoMFIn/7OE8LWZ19Y6q/67Bmf6vnGREv8RSbBVb9LPJxEcnwrcwX6ixSvaiGoomAUvu4YSxXrVgw==",
      "dev": true,
      "requires": {
        "@jridgewell/trace-mapping": "0.3.9"
      }
    },
    "@dabh/diagnostics": {
      "version": "2.0.3",
      "resolved": "https://registry.npmjs.org/@dabh/diagnostics/-/diagnostics-2.0.3.tgz",
      "integrity": "sha512-hrlQOIi7hAfzsMqlGSFyVucrx38O+j6wiGOf//H2ecvIEqYN4ADBSS2iLMh5UFyDunCNniUIPk/q3riFv45xRA==",
      "requires": {
        "colorspace": "1.1.x",
        "enabled": "2.0.x",
        "kuler": "^2.0.0"
      }
    },
    "@jridgewell/resolve-uri": {
      "version": "3.1.2",
      "resolved": "https://registry.npmjs.org/@jridgewell/resolve-uri/-/resolve-uri-3.1.2.tgz",
      "integrity": "sha512-bRISgCIjP20/tbWSPWMEi54QVPRZExkuD9lJL+UIxUKtwVJA8wW1Trb1jMs1RFXo1CBTNZ/5hpC9QvmKWdopKw==",
      "dev": true
    },
    "@jridgewell/sourcemap-codec": {
      "version": "1.5.0",
      "resolved": "https://registry.npmjs.org/@jridgewell/sourcemap-codec/-/sourcemap-codec-1.5.0.tgz",
      "integrity": "sha512-gv3ZRaISU3fjPAgNsriBRqGWQL6quFx04YMPW/zD8XMLsU32mhCCbfbO6KZFLjvYpCZ8zyDEgqsgf+PwPaM7GQ==",
      "dev": true
    },
    "@jridgewell/trace-mapping": {
      "version": "0.3.9",
      "resolved": "https://registry.npmjs.org/@jridgewell/trace-mapping/-/trace-mapping-0.3.9.tgz",
      "integrity": "sha512-3Belt6tdc8bPgAtbcmdtNJlirVoTmEb5e2gC94PnkwEW9jI6CAHUeoG85tjWP5WquqfavoMtMwiG4P926ZKKuQ==",
      "dev": true,
      "requires": {
        "@jridgewell/resolve-uri": "^3.0.3",
        "@jridgewell/sourcemap-codec": "^1.4.10"
      }
    },
    "@ldapjs/asn1": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/@ldapjs/asn1/-/asn1-2.0.0.tgz",
      "integrity": "sha512-G9+DkEOirNgdPmD0I8nu57ygQJKOOgFEMKknEuQvIHbGLwP3ny1mY+OTUYLCbCaGJP4sox5eYgBJRuSUpnAddA=="
    },
    "@ldapjs/attribute": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/@ldapjs/attribute/-/attribute-1.0.0.tgz",
      "integrity": "sha512-ptMl2d/5xJ0q+RgmnqOi3Zgwk/TMJYG7dYMC0Keko+yZU6n+oFM59MjQOUht5pxJeS4FWrImhu/LebX24vJNRQ==",
      "requires": {
        "@ldapjs/asn1": "2.0.0",
        "@ldapjs/protocol": "^1.2.1",
        "process-warning": "^2.1.0"
      }
    },
    "@ldapjs/change": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/@ldapjs/change/-/change-1.0.0.tgz",
      "integrity": "sha512-EOQNFH1RIku3M1s0OAJOzGfAohuFYXFY4s73wOhRm4KFGhmQQ7MChOh2YtYu9Kwgvuq1B0xKciXVzHCGkB5V+Q==",
      "requires": {
        "@ldapjs/asn1": "2.0.0",
        "@ldapjs/attribute": "1.0.0"
      }
    },
    "@ldapjs/controls": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/@ldapjs/controls/-/controls-2.1.0.tgz",
      "integrity": "sha512-2pFdD1yRC9V9hXfAWvCCO2RRWK9OdIEcJIos/9cCVP9O4k72BY1bLDQQ4KpUoJnl4y/JoD4iFgM+YWT3IfITWw==",
      "requires": {
        "@ldapjs/asn1": "^1.2.0",
        "@ldapjs/protocol": "^1.2.1"
      },
      "dependencies": {
        "@ldapjs/asn1": {
          "version": "1.2.0",
          "resolved": "https://registry.npmjs.org/@ldapjs/asn1/-/asn1-1.2.0.tgz",
          "integrity": "sha512-KX/qQJ2xxzvO2/WOvr1UdQ+8P5dVvuOLk/C9b1bIkXxZss8BaR28njXdPgFCpj5aHaf1t8PmuVnea+N9YG9YMw=="
        }
      }
    },
    "@ldapjs/dn": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/@ldapjs/dn/-/dn-1.1.0.tgz",
      "integrity": "sha512-R72zH5ZeBj/Fujf/yBu78YzpJjJXG46YHFo5E4W1EqfNpo1UsVPqdLrRMXeKIsJT3x9dJVIfR6OpzgINlKpi0A==",
      "requires": {
        "@ldapjs/asn1": "2.0.0",
        "process-warning": "^2.1.0"
      }
    },
    "@ldapjs/filter": {
      "version": "2.1.1",
      "resolved": "https://registry.npmjs.org/@ldapjs/filter/-/filter-2.1.1.tgz",
      "integrity": "sha512-TwPK5eEgNdUO1ABPBUQabcZ+h9heDORE4V9WNZqCtYLKc06+6+UAJ3IAbr0L0bYTnkkWC/JEQD2F+zAFsuikNw==",
      "requires": {
        "@ldapjs/asn1": "2.0.0",
        "@ldapjs/protocol": "^1.2.1",
        "process-warning": "^2.1.0"
      }
    },
    "@ldapjs/messages": {
      "version": "1.3.0",
      "resolved": "https://registry.npmjs.org/@ldapjs/messages/-/messages-1.3.0.tgz",
      "integrity": "sha512-K7xZpXJ21bj92jS35wtRbdcNrwmxAtPwy4myeh9duy/eR3xQKvikVycbdWVzkYEAVE5Ce520VXNOwCHjomjCZw==",
      "requires": {
        "@ldapjs/asn1": "^2.0.0",
        "@ldapjs/attribute": "^1.0.0",
        "@ldapjs/change": "^1.0.0",
        "@ldapjs/controls": "^2.1.0",
        "@ldapjs/dn": "^1.1.0",
        "@ldapjs/filter": "^2.1.1",
        "@ldapjs/protocol": "^1.2.1",
        "process-warning": "^2.2.0"
      }
    },
    "@ldapjs/protocol": {
      "version": "1.2.1",
      "resolved": "https://registry.npmjs.org/@ldapjs/protocol/-/protocol-1.2.1.tgz",
      "integrity": "sha512-O89xFDLW2gBoZWNXuXpBSM32/KealKCTb3JGtJdtUQc7RjAk8XzrRgyz02cPAwGKwKPxy0ivuC7UP9bmN87egQ=="
    },
    "@mongodb-js/saslprep": {
      "version": "1.1.9",
      "resolved": "https://registry.npmjs.org/@mongodb-js/saslprep/-/saslprep-1.1.9.tgz",
      "integrity": "sha512-tVkljjeEaAhCqTzajSdgbQ6gE6f3oneVwa3iXR6csiEwXXOFsiC6Uh9iAjAhXPtqa/XMDHWjjeNH/77m/Yq2dw==",
      "requires": {
        "sparse-bitfield": "^3.0.3"
      }
    },
    "@open-policy-agent/opa-wasm": {
      "version": "1.10.0",
      "resolved": "https://registry.npmjs.org/@open-policy-agent/opa-wasm/-/opa-wasm-1.10.0.tgz",
      "integrity": "sha512-ymR/nFS3nO9o24j9xowGGQaf+Gmb813QcxUpVZkfRlJkawKWqSIllnEH15agyWjijmOIyhA+OBErenx6N3jphw==",
      "requires": {
        "sprintf-js": "^1.1.2",
        "yaml": "^1.10.2"
      }
    },
    "@tsconfig/node10": {
      "version": "1.0.11",
      "resolved": "https://registry.npmjs.org/@tsconfig/node10/-/node10-1.0.11.tgz",
      "integrity": "sha512-DcRjDCujK/kCk/cUe8Xz8ZSpm8mS3mNNpta+jGCA6USEDfktlNvm1+IuZ9eTcDbNk41BHwpHHeW+N1lKCz4zOw==",
      "dev": true
    },
    "@tsconfig/node12": {
      "version": "1.0.11",
      "resolved": "https://registry.npmjs.org/@tsconfig/node12/-/node12-1.0.11.tgz",
      "integrity": "sha512-cqefuRsh12pWyGsIoBKJA9luFu3mRxCA+ORZvA4ktLSzIuCUtWVxGIuXigEwO5/ywWFMZ2QEGKWvkZG1zDMTag==",
      "dev": true
    },
    "@tsconfig/node14": {
      "version": "1.0.3",
      "resolved": "https://registry.npmjs.org/@tsconfig/node14/-/node14-1.0.3.tgz",
      "integrity": "sha512-ysT8mhdixWK6Hw3i1V2AeRqZ5WfXg1G43mqoYlM2nc6388Fq5jcXyr5mRsqViLx/GJYdoL0bfXD8nmF+Zn/Iow==",
      "dev": true
    },
    "@tsconfig/node16": {
      "version": "1.0.4",
      "resolved": "https://registry.npmjs.org/@tsconfig/node16/-/node16-1.0.4.tgz",
      "integrity": "sha512-vxhUy4J8lyeyinH7Azl1pdd43GJhZH/tP2weN8TntQblOY+A0XbT8DJk1/oCPuOOyg/Ja757rG0CgHcWC8OfMA==",
      "dev": true
    },
    "@types/body-parser": {
      "version": "1.19.5",
      "resolved": "https://registry.npmjs.org/@types/body-parser/-/body-parser-1.19.5.tgz",
      "integrity": "sha512-fB3Zu92ucau0iQ0JMCFQE7b/dv8Ot07NI3KaZIkIUNXq82k4eBAqUaneXfleGY9JWskeS9y+u0nXMyspcuQrCg==",
      "dev": true,
      "requires": {
        "@types/connect": "*",
        "@types/node": "*"
      }
    },
    "@types/connect": {
      "version": "3.4.38",
      "resolved": "https://registry.npmjs.org/@types/connect/-/connect-3.4.38.tgz",
      "integrity": "sha512-K6uROf1LD88uDQqJCktA4yzL1YYAK6NgfsI0v/mTgyPKWsX1CnJ0XPSDhViejru1GcRkLWb8RlzFYJRqGUbaug==",
      "dev": true,
      "requires": {
        "@types/node": "*"
      }
    },
    "@types/express": {
      "version": "5.0.0",
      "resolved": "https://registry.npmjs.org/@types/express/-/express-5.0.0.tgz",
      "integrity": "sha512-DvZriSMehGHL1ZNLzi6MidnsDhUZM/x2pRdDIKdwbUNqqwHxMlRdkxtn6/EPKyqKpHqTl/4nRZsRNLpZxZRpPQ==",
      "dev": true,
      "requires": {
        "@types/body-parser": "*",
        "@types/express-serve-static-core": "^5.0.0",
        "@types/qs": "*",
        "@types/serve-static": "*"
      }
    },
    "@types/express-serve-static-core": {
      "version": "5.0.6",
      "resolved": "https://registry.npmjs.org/@types/express-serve-static-core/-/express-serve-static-core-5.0.6.tgz",
      "integrity": "sha512-3xhRnjJPkULekpSzgtoNYYcTWgEZkp4myc+Saevii5JPnHNvHMRlBSHDbs7Bh1iPPoVTERHEZXyhyLbMEsExsA==",
      "dev": true,
      "requires": {
        "@types/node": "*",
        "@types/qs": "*",
        "@types/range-parser": "*",
        "@types/send": "*"
      }
    },
    "@types/http-errors": {
      "version": "2.0.4",
      "resolved": "https://registry.npmjs.org/@types/http-errors/-/http-errors-2.0.4.tgz",
      "integrity": "sha512-D0CFMMtydbJAegzOyHjtiKPLlvnm3iTZyZRSZoLq2mRhDdmLfIWOCYPfQJ4cu2erKghU++QvjcUjp/5h7hESpA==",
      "dev": true
    },
    "@types/jsonwebtoken": {
      "version": "9.0.8",
      "resolved": "https://registry.npmjs.org/@types/jsonwebtoken/-/jsonwebtoken-9.0.8.tgz",
      "integrity": "sha512-7fx54m60nLFUVYlxAB1xpe9CBWX2vSrk50Y6ogRJ1v5xxtba7qXTg5BgYDN5dq+yuQQ9HaVlHJyAAt1/mxryFg==",
      "requires": {
        "@types/ms": "*",
        "@types/node": "*"
      }
    },
    "@types/mime": {
      "version": "1.3.5",
      "resolved": "https://registry.npmjs.org/@types/mime/-/mime-1.3.5.tgz",
      "integrity": "sha512-/pyBZWSLD2n0dcHE3hq8s8ZvcETHtEuF+3E7XVt0Ig2nvsVQXdghHVcEkIWjy9A0wKfTn97a/PSDYohKIlnP/w==",
      "dev": true
    },
    "@types/ms": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/@types/ms/-/ms-2.1.0.tgz",
      "integrity": "sha512-GsCCIZDE/p3i96vtEqx+7dBUGXrc7zeSK3wwPHIaRThS+9OhWIXRqzs4d6k1SVU8g91DrNRWxWUGhp5KXQb2VA=="
    },
    "@types/node": {
      "version": "22.13.1",
      "resolved": "https://registry.npmjs.org/@types/node/-/node-22.13.1.tgz",
      "integrity": "sha512-jK8uzQlrvXqEU91UxiK5J7pKHyzgnI1Qnl0QDHIgVGuolJhRb9EEl28Cj9b3rGR8B2lhFCtvIm5os8lFnO/1Ew==",
      "requires": {
        "undici-types": "~6.20.0"
      }
    },
    "@types/qs": {
      "version": "6.9.18",
      "resolved": "https://registry.npmjs.org/@types/qs/-/qs-6.9.18.tgz",
      "integrity": "sha512-kK7dgTYDyGqS+e2Q4aK9X3D7q234CIZ1Bv0q/7Z5IwRDoADNU81xXJK/YVyLbLTZCoIwUoDoffFeF+p/eIklAA==",
      "dev": true
    },
    "@types/range-parser": {
      "version": "1.2.7",
      "resolved": "https://registry.npmjs.org/@types/range-parser/-/range-parser-1.2.7.tgz",
      "integrity": "sha512-hKormJbkJqzQGhziax5PItDUTMAM9uE2XXQmM37dyd4hVM+5aVl7oVxMVUiVQn2oCQFN/LKCZdvSM0pFRqbSmQ==",
      "dev": true
    },
    "@types/send": {
      "version": "0.17.4",
      "resolved": "https://registry.npmjs.org/@types/send/-/send-0.17.4.tgz",
      "integrity": "sha512-x2EM6TJOybec7c52BX0ZspPodMsQUd5L6PRwOunVyVUhXiBSKf3AezDL8Dgvgt5o0UfKNfuA0eMLr2wLT4AiBA==",
      "dev": true,
      "requires": {
        "@types/mime": "^1",
        "@types/node": "*"
      }
    },
    "@types/serve-static": {
      "version": "1.15.7",
      "resolved": "https://registry.npmjs.org/@types/serve-static/-/serve-static-1.15.7.tgz",
      "integrity": "sha512-W8Ym+h8nhuRwaKPaDw34QUkwsGi6Rc4yYqvKFo5rm2FUEhCFbzVWrxXUxuKK8TASjWsysJY0nsmNCGhCOIsrOw==",
      "dev": true,
      "requires": {
        "@types/http-errors": "*",
        "@types/node": "*",
        "@types/send": "*"
      }
    },
    "@types/triple-beam": {
      "version": "1.3.5",
      "resolved": "https://registry.npmjs.org/@types/triple-beam/-/triple-beam-1.3.5.tgz",
      "integrity": "sha512-6WaYesThRMCl19iryMYP7/x2OVgCtbIVflDGFpWnb9irXI3UjYE4AzmYuiUKY1AJstGijoY+MgUszMgRxIYTYw=="
    },
    "@types/webidl-conversions": {
      "version": "7.0.3",
      "resolved": "https://registry.npmjs.org/@types/webidl-conversions/-/webidl-conversions-7.0.3.tgz",
      "integrity": "sha512-CiJJvcRtIgzadHCYXw7dqEnMNRjhGZlYK05Mj9OyktqV8uVT8fD2BFOB7S1uwBE3Kj2Z+4UyPmFw/Ixgw/LAlA=="
    },
    "@types/whatwg-url": {
      "version": "11.0.5",
      "resolved": "https://registry.npmjs.org/@types/whatwg-url/-/whatwg-url-11.0.5.tgz",
      "integrity": "sha512-coYR071JRaHa+xoEvvYqvnIHaVqaYrLPbsufM9BF63HkwI5Lgmy2QR8Q5K/lYDYo5AK82wOvSOS0UsLTpTG7uQ==",
      "requires": {
        "@types/webidl-conversions": "*"
      }
    },
    "abstract-logging": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/abstract-logging/-/abstract-logging-2.0.1.tgz",
      "integrity": "sha512-2BjRTZxTPvheOvGbBslFSYOUkr+SjPtOnrLP33f+VIWLzezQpZcqVg7ja3L4dBXmzzgwT+a029jRx5PCi3JuiA=="
    },
    "accepts": {
      "version": "1.3.8",
      "resolved": "https://registry.npmjs.org/accepts/-/accepts-1.3.8.tgz",
      "integrity": "sha512-PYAthTa2m2VKxuvSD3DPC/Gy+U+sOA1LAuT8mkmRuvw+NACSaeXEQ+NHcVF7rONl6qcaxV3Uuemwawk+7+SJLw==",
      "requires": {
        "mime-types": "~2.1.34",
        "negotiator": "0.6.3"
      }
    },
    "acorn": {
      "version": "8.14.0",
      "resolved": "https://registry.npmjs.org/acorn/-/acorn-8.14.0.tgz",
      "integrity": "sha512-cl669nCJTZBsL97OF4kUQm5g5hC2uihk0NxY3WENAC0TYdILVkAyHymAntgxGkl7K+t0cXIrH5siy5S4XkFycA==",
      "dev": true
    },
    "acorn-walk": {
      "version": "8.3.4",
      "resolved": "https://registry.npmjs.org/acorn-walk/-/acorn-walk-8.3.4.tgz",
      "integrity": "sha512-ueEepnujpqee2o5aIYnvHU6C0A42MNdsIDeqy5BydrkuC5R1ZuUFnm27EeFJGoEHJQgn3uleRvmTXaJgfXbt4g==",
      "dev": true,
      "requires": {
        "acorn": "^8.11.0"
      }
    },
    "anymatch": {
      "version": "3.1.3",
      "resolved": "https://registry.npmjs.org/anymatch/-/anymatch-3.1.3.tgz",
      "integrity": "sha512-KMReFUr0B4t+D+OBkjR3KYqvocp2XaSzO55UcB6mgQMd3KbcE+mWTyvVV7D/zsdEbNnV6acZUutkiHQXvTr1Rw==",
      "dev": true,
      "requires": {
        "normalize-path": "^3.0.0",
        "picomatch": "^2.0.4"
      }
    },
    "arg": {
      "version": "4.1.3",
      "resolved": "https://registry.npmjs.org/arg/-/arg-4.1.3.tgz",
      "integrity": "sha512-58S9QDqG0Xx27YwPSt9fJxivjYl432YCwfDMfZ+71RAqUrZef7LrKQZ3LHLOwCS4FLNBplP533Zx895SeOCHvA==",
      "dev": true
    },
    "array-flatten": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/array-flatten/-/array-flatten-1.1.1.tgz",
      "integrity": "sha512-PCVAQswWemu6UdxsDFFX/+gVeYqKAod3D3UVm91jHwynguOwAvYPhx8nNlM++NqRcK6CxxpUafjmhIdKiHibqg=="
    },
    "assert-plus": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/assert-plus/-/assert-plus-1.0.0.tgz",
      "integrity": "sha512-NfJ4UzBCcQGLDlQq7nHxH+tv3kyZ0hHQqF5BO6J7tNJeP5do1llPr8dZ8zHonfhAu0PHAdMkSo+8o0wxg9lZWw=="
    },
    "async": {
      "version": "3.2.6",
      "resolved": "https://registry.npmjs.org/async/-/async-3.2.6.tgz",
      "integrity": "sha512-htCUDlxyyCLMgaM3xXg0C0LW2xqfuQ6p05pCEIsXuyQ+a1koYKTuBMzRNwmybfLgvJDMd0r1LTn4+E0Ti6C2AA=="
    },
    "asynckit": {
      "version": "0.4.0",
      "resolved": "https://registry.npmjs.org/asynckit/-/asynckit-0.4.0.tgz",
      "integrity": "sha512-Oei9OH4tRh0YqU3GxhX79dM/mwVgvbZJaSNaRk+bshkj0S5cfHcgYakreBjrHwatXKbz+IoIdYLxrKim2MjW0Q=="
    },
    "axios": {
      "version": "1.7.9",
      "resolved": "https://registry.npmjs.org/axios/-/axios-1.7.9.tgz",
      "integrity": "sha512-LhLcE7Hbiryz8oMDdDptSrWowmB4Bl6RCt6sIJKpRB4XtVf0iEgewX3au/pJqm+Py1kCASkb/FFKjxQaLtxJvw==",
      "requires": {
        "follow-redirects": "^1.15.6",
        "form-data": "^4.0.0",
        "proxy-from-env": "^1.1.0"
      }
    },
    "backoff": {
      "version": "2.5.0",
      "resolved": "https://registry.npmjs.org/backoff/-/backoff-2.5.0.tgz",
      "integrity": "sha512-wC5ihrnUXmR2douXmXLCe5O3zg3GKIyvRi/hi58a/XyRxVI+3/yM0PYueQOZXPXQ9pxBislYkw+sF9b7C/RuMA==",
      "requires": {
        "precond": "0.2"
      }
    },
    "balanced-match": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/balanced-match/-/balanced-match-1.0.2.tgz",
      "integrity": "sha512-3oSeUO0TMV67hN1AmbXsK4yaqU7tjiHlbxRDZOpH0KW9+CeX4bRAaX0Anxt0tx2MrpRpWwQaPwIlISEJhYU5Pw==",
      "dev": true
    },
    "binary-extensions": {
      "version": "2.3.0",
      "resolved": "https://registry.npmjs.org/binary-extensions/-/binary-extensions-2.3.0.tgz",
      "integrity": "sha512-Ceh+7ox5qe7LJuLHoY0feh3pHuUDHAcRUeyL2VYghZwfpkNIy/+8Ocg0a3UuSoYzavmylwuLWQOf3hl0jjMMIw==",
      "dev": true
    },
    "body-parser": {
      "version": "1.20.3",
      "resolved": "https://registry.npmjs.org/body-parser/-/body-parser-1.20.3.tgz",
      "integrity": "sha512-7rAxByjUMqQ3/bHJy7D6OGXvx/MMc4IqBn/X0fcM1QUcAItpZrBEYhWGem+tzXH90c+G01ypMcYJBO9Y30203g==",
      "requires": {
        "bytes": "3.1.2",
        "content-type": "~1.0.5",
        "debug": "2.6.9",
        "depd": "2.0.0",
        "destroy": "1.2.0",
        "http-errors": "2.0.0",
        "iconv-lite": "0.4.24",
        "on-finished": "2.4.1",
        "qs": "6.13.0",
        "raw-body": "2.5.2",
        "type-is": "~1.6.18",
        "unpipe": "1.0.0"
      }
    },
    "brace-expansion": {
      "version": "1.1.11",
      "resolved": "https://registry.npmjs.org/brace-expansion/-/brace-expansion-1.1.11.tgz",
      "integrity": "sha512-iCuPHDFgrHX7H2vEI/5xpz07zSHB00TpugqhmYtVmMO6518mCuRMoOYFldEBl0g187ufozdaHgWKcYFb61qGiA==",
      "dev": true,
      "requires": {
        "balanced-match": "^1.0.0",
        "concat-map": "0.0.1"
      }
    },
    "braces": {
      "version": "3.0.3",
      "resolved": "https://registry.npmjs.org/braces/-/braces-3.0.3.tgz",
      "integrity": "sha512-yQbXgO/OSZVD2IsiLlro+7Hf6Q18EJrKSEsdoMzKePKXct3gvD8oLcOQdIzGupr5Fj+EDe8gO/lxc1BzfMpxvA==",
      "dev": true,
      "requires": {
        "fill-range": "^7.1.1"
      }
    },
    "bson": {
      "version": "6.10.2",
      "resolved": "https://registry.npmjs.org/bson/-/bson-6.10.2.tgz",
      "integrity": "sha512-5afhLTjqDSA3akH56E+/2J6kTDuSIlBxyXPdQslj9hcIgOUE378xdOfZvC/9q3LifJNI6KR/juZ+d0NRNYBwXg=="
    },
    "buffer-equal-constant-time": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/buffer-equal-constant-time/-/buffer-equal-constant-time-1.0.1.tgz",
      "integrity": "sha512-zRpUiDwd/xk6ADqPMATG8vc9VPrkck7T07OIx0gnjmJAnHnTVXNQG3vfvWNuiZIkwu9KrKdA1iJKfsfTVxE6NA=="
    },
    "bytes": {
      "version": "3.1.2",
      "resolved": "https://registry.npmjs.org/bytes/-/bytes-3.1.2.tgz",
      "integrity": "sha512-/Nf7TyzTx6S3yRJObOAV7956r8cr2+Oj8AC5dt8wSP3BQAoeX58NoHyCU8P8zGkNXStjTSi6fzO6F0pBdcYbEg=="
    },
    "call-bind-apply-helpers": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/call-bind-apply-helpers/-/call-bind-apply-helpers-1.0.1.tgz",
      "integrity": "sha512-BhYE+WDaywFg2TBWYNXAE+8B1ATnThNBqXHP5nQu0jWJdVvY2hvkpyB3qOmtmDePiS5/BDQ8wASEWGMWRG148g==",
      "requires": {
        "es-errors": "^1.3.0",
        "function-bind": "^1.1.2"
      }
    },
    "call-bound": {
      "version": "1.0.3",
      "resolved": "https://registry.npmjs.org/call-bound/-/call-bound-1.0.3.tgz",
      "integrity": "sha512-YTd+6wGlNlPxSuri7Y6X8tY2dmm12UMH66RpKMhiX6rsk5wXXnYgbUcOt8kiS31/AjfoTOvCsE+w8nZQLQnzHA==",
      "requires": {
        "call-bind-apply-helpers": "^1.0.1",
        "get-intrinsic": "^1.2.6"
      }
    },
    "chokidar": {
      "version": "3.6.0",
      "resolved": "https://registry.npmjs.org/chokidar/-/chokidar-3.6.0.tgz",
      "integrity": "sha512-7VT13fmjotKpGipCW9JEQAusEPE+Ei8nl6/g4FBAmIm0GOOLMua9NDDo/DWp0ZAxCr3cPq5ZpBqmPAQgDda2Pw==",
      "dev": true,
      "requires": {
        "anymatch": "~3.1.2",
        "braces": "~3.0.2",
        "fsevents": "~2.3.2",
        "glob-parent": "~5.1.2",
        "is-binary-path": "~2.1.0",
        "is-glob": "~4.0.1",
        "normalize-path": "~3.0.0",
        "readdirp": "~3.6.0"
      }
    },
    "color": {
      "version": "3.2.1",
      "resolved": "https://registry.npmjs.org/color/-/color-3.2.1.tgz",
      "integrity": "sha512-aBl7dZI9ENN6fUGC7mWpMTPNHmWUSNan9tuWN6ahh5ZLNk9baLJOnSMlrQkHcrfFgz2/RigjUVAjdx36VcemKA==",
      "requires": {
        "color-convert": "^1.9.3",
        "color-string": "^1.6.0"
      }
    },
    "color-convert": {
      "version": "1.9.3",
      "resolved": "https://registry.npmjs.org/color-convert/-/color-convert-1.9.3.tgz",
      "integrity": "sha512-QfAUtd+vFdAtFQcC8CCyYt1fYWxSqAiK2cSD6zDB8N3cpsEBAvRxp9zOGg6G/SHHJYAT88/az/IuDGALsNVbGg==",
      "requires": {
        "color-name": "1.1.3"
      }
    },
    "color-name": {
      "version": "1.1.3",
      "resolved": "https://registry.npmjs.org/color-name/-/color-name-1.1.3.tgz",
      "integrity": "sha512-72fSenhMw2HZMTVHeCA9KCmpEIbzWiQsjN+BHcBbS9vr1mtt+vJjPdksIBNUmKAW8TFUDPJK5SUU3QhE9NEXDw=="
    },
    "color-string": {
      "version": "1.9.1",
      "resolved": "https://registry.npmjs.org/color-string/-/color-string-1.9.1.tgz",
      "integrity": "sha512-shrVawQFojnZv6xM40anx4CkoDP+fZsw/ZerEMsW/pyzsRbElpsL/DBVW7q3ExxwusdNXI3lXpuhEZkzs8p5Eg==",
      "requires": {
        "color-name": "^1.0.0",
        "simple-swizzle": "^0.2.2"
      }
    },
    "colorspace": {
      "version": "1.1.4",
      "resolved": "https://registry.npmjs.org/colorspace/-/colorspace-1.1.4.tgz",
      "integrity": "sha512-BgvKJiuVu1igBUF2kEjRCZXol6wiiGbY5ipL/oVPwm0BL9sIpMIzM8IK7vwuxIIzOXMV3Ey5w+vxhm0rR/TN8w==",
      "requires": {
        "color": "^3.1.3",
        "text-hex": "1.0.x"
      }
    },
    "combined-stream": {
      "version": "1.0.8",
      "resolved": "https://registry.npmjs.org/combined-stream/-/combined-stream-1.0.8.tgz",
      "integrity": "sha512-FQN4MRfuJeHf7cBbBMJFXhKSDq+2kAArBlmRBvcvFE5BB1HZKXtSFASDhdlz9zOYwxh8lDdnvmMOe/+5cdoEdg==",
      "requires": {
        "delayed-stream": "~1.0.0"
      }
    },
    "concat-map": {
      "version": "0.0.1",
      "resolved": "https://registry.npmjs.org/concat-map/-/concat-map-0.0.1.tgz",
      "integrity": "sha512-/Srv4dswyQNBfohGpz9o6Yb3Gz3SrUDqBH5rTuhGR7ahtlbYKnVxw2bCFMRljaA7EXHaXZ8wsHdodFvbkhKmqg==",
      "dev": true
    },
    "content-disposition": {
      "version": "0.5.4",
      "resolved": "https://registry.npmjs.org/content-disposition/-/content-disposition-0.5.4.tgz",
      "integrity": "sha512-FveZTNuGw04cxlAiWbzi6zTAL/lhehaWbTtgluJh4/E95DqMwTmha3KZN1aAWA8cFIhHzMZUvLevkw5Rqk+tSQ==",
      "requires": {
        "safe-buffer": "5.2.1"
      }
    },
    "content-type": {
      "version": "1.0.5",
      "resolved": "https://registry.npmjs.org/content-type/-/content-type-1.0.5.tgz",
      "integrity": "sha512-nTjqfcBFEipKdXCv4YDQWCfmcLZKm81ldF0pAopTvyrFGVbcR6P/VAAd5G7N+0tTr8QqiU0tFadD6FK4NtJwOA=="
    },
    "cookie": {
      "version": "0.7.1",
      "resolved": "https://registry.npmjs.org/cookie/-/cookie-0.7.1.tgz",
      "integrity": "sha512-6DnInpx7SJ2AK3+CTUE/ZM0vWTUboZCegxhC2xiIydHR9jNuTAASBrfEpHhiGOZw/nX51bHt6YQl8jsGo4y/0w=="
    },
    "cookie-signature": {
      "version": "1.0.6",
      "resolved": "https://registry.npmjs.org/cookie-signature/-/cookie-signature-1.0.6.tgz",
      "integrity": "sha512-QADzlaHc8icV8I7vbaJXJwod9HWYp8uCqf1xa4OfNu1T7JVxQIrUgOWtHdNDtPiywmFbiS12VjotIXLrKM3orQ=="
    },
    "core-util-is": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/core-util-is/-/core-util-is-1.0.2.tgz",
      "integrity": "sha512-3lqz5YjWTYnW6dlDa5TLaTCcShfar1e40rmcJVwCBJC6mWlFuj0eCHIElmG1g5kyuJ/GD+8Wn4FFCcz4gJPfaQ=="
    },
    "cors": {
      "version": "2.8.5",
      "resolved": "https://registry.npmjs.org/cors/-/cors-2.8.5.tgz",
      "integrity": "sha512-KIHbLJqu73RGr/hnbrO9uBeixNGuvSQjul/jdFvS/KFSIH1hWVd1ng7zOHx+YrEfInLG7q4n6GHQ9cDtxv/P6g==",
      "requires": {
        "object-assign": "^4",
        "vary": "^1"
      }
    },
    "create-require": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/create-require/-/create-require-1.1.1.tgz",
      "integrity": "sha512-dcKFX3jn0MpIaXjisoRvexIJVEKzaq7z2rZKxf+MSr9TkdmHmsU4m2lcLojrj/FHl8mk5VxMmYA+ftRkP/3oKQ==",
      "dev": true
    },
    "debug": {
      "version": "2.6.9",
      "resolved": "https://registry.npmjs.org/debug/-/debug-2.6.9.tgz",
      "integrity": "sha512-bC7ElrdJaJnPbAP+1EotYvqZsb3ecl5wi6Bfi6BJTUcNowp6cvspg0jXznRTKDjm/E7AdgFBVeAPVMNcKGsHMA==",
      "requires": {
        "ms": "2.0.0"
      }
    },
    "delayed-stream": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/delayed-stream/-/delayed-stream-1.0.0.tgz",
      "integrity": "sha512-ZySD7Nf91aLB0RxL4KGrKHBXl7Eds1DAmEdcoVawXnLD7SDhpNgtuII2aAkg7a7QS41jxPSZ17p4VdGnMHk3MQ=="
    },
    "depd": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/depd/-/depd-2.0.0.tgz",
      "integrity": "sha512-g7nH6P6dyDioJogAAGprGpCtVImJhpPk/roCzdb3fIh61/s/nPsfR6onyMwkCAR/OlC3yBC0lESvUoQEAssIrw=="
    },
    "destroy": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/destroy/-/destroy-1.2.0.tgz",
      "integrity": "sha512-2sJGJTaXIIaR1w4iJSNoN0hnMY7Gpc/n8D4qSCJw8QqFWXf7cuAgnEHxBpweaVcPevC2l3KpjYCx3NypQQgaJg=="
    },
    "diff": {
      "version": "4.0.2",
      "resolved": "https://registry.npmjs.org/diff/-/diff-4.0.2.tgz",
      "integrity": "sha512-58lmxKSA4BNyLz+HHMUzlOEpg09FV+ev6ZMe3vJihgdxzgcwZ8VoEEPmALCZG9LmqfVoNMMKpttIYTVG6uDY7A==",
      "dev": true
    },
    "dotenv": {
      "version": "16.4.7",
      "resolved": "https://registry.npmjs.org/dotenv/-/dotenv-16.4.7.tgz",
      "integrity": "sha512-47qPchRCykZC03FhkYAhrvwU4xDBFIj1QPqaarj6mdM/hgUzfPHcpkHJOn3mJAufFeeAxAzeGsr5X0M4k6fLZQ=="
    },
    "dunder-proto": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/dunder-proto/-/dunder-proto-1.0.1.tgz",
      "integrity": "sha512-KIN/nDJBQRcXw0MLVhZE9iQHmG68qAVIBg9CqmUYjmQIhgij9U5MFvrqkUL5FbtyyzZuOeOt0zdeRe4UY7ct+A==",
      "requires": {
        "call-bind-apply-helpers": "^1.0.1",
        "es-errors": "^1.3.0",
        "gopd": "^1.2.0"
      }
    },
    "ecdsa-sig-formatter": {
      "version": "1.0.11",
      "resolved": "https://registry.npmjs.org/ecdsa-sig-formatter/-/ecdsa-sig-formatter-1.0.11.tgz",
      "integrity": "sha512-nagl3RYrbNv6kQkeJIpt6NJZy8twLB/2vtz6yN9Z4vRKHN4/QZJIEbqohALSgwKdnksuY3k5Addp5lg8sVoVcQ==",
      "requires": {
        "safe-buffer": "^5.0.1"
      }
    },
    "ee-first": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/ee-first/-/ee-first-1.1.1.tgz",
      "integrity": "sha512-WMwm9LhRUo+WUaRN+vRuETqG89IgZphVSNkdFgeb6sS/E4OrDIN7t48CAewSHXc6C8lefD8KKfr5vY61brQlow=="
    },
    "enabled": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/enabled/-/enabled-2.0.0.tgz",
      "integrity": "sha512-AKrN98kuwOzMIdAizXGI86UFBoo26CL21UM763y1h/GMSJ4/OHU9k2YlsmBpyScFo/wbLzWQJBMCW4+IO3/+OQ=="
    },
    "encodeurl": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/encodeurl/-/encodeurl-2.0.0.tgz",
      "integrity": "sha512-Q0n9HRi4m6JuGIV1eFlmvJB7ZEVxu93IrMyiMsGC0lrMJMWzRgx6WGquyfQgZVb31vhGgXnfmPNNXmxnOkRBrg=="
    },
    "es-define-property": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/es-define-property/-/es-define-property-1.0.1.tgz",
      "integrity": "sha512-e3nRfgfUZ4rNGL232gUgX06QNyyez04KdjFrF+LTRoOXmrOgFKDg4BCdsjW8EnT69eqdYGmRpJwiPVYNrCaW3g=="
    },
    "es-errors": {
      "version": "1.3.0",
      "resolved": "https://registry.npmjs.org/es-errors/-/es-errors-1.3.0.tgz",
      "integrity": "sha512-Zf5H2Kxt2xjTvbJvP2ZWLEICxA6j+hAmMzIlypy4xcBg1vKVnx89Wy0GbS+kf5cwCVFFzdCFh2XSCFNULS6csw=="
    },
    "es-object-atoms": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/es-object-atoms/-/es-object-atoms-1.1.1.tgz",
      "integrity": "sha512-FGgH2h8zKNim9ljj7dankFPcICIK9Cp5bm+c2gQSYePhpaG5+esrLODihIorn+Pe6FGJzWhXQotPv73jTaldXA==",
      "requires": {
        "es-errors": "^1.3.0"
      }
    },
    "escape-html": {
      "version": "1.0.3",
      "resolved": "https://registry.npmjs.org/escape-html/-/escape-html-1.0.3.tgz",
      "integrity": "sha512-NiSupZ4OeuGwr68lGIeym/ksIZMJodUGOSCZ/FSnTxcrekbvqrgdUxlJOMpijaKZVjAJrWrGs/6Jy8OMuyj9ow=="
    },
    "etag": {
      "version": "1.8.1",
      "resolved": "https://registry.npmjs.org/etag/-/etag-1.8.1.tgz",
      "integrity": "sha512-aIL5Fx7mawVa300al2BnEE4iNvo1qETxLrPI/o05L7z6go7fCw1J6EQmbK4FmJ2AS7kgVF/KEZWufBfdClMcPg=="
    },
    "express": {
      "version": "4.21.2",
      "resolved": "https://registry.npmjs.org/express/-/express-4.21.2.tgz",
      "integrity": "sha512-28HqgMZAmih1Czt9ny7qr6ek2qddF4FclbMzwhCREB6OFfH+rXAnuNCwo1/wFvrtbgsQDb4kSbX9de9lFbrXnA==",
      "requires": {
        "accepts": "~1.3.8",
        "array-flatten": "1.1.1",
        "body-parser": "1.20.3",
        "content-disposition": "0.5.4",
        "content-type": "~1.0.4",
        "cookie": "0.7.1",
        "cookie-signature": "1.0.6",
        "debug": "2.6.9",
        "depd": "2.0.0",
        "encodeurl": "~2.0.0",
        "escape-html": "~1.0.3",
        "etag": "~1.8.1",
        "finalhandler": "1.3.1",
        "fresh": "0.5.2",
        "http-errors": "2.0.0",
        "merge-descriptors": "1.0.3",
        "methods": "~1.1.2",
        "on-finished": "2.4.1",
        "parseurl": "~1.3.3",
        "path-to-regexp": "0.1.12",
        "proxy-addr": "~2.0.7",
        "qs": "6.13.0",
        "range-parser": "~1.2.1",
        "safe-buffer": "5.2.1",
        "send": "0.19.0",
        "serve-static": "1.16.2",
        "setprototypeof": "1.2.0",
        "statuses": "2.0.1",
        "type-is": "~1.6.18",
        "utils-merge": "1.0.1",
        "vary": "~1.1.2"
      }
    },
    "express-jwt": {
      "version": "8.5.1",
      "resolved": "https://registry.npmjs.org/express-jwt/-/express-jwt-8.5.1.tgz",
      "integrity": "sha512-Dv6QjDLpR2jmdb8M6XQXiCcpEom7mK8TOqnr0/TngDKsG2DHVkO8+XnVxkJVN7BuS1I3OrGw6N8j5DaaGgkDRQ==",
      "requires": {
        "@types/jsonwebtoken": "^9",
        "express-unless": "^2.1.3",
        "jsonwebtoken": "^9.0.0"
      }
    },
    "express-unless": {
      "version": "2.1.3",
      "resolved": "https://registry.npmjs.org/express-unless/-/express-unless-2.1.3.tgz",
      "integrity": "sha512-wj4tLMyCVYuIIKHGt0FhCtIViBcwzWejX0EjNxveAa6dG+0XBCQhMbx+PnkLkFCxLC69qoFrxds4pIyL88inaQ=="
    },
    "extsprintf": {
      "version": "1.4.1",
      "resolved": "https://registry.npmjs.org/extsprintf/-/extsprintf-1.4.1.tgz",
      "integrity": "sha512-Wrk35e8ydCKDj/ArClo1VrPVmN8zph5V4AtHwIuHhvMXsKf73UT3BOD+azBIW+3wOJ4FhEH7zyaJCFvChjYvMA=="
    },
    "fecha": {
      "version": "4.2.3",
      "resolved": "https://registry.npmjs.org/fecha/-/fecha-4.2.3.tgz",
      "integrity": "sha512-OP2IUU6HeYKJi3i0z4A19kHMQoLVs4Hc+DPqqxI2h/DPZHTm/vjsfC6P0b4jCMy14XizLBqvndQ+UilD7707Jw=="
    },
    "fill-range": {
      "version": "7.1.1",
      "resolved": "https://registry.npmjs.org/fill-range/-/fill-range-7.1.1.tgz",
      "integrity": "sha512-YsGpe3WHLK8ZYi4tWDg2Jy3ebRz2rXowDxnld4bkQB00cc/1Zw9AWnC0i9ztDJitivtQvaI9KaLyKrc+hBW0yg==",
      "dev": true,
      "requires": {
        "to-regex-range": "^5.0.1"
      }
    },
    "finalhandler": {
      "version": "1.3.1",
      "resolved": "https://registry.npmjs.org/finalhandler/-/finalhandler-1.3.1.tgz",
      "integrity": "sha512-6BN9trH7bp3qvnrRyzsBz+g3lZxTNZTbVO2EV1CS0WIcDbawYVdYvGflME/9QP0h0pYlCDBCTjYa9nZzMDpyxQ==",
      "requires": {
        "debug": "2.6.9",
        "encodeurl": "~2.0.0",
        "escape-html": "~1.0.3",
        "on-finished": "2.4.1",
        "parseurl": "~1.3.3",
        "statuses": "2.0.1",
        "unpipe": "~1.0.0"
      }
    },
    "fn.name": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/fn.name/-/fn.name-1.1.0.tgz",
      "integrity": "sha512-GRnmB5gPyJpAhTQdSZTSp9uaPSvl09KoYcMQtsB9rQoOmzs9dH6ffeccH+Z+cv6P68Hu5bC6JjRh4Ah/mHSNRw=="
    },
    "follow-redirects": {
      "version": "1.15.9",
      "resolved": "https://registry.npmjs.org/follow-redirects/-/follow-redirects-1.15.9.tgz",
      "integrity": "sha512-gew4GsXizNgdoRyqmyfMHyAmXsZDk6mHkSxZFCzW9gwlbtOW44CDtYavM+y+72qD/Vq2l550kMF52DT8fOLJqQ=="
    },
    "form-data": {
      "version": "4.0.1",
      "resolved": "https://registry.npmjs.org/form-data/-/form-data-4.0.1.tgz",
      "integrity": "sha512-tzN8e4TX8+kkxGPK8D5u0FNmjPUjw3lwC9lSLxxoB/+GtsJG91CO8bSWy73APlgAZzZbXEYZJuxjkHH2w+Ezhw==",
      "requires": {
        "asynckit": "^0.4.0",
        "combined-stream": "^1.0.8",
        "mime-types": "^2.1.12"
      }
    },
    "forwarded": {
      "version": "0.2.0",
      "resolved": "https://registry.npmjs.org/forwarded/-/forwarded-0.2.0.tgz",
      "integrity": "sha512-buRG0fpBtRHSTCOASe6hD258tEubFoRLb4ZNA6NxMVHNw2gOcwHo9wyablzMzOA5z9xA9L1KNjk/Nt6MT9aYow=="
    },
    "fresh": {
      "version": "0.5.2",
      "resolved": "https://registry.npmjs.org/fresh/-/fresh-0.5.2.tgz",
      "integrity": "sha512-zJ2mQYM18rEFOudeV4GShTGIQ7RbzA7ozbU9I/XBpm7kqgMywgmylMwXHxZJmkVoYkna9d2pVXVXPdYTP9ej8Q=="
    },
    "fsevents": {
      "version": "2.3.3",
      "resolved": "https://registry.npmjs.org/fsevents/-/fsevents-2.3.3.tgz",
      "integrity": "sha512-5xoDfX+fL7faATnagmWPpbFtwh/R77WmMMqqHGS65C3vvB0YHrgF+B1YmZ3441tMj5n63k0212XNoJwzlhffQw==",
      "dev": true,
      "optional": true
    },
    "function-bind": {
      "version": "1.1.2",
      "resolved": "https://registry.npmjs.org/function-bind/-/function-bind-1.1.2.tgz",
      "integrity": "sha512-7XHNxH7qX9xG5mIwxkhumTox/MIRNcOgDrxWsMt2pAr23WHp6MrRlN7FBSFpCpr+oVO0F744iUgR82nJMfG2SA=="
    },
    "get-intrinsic": {
      "version": "1.2.7",
      "resolved": "https://registry.npmjs.org/get-intrinsic/-/get-intrinsic-1.2.7.tgz",
      "integrity": "sha512-VW6Pxhsrk0KAOqs3WEd0klDiF/+V7gQOpAvY1jVU/LHmaD/kQO4523aiJuikX/QAKYiW6x8Jh+RJej1almdtCA==",
      "requires": {
        "call-bind-apply-helpers": "^1.0.1",
        "es-define-property": "^1.0.1",
        "es-errors": "^1.3.0",
        "es-object-atoms": "^1.0.0",
        "function-bind": "^1.1.2",
        "get-proto": "^1.0.0",
        "gopd": "^1.2.0",
        "has-symbols": "^1.1.0",
        "hasown": "^2.0.2",
        "math-intrinsics": "^1.1.0"
      }
    },
    "get-proto": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/get-proto/-/get-proto-1.0.1.tgz",
      "integrity": "sha512-sTSfBjoXBp89JvIKIefqw7U2CCebsc74kiY6awiGogKtoSGbgjYE/G/+l9sF3MWFPNc9IcoOC4ODfKHfxFmp0g==",
      "requires": {
        "dunder-proto": "^1.0.1",
        "es-object-atoms": "^1.0.0"
      }
    },
    "glob-parent": {
      "version": "5.1.2",
      "resolved": "https://registry.npmjs.org/glob-parent/-/glob-parent-5.1.2.tgz",
      "integrity": "sha512-AOIgSQCepiJYwP3ARnGx+5VnTu2HBYdzbGP45eLw1vr3zB3vZLeyed1sC9hnbcOc9/SrMyM5RPQrkGz4aS9Zow==",
      "dev": true,
      "requires": {
        "is-glob": "^4.0.1"
      }
    },
    "gopd": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/gopd/-/gopd-1.2.0.tgz",
      "integrity": "sha512-ZUKRh6/kUFoAiTAtTYPZJ3hw9wNxx+BIBOijnlG9PnrJsCcSjs1wyyD6vJpaYtgnzDrKYRSqf3OO6Rfa93xsRg=="
    },
    "has-flag": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/has-flag/-/has-flag-3.0.0.tgz",
      "integrity": "sha512-sKJf1+ceQBr4SMkvQnBDNDtf4TXpVhVGateu0t918bl30FnbE2m4vNLX+VWe/dpjlb+HugGYzW7uQXH98HPEYw==",
      "dev": true
    },
    "has-symbols": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/has-symbols/-/has-symbols-1.1.0.tgz",
      "integrity": "sha512-1cDNdwJ2Jaohmb3sg4OmKaMBwuC48sYni5HUw2DvsC8LjGTLK9h+eb1X6RyuOHe4hT0ULCW68iomhjUoKUqlPQ=="
    },
    "hasown": {
      "version": "2.0.2",
      "resolved": "https://registry.npmjs.org/hasown/-/hasown-2.0.2.tgz",
      "integrity": "sha512-0hJU9SCPvmMzIBdZFqNPXWa6dqh7WdH0cII9y+CyS8rG3nL48Bclra9HmKhVVUHyPWNH5Y7xDwAB7bfgSjkUMQ==",
      "requires": {
        "function-bind": "^1.1.2"
      }
    },
    "helmet": {
      "version": "8.0.0",
      "resolved": "https://registry.npmjs.org/helmet/-/helmet-8.0.0.tgz",
      "integrity": "sha512-VyusHLEIIO5mjQPUI1wpOAEu+wl6Q0998jzTxqUYGE45xCIcAxy3MsbEK/yyJUJ3ADeMoB6MornPH6GMWAf+Pw=="
    },
    "http-errors": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/http-errors/-/http-errors-2.0.0.tgz",
      "integrity": "sha512-FtwrG/euBzaEjYeRqOgly7G0qviiXoJWnvEH2Z1plBdXgbyjv34pHTSb9zoeHMyDy33+DWy5Wt9Wo+TURtOYSQ==",
      "requires": {
        "depd": "2.0.0",
        "inherits": "2.0.4",
        "setprototypeof": "1.2.0",
        "statuses": "2.0.1",
        "toidentifier": "1.0.1"
      }
    },
    "iconv-lite": {
      "version": "0.4.24",
      "resolved": "https://registry.npmjs.org/iconv-lite/-/iconv-lite-0.4.24.tgz",
      "integrity": "sha512-v3MXnZAcvnywkTUEZomIActle7RXXeedOR31wwl7VlyoXO4Qi9arvSenNQWne1TcRwhCL1HwLI21bEqdpj8/rA==",
      "requires": {
        "safer-buffer": ">= 2.1.2 < 3"
      }
    },
    "ignore-by-default": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/ignore-by-default/-/ignore-by-default-1.0.1.tgz",
      "integrity": "sha512-Ius2VYcGNk7T90CppJqcIkS5ooHUZyIQK+ClZfMfMNFEF9VSE73Fq+906u/CWu92x4gzZMWOwfFYckPObzdEbA==",
      "dev": true
    },
    "inherits": {
      "version": "2.0.4",
      "resolved": "https://registry.npmjs.org/inherits/-/inherits-2.0.4.tgz",
      "integrity": "sha512-k/vGaX4/Yla3WzyMCvTQOXYeIHvqOKtnqBduzTHpzpQZzAskKMhZ2K+EnBiSM9zGSoIFeMpXKxa4dYeZIQqewQ=="
    },
    "ipaddr.js": {
      "version": "1.9.1",
      "resolved": "https://registry.npmjs.org/ipaddr.js/-/ipaddr.js-1.9.1.tgz",
      "integrity": "sha512-0KI/607xoxSToH7GjN1FfSbLoU0+btTicjsQSWQlh/hZykN8KpmMf7uYwPW3R+akZ6R/w18ZlXSHBYXiYUPO3g=="
    },
    "is-arrayish": {
      "version": "0.3.2",
      "resolved": "https://registry.npmjs.org/is-arrayish/-/is-arrayish-0.3.2.tgz",
      "integrity": "sha512-eVRqCvVlZbuw3GrM63ovNSNAeA1K16kaR/LRY/92w0zxQ5/1YzwblUX652i4Xs9RwAGjW9d9y6X88t8OaAJfWQ=="
    },
    "is-binary-path": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/is-binary-path/-/is-binary-path-2.1.0.tgz",
      "integrity": "sha512-ZMERYes6pDydyuGidse7OsHxtbI7WVeUEozgR/g7rd0xUimYNlvZRE/K2MgZTjWy725IfelLeVcEM97mmtRGXw==",
      "dev": true,
      "requires": {
        "binary-extensions": "^2.0.0"
      }
    },
    "is-extglob": {
      "version": "2.1.1",
      "resolved": "https://registry.npmjs.org/is-extglob/-/is-extglob-2.1.1.tgz",
      "integrity": "sha512-SbKbANkN603Vi4jEZv49LeVJMn4yGwsbzZworEoyEiutsN3nJYdbO36zfhGJ6QEDpOZIFkDtnq5JRxmvl3jsoQ==",
      "dev": true
    },
    "is-glob": {
      "version": "4.0.3",
      "resolved": "https://registry.npmjs.org/is-glob/-/is-glob-4.0.3.tgz",
      "integrity": "sha512-xelSayHH36ZgE7ZWhli7pW34hNbNl8Ojv5KVmkJD4hBdD3th8Tfk9vYasLM+mXWOZhFkgZfxhLSnrwRr4elSSg==",
      "dev": true,
      "requires": {
        "is-extglob": "^2.1.1"
      }
    },
    "is-number": {
      "version": "7.0.0",
      "resolved": "https://registry.npmjs.org/is-number/-/is-number-7.0.0.tgz",
      "integrity": "sha512-41Cifkg6e8TylSpdtTpeLVMqvSBEVzTttHvERD741+pnZ8ANv0004MRL43QKPDlK9cGvNp6NZWZUBlbGXYxxng==",
      "dev": true
    },
    "is-stream": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/is-stream/-/is-stream-2.0.1.tgz",
      "integrity": "sha512-hFoiJiTl63nn+kstHGBtewWSKnQLpyb155KHheA1l39uvtO9nWIop1p3udqPcUd/xbF1VLMO4n7OI6p7RbngDg=="
    },
    "jsonwebtoken": {
      "version": "9.0.2",
      "resolved": "https://registry.npmjs.org/jsonwebtoken/-/jsonwebtoken-9.0.2.tgz",
      "integrity": "sha512-PRp66vJ865SSqOlgqS8hujT5U4AOgMfhrwYIuIhfKaoSCZcirrmASQr8CX7cUg+RMih+hgznrjp99o+W4pJLHQ==",
      "requires": {
        "jws": "^3.2.2",
        "lodash.includes": "^4.3.0",
        "lodash.isboolean": "^3.0.3",
        "lodash.isinteger": "^4.0.4",
        "lodash.isnumber": "^3.0.3",
        "lodash.isplainobject": "^4.0.6",
        "lodash.isstring": "^4.0.1",
        "lodash.once": "^4.0.0",
        "ms": "^2.1.1",
        "semver": "^7.5.4"
      },
      "dependencies": {
        "ms": {
          "version": "2.1.3",
          "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.3.tgz",
          "integrity": "sha512-6FlzubTLZG3J2a/NVCAleEhjzq5oxgHyaCU9yYXvcLsvoVaHJq/s5xXI6/XXP6tz7R9xAOtHnSO/tXtF3WRTlA=="
        }
      }
    },
    "jwa": {
      "version": "1.4.1",
      "resolved": "https://registry.npmjs.org/jwa/-/jwa-1.4.1.tgz",
      "integrity": "sha512-qiLX/xhEEFKUAJ6FiBMbes3w9ATzyk5W7Hvzpa/SLYdxNtng+gcurvrI7TbACjIXlsJyr05/S1oUhZrc63evQA==",
      "requires": {
        "buffer-equal-constant-time": "1.0.1",
        "ecdsa-sig-formatter": "1.0.11",
        "safe-buffer": "^5.0.1"
      }
    },
    "jws": {
      "version": "3.2.2",
      "resolved": "https://registry.npmjs.org/jws/-/jws-3.2.2.tgz",
      "integrity": "sha512-YHlZCB6lMTllWDtSPHz/ZXTsi8S00usEV6v1tjq8tOUZzw7DpSDWVXjXDre6ed1w/pd495ODpHZYSdkRTsa0HA==",
      "requires": {
        "jwa": "^1.4.1",
        "safe-buffer": "^5.0.1"
      }
    },
    "kuler": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/kuler/-/kuler-2.0.0.tgz",
      "integrity": "sha512-Xq9nH7KlWZmXAtodXDDRE7vs6DU1gTU8zYDHDiWLSip45Egwq3plLHzPn27NgvzL2r1LMPC1vdqh98sQxtqj4A=="
    },
    "ldapjs": {
      "version": "3.0.7",
      "resolved": "https://registry.npmjs.org/ldapjs/-/ldapjs-3.0.7.tgz",
      "integrity": "sha512-1ky+WrN+4CFMuoekUOv7Y1037XWdjKpu0xAPwSP+9KdvmV9PG+qOKlssDV6a+U32apwxdD3is/BZcWOYzN30cg==",
      "requires": {
        "@ldapjs/asn1": "^2.0.0",
        "@ldapjs/attribute": "^1.0.0",
        "@ldapjs/change": "^1.0.0",
        "@ldapjs/controls": "^2.1.0",
        "@ldapjs/dn": "^1.1.0",
        "@ldapjs/filter": "^2.1.1",
        "@ldapjs/messages": "^1.3.0",
        "@ldapjs/protocol": "^1.2.1",
        "abstract-logging": "^2.0.1",
        "assert-plus": "^1.0.0",
        "backoff": "^2.5.0",
        "once": "^1.4.0",
        "vasync": "^2.2.1",
        "verror": "^1.10.1"
      }
    },
    "lodash.includes": {
      "version": "4.3.0",
      "resolved": "https://registry.npmjs.org/lodash.includes/-/lodash.includes-4.3.0.tgz",
      "integrity": "sha512-W3Bx6mdkRTGtlJISOvVD/lbqjTlPPUDTMnlXZFnVwi9NKJ6tiAk6LVdlhZMm17VZisqhKcgzpO5Wz91PCt5b0w=="
    },
    "lodash.isboolean": {
      "version": "3.0.3",
      "resolved": "https://registry.npmjs.org/lodash.isboolean/-/lodash.isboolean-3.0.3.tgz",
      "integrity": "sha512-Bz5mupy2SVbPHURB98VAcw+aHh4vRV5IPNhILUCsOzRmsTmSQ17jIuqopAentWoehktxGd9e/hbIXq980/1QJg=="
    },
    "lodash.isinteger": {
      "version": "4.0.4",
      "resolved": "https://registry.npmjs.org/lodash.isinteger/-/lodash.isinteger-4.0.4.tgz",
      "integrity": "sha512-DBwtEWN2caHQ9/imiNeEA5ys1JoRtRfY3d7V9wkqtbycnAmTvRRmbHKDV4a0EYc678/dia0jrte4tjYwVBaZUA=="
    },
    "lodash.isnumber": {
      "version": "3.0.3",
      "resolved": "https://registry.npmjs.org/lodash.isnumber/-/lodash.isnumber-3.0.3.tgz",
      "integrity": "sha512-QYqzpfwO3/CWf3XP+Z+tkQsfaLL/EnUlXWVkIk5FUPc4sBdTehEqZONuyRt2P67PXAk+NXmTBcc97zw9t1FQrw=="
    },
    "lodash.isplainobject": {
      "version": "4.0.6",
      "resolved": "https://registry.npmjs.org/lodash.isplainobject/-/lodash.isplainobject-4.0.6.tgz",
      "integrity": "sha512-oSXzaWypCMHkPC3NvBEaPHf0KsA5mvPrOPgQWDsbg8n7orZ290M0BmC/jgRZ4vcJ6DTAhjrsSYgdsW/F+MFOBA=="
    },
    "lodash.isstring": {
      "version": "4.0.1",
      "resolved": "https://registry.npmjs.org/lodash.isstring/-/lodash.isstring-4.0.1.tgz",
      "integrity": "sha512-0wJxfxH1wgO3GrbuP+dTTk7op+6L41QCXbGINEmD+ny/G/eCqGzxyCsh7159S+mgDDcoarnBw6PC1PS5+wUGgw=="
    },
    "lodash.once": {
      "version": "4.1.1",
      "resolved": "https://registry.npmjs.org/lodash.once/-/lodash.once-4.1.1.tgz",
      "integrity": "sha512-Sb487aTOCr9drQVL8pIxOzVhafOjZN9UU54hiN8PU3uAiSV7lx1yYNpbNmex2PK6dSJoNTSJUUswT651yww3Mg=="
    },
    "logform": {
      "version": "2.7.0",
      "resolved": "https://registry.npmjs.org/logform/-/logform-2.7.0.tgz",
      "integrity": "sha512-TFYA4jnP7PVbmlBIfhlSe+WKxs9dklXMTEGcBCIvLhE/Tn3H6Gk1norupVW7m5Cnd4bLcr08AytbyV/xj7f/kQ==",
      "requires": {
        "@colors/colors": "1.6.0",
        "@types/triple-beam": "^1.3.2",
        "fecha": "^4.2.0",
        "ms": "^2.1.1",
        "safe-stable-stringify": "^2.3.1",
        "triple-beam": "^1.3.0"
      },
      "dependencies": {
        "ms": {
          "version": "2.1.3",
          "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.3.tgz",
          "integrity": "sha512-6FlzubTLZG3J2a/NVCAleEhjzq5oxgHyaCU9yYXvcLsvoVaHJq/s5xXI6/XXP6tz7R9xAOtHnSO/tXtF3WRTlA=="
        }
      }
    },
    "make-error": {
      "version": "1.3.6",
      "resolved": "https://registry.npmjs.org/make-error/-/make-error-1.3.6.tgz",
      "integrity": "sha512-s8UhlNe7vPKomQhC1qFelMokr/Sc3AgNbso3n74mVPA5LTZwkB9NlXf4XPamLxJE8h0gh73rM94xvwRT2CVInw==",
      "dev": true
    },
    "math-intrinsics": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/math-intrinsics/-/math-intrinsics-1.1.0.tgz",
      "integrity": "sha512-/IXtbwEk5HTPyEwyKX6hGkYXxM9nbj64B+ilVJnC/R6B0pH5G4V3b0pVbL7DBj4tkhBAppbQUlf6F6Xl9LHu1g=="
    },
    "media-typer": {
      "version": "0.3.0",
      "resolved": "https://registry.npmjs.org/media-typer/-/media-typer-0.3.0.tgz",
      "integrity": "sha512-dq+qelQ9akHpcOl/gUVRTxVIOkAJ1wR3QAvb4RsVjS8oVoFjDGTc679wJYmUmknUF5HwMLOgb5O+a3KxfWapPQ=="
    },
    "memory-pager": {
      "version": "1.5.0",
      "resolved": "https://registry.npmjs.org/memory-pager/-/memory-pager-1.5.0.tgz",
      "integrity": "sha512-ZS4Bp4r/Zoeq6+NLJpP+0Zzm0pR8whtGPf1XExKLJBAczGMnSi3It14OiNCStjQjM6NU1okjQGSxgEZN8eBYKg=="
    },
    "merge-descriptors": {
      "version": "1.0.3",
      "resolved": "https://registry.npmjs.org/merge-descriptors/-/merge-descriptors-1.0.3.tgz",
      "integrity": "sha512-gaNvAS7TZ897/rVaZ0nMtAyxNyi/pdbjbAwUpFQpN70GqnVfOiXpeUUMKRBmzXaSQ8DdTX4/0ms62r2K+hE6mQ=="
    },
    "methods": {
      "version": "1.1.2",
      "resolved": "https://registry.npmjs.org/methods/-/methods-1.1.2.tgz",
      "integrity": "sha512-iclAHeNqNm68zFtnZ0e+1L2yUIdvzNoauKU4WBA3VvH/vPFieF7qfRlwUZU+DA9P9bPXIS90ulxoUoCH23sV2w=="
    },
    "mime": {
      "version": "1.6.0",
      "resolved": "https://registry.npmjs.org/mime/-/mime-1.6.0.tgz",
      "integrity": "sha512-x0Vn8spI+wuJ1O6S7gnbaQg8Pxh4NNHb7KSINmEWKiPE4RKOplvijn+NkmYmmRgP68mc70j2EbeTFRsrswaQeg=="
    },
    "mime-db": {
      "version": "1.52.0",
      "resolved": "https://registry.npmjs.org/mime-db/-/mime-db-1.52.0.tgz",
      "integrity": "sha512-sPU4uV7dYlvtWJxwwxHD0PuihVNiE7TyAbQ5SWxDCB9mUYvOgroQOwYQQOKPJ8CIbE+1ETVlOoK1UC2nU3gYvg=="
    },
    "mime-types": {
      "version": "2.1.35",
      "resolved": "https://registry.npmjs.org/mime-types/-/mime-types-2.1.35.tgz",
      "integrity": "sha512-ZDY+bPm5zTTF+YpCrAU9nK0UgICYPT0QtT1NZWFv4s++TNkcgVaT0g6+4R2uI4MjQjzysHB1zxuWL50hzaeXiw==",
      "requires": {
        "mime-db": "1.52.0"
      }
    },
    "minimatch": {
      "version": "3.1.2",
      "resolved": "https://registry.npmjs.org/minimatch/-/minimatch-3.1.2.tgz",
      "integrity": "sha512-J7p63hRiAjw1NDEww1W7i37+ByIrOWO5XQQAzZ3VOcL0PNybwpfmV/N05zFAzwQ9USyEcX6t3UO+K5aqBQOIHw==",
      "dev": true,
      "requires": {
        "brace-expansion": "^1.1.7"
      }
    },
    "mongodb": {
      "version": "6.13.0",
      "resolved": "https://registry.npmjs.org/mongodb/-/mongodb-6.13.0.tgz",
      "integrity": "sha512-KeESYR5TEaFxOuwRqkOm3XOsMqCSkdeDMjaW5u2nuKfX7rqaofp7JQGoi7sVqQcNJTKuveNbzZtWMstb8ABP6Q==",
      "requires": {
        "@mongodb-js/saslprep": "^1.1.9",
        "bson": "^6.10.1",
        "mongodb-connection-string-url": "^3.0.0"
      }
    },
    "mongodb-connection-string-url": {
      "version": "3.0.2",
      "resolved": "https://registry.npmjs.org/mongodb-connection-string-url/-/mongodb-connection-string-url-3.0.2.tgz",
      "integrity": "sha512-rMO7CGo/9BFwyZABcKAWL8UJwH/Kc2x0g72uhDWzG48URRax5TCIcJ7Rc3RZqffZzO/Gwff/jyKwCU9TN8gehA==",
      "requires": {
        "@types/whatwg-url": "^11.0.2",
        "whatwg-url": "^14.1.0 || ^13.0.0"
      }
    },
    "ms": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/ms/-/ms-2.0.0.tgz",
      "integrity": "sha512-Tpp60P6IUJDTuOq/5Z8cdskzJujfwqfOTkrwIwj7IRISpnkJnT6SyJ4PCPnGMoFjC9ddhal5KVIYtAt97ix05A=="
    },
    "negotiator": {
      "version": "0.6.3",
      "resolved": "https://registry.npmjs.org/negotiator/-/negotiator-0.6.3.tgz",
      "integrity": "sha512-+EUsqGPLsM+j/zdChZjsnX51g4XrHFOIXwfnCVPGlQk/k5giakcKsuxCObBRu6DSm9opw/O6slWbJdghQM4bBg=="
    },
    "nodemon": {
      "version": "3.1.9",
      "resolved": "https://registry.npmjs.org/nodemon/-/nodemon-3.1.9.tgz",
      "integrity": "sha512-hdr1oIb2p6ZSxu3PB2JWWYS7ZQ0qvaZsc3hK8DR8f02kRzc8rjYmxAIvdz+aYC+8F2IjNaB7HMcSDg8nQpJxyg==",
      "dev": true,
      "requires": {
        "chokidar": "^3.5.2",
        "debug": "^4",
        "ignore-by-default": "^1.0.1",
        "minimatch": "^3.1.2",
        "pstree.remy": "^1.1.8",
        "semver": "^7.5.3",
        "simple-update-notifier": "^2.0.0",
        "supports-color": "^5.5.0",
        "touch": "^3.1.0",
        "undefsafe": "^2.0.5"
      },
      "dependencies": {
        "debug": {
          "version": "4.4.0",
          "resolved": "https://registry.npmjs.org/debug/-/debug-4.4.0.tgz",
          "integrity": "sha512-6WTZ/IxCY/T6BALoZHaE4ctp9xm+Z5kY/pzYaCHRFeyVhojxlrm+46y68HA6hr0TcwEssoxNiDEUJQjfPZ/RYA==",
          "dev": true,
          "requires": {
            "ms": "^2.1.3"
          }
        },
        "ms": {
          "version": "2.1.3",
          "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.3.tgz",
          "integrity": "sha512-6FlzubTLZG3J2a/NVCAleEhjzq5oxgHyaCU9yYXvcLsvoVaHJq/s5xXI6/XXP6tz7R9xAOtHnSO/tXtF3WRTlA==",
          "dev": true
        }
      }
    },
    "normalize-path": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/normalize-path/-/normalize-path-3.0.0.tgz",
      "integrity": "sha512-6eZs5Ls3WtCisHWp9S2GUy8dqkpGi4BVSz3GaqiE6ezub0512ESztXUwUB6C6IKbQkY2Pnb/mD4WYojCRwcwLA==",
      "dev": true
    },
    "object-assign": {
      "version": "4.1.1",
      "resolved": "https://registry.npmjs.org/object-assign/-/object-assign-4.1.1.tgz",
      "integrity": "sha512-rJgTQnkUnH1sFw8yT6VSU3zD3sWmu6sZhIseY8VX+GRu3P6F7Fu+JNDoXfklElbLJSnc3FUQHVe4cU5hj+BcUg=="
    },
    "object-inspect": {
      "version": "1.13.4",
      "resolved": "https://registry.npmjs.org/object-inspect/-/object-inspect-1.13.4.tgz",
      "integrity": "sha512-W67iLl4J2EXEGTbfeHCffrjDfitvLANg0UlX3wFUUSTx92KXRFegMHUVgSqE+wvhAbi4WqjGg9czysTV2Epbew=="
    },
    "on-finished": {
      "version": "2.4.1",
      "resolved": "https://registry.npmjs.org/on-finished/-/on-finished-2.4.1.tgz",
      "integrity": "sha512-oVlzkg3ENAhCk2zdv7IJwd/QUD4z2RxRwpkcGY8psCVcCYZNq4wYnVWALHM+brtuJjePWiYF/ClmuDr8Ch5+kg==",
      "requires": {
        "ee-first": "1.1.1"
      }
    },
    "once": {
      "version": "1.4.0",
      "resolved": "https://registry.npmjs.org/once/-/once-1.4.0.tgz",
      "integrity": "sha512-lNaJgI+2Q5URQBkccEKHTQOPaXdUxnZZElQTZY0MFUAuaEqe1E+Nyvgdz/aIyNi6Z9MzO5dv1H8n58/GELp3+w==",
      "requires": {
        "wrappy": "1"
      }
    },
    "one-time": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/one-time/-/one-time-1.0.0.tgz",
      "integrity": "sha512-5DXOiRKwuSEcQ/l0kGCF6Q3jcADFv5tSmRaJck/OqkVFcOzutB134KRSfF0xDrL39MNnqxbHBbUUcjZIhTgb2g==",
      "requires": {
        "fn.name": "1.x.x"
      }
    },
    "parseurl": {
      "version": "1.3.3",
      "resolved": "https://registry.npmjs.org/parseurl/-/parseurl-1.3.3.tgz",
      "integrity": "sha512-CiyeOxFT/JZyN5m0z9PfXw4SCBJ6Sygz1Dpl0wqjlhDEGGBP1GnsUVEL0p63hoG1fcj3fHynXi9NYO4nWOL+qQ=="
    },
    "path-to-regexp": {
      "version": "0.1.12",
      "resolved": "https://registry.npmjs.org/path-to-regexp/-/path-to-regexp-0.1.12.tgz",
      "integrity": "sha512-RA1GjUVMnvYFxuqovrEqZoxxW5NUZqbwKtYz/Tt7nXerk0LbLblQmrsgdeOxV5SFHf0UDggjS/bSeOZwt1pmEQ=="
    },
    "picomatch": {
      "version": "2.3.1",
      "resolved": "https://registry.npmjs.org/picomatch/-/picomatch-2.3.1.tgz",
      "integrity": "sha512-JU3teHTNjmE2VCGFzuY8EXzCDVwEqB2a8fsIvwaStHhAWJEeVd1o1QD80CU6+ZdEXXSLbSsuLwJjkCBWqRQUVA==",
      "dev": true
    },
    "precond": {
      "version": "0.2.3",
      "resolved": "https://registry.npmjs.org/precond/-/precond-0.2.3.tgz",
      "integrity": "sha512-QCYG84SgGyGzqJ/vlMsxeXd/pgL/I94ixdNFyh1PusWmTCyVfPJjZ1K1jvHtsbfnXQs2TSkEP2fR7QiMZAnKFQ=="
    },
    "process-warning": {
      "version": "2.3.2",
      "resolved": "https://registry.npmjs.org/process-warning/-/process-warning-2.3.2.tgz",
      "integrity": "sha512-n9wh8tvBe5sFmsqlg+XQhaQLumwpqoAUruLwjCopgTmUBjJ/fjtBsJzKleCaIGBOMXYEhp1YfKl4d7rJ5ZKJGA=="
    },
    "proxy-addr": {
      "version": "2.0.7",
      "resolved": "https://registry.npmjs.org/proxy-addr/-/proxy-addr-2.0.7.tgz",
      "integrity": "sha512-llQsMLSUDUPT44jdrU/O37qlnifitDP+ZwrmmZcoSKyLKvtZxpyV0n2/bD/N4tBAAZ/gJEdZU7KMraoK1+XYAg==",
      "requires": {
        "forwarded": "0.2.0",
        "ipaddr.js": "1.9.1"
      }
    },
    "proxy-from-env": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/proxy-from-env/-/proxy-from-env-1.1.0.tgz",
      "integrity": "sha512-D+zkORCbA9f1tdWRK0RaCR3GPv50cMxcrz4X8k5LTSUD1Dkw47mKJEZQNunItRTkWwgtaUSo1RVFRIG9ZXiFYg=="
    },
    "pstree.remy": {
      "version": "1.1.8",
      "resolved": "https://registry.npmjs.org/pstree.remy/-/pstree.remy-1.1.8.tgz",
      "integrity": "sha512-77DZwxQmxKnu3aR542U+X8FypNzbfJ+C5XQDk3uWjWxn6151aIMGthWYRXTqT1E5oJvg+ljaa2OJi+VfvCOQ8w==",
      "dev": true
    },
    "punycode": {
      "version": "2.3.1",
      "resolved": "https://registry.npmjs.org/punycode/-/punycode-2.3.1.tgz",
      "integrity": "sha512-vYt7UD1U9Wg6138shLtLOvdAu+8DsC/ilFtEVHcH+wydcSpNE20AfSOduf6MkRFahL5FY7X1oU7nKVZFtfq8Fg=="
    },
    "qs": {
      "version": "6.13.0",
      "resolved": "https://registry.npmjs.org/qs/-/qs-6.13.0.tgz",
      "integrity": "sha512-+38qI9SOr8tfZ4QmJNplMUxqjbe7LKvvZgWdExBOmd+egZTtjLB67Gu0HRX3u/XOq7UU2Nx6nsjvS16Z9uwfpg==",
      "requires": {
        "side-channel": "^1.0.6"
      }
    },
    "range-parser": {
      "version": "1.2.1",
      "resolved": "https://registry.npmjs.org/range-parser/-/range-parser-1.2.1.tgz",
      "integrity": "sha512-Hrgsx+orqoygnmhFbKaHE6c296J+HTAQXoxEF6gNupROmmGJRoyzfG3ccAveqCBrwr/2yxQ5BVd/GTl5agOwSg=="
    },
    "raw-body": {
      "version": "2.5.2",
      "resolved": "https://registry.npmjs.org/raw-body/-/raw-body-2.5.2.tgz",
      "integrity": "sha512-8zGqypfENjCIqGhgXToC8aB2r7YrBX+AQAfIPs/Mlk+BtPTztOvTS01NRW/3Eh60J+a48lt8qsCzirQ6loCVfA==",
      "requires": {
        "bytes": "3.1.2",
        "http-errors": "2.0.0",
        "iconv-lite": "0.4.24",
        "unpipe": "1.0.0"
      }
    },
    "readable-stream": {
      "version": "3.6.2",
      "resolved": "https://registry.npmjs.org/readable-stream/-/readable-stream-3.6.2.tgz",
      "integrity": "sha512-9u/sniCrY3D5WdsERHzHE4G2YCXqoG5FTHUiCC4SIbr6XcLZBY05ya9EKjYek9O5xOAwjGq+1JdGBAS7Q9ScoA==",
      "requires": {
        "inherits": "^2.0.3",
        "string_decoder": "^1.1.1",
        "util-deprecate": "^1.0.1"
      }
    },
    "readdirp": {
      "version": "3.6.0",
      "resolved": "https://registry.npmjs.org/readdirp/-/readdirp-3.6.0.tgz",
      "integrity": "sha512-hOS089on8RduqdbhvQ5Z37A0ESjsqz6qnRcffsMU3495FuTdqSm+7bhJ29JvIOsBDEEnan5DPu9t3To9VRlMzA==",
      "dev": true,
      "requires": {
        "picomatch": "^2.2.1"
      }
    },
    "safe-buffer": {
      "version": "5.2.1",
      "resolved": "https://registry.npmjs.org/safe-buffer/-/safe-buffer-5.2.1.tgz",
      "integrity": "sha512-rp3So07KcdmmKbGvgaNxQSJr7bGVSVk5S9Eq1F+ppbRo70+YeaDxkw5Dd8NPN+GD6bjnYm2VuPuCXmpuYvmCXQ=="
    },
    "safe-stable-stringify": {
      "version": "2.5.0",
      "resolved": "https://registry.npmjs.org/safe-stable-stringify/-/safe-stable-stringify-2.5.0.tgz",
      "integrity": "sha512-b3rppTKm9T+PsVCBEOUR46GWI7fdOs00VKZ1+9c1EWDaDMvjQc6tUwuFyIprgGgTcWoVHSKrU8H31ZHA2e0RHA=="
    },
    "safer-buffer": {
      "version": "2.1.2",
      "resolved": "https://registry.npmjs.org/safer-buffer/-/safer-buffer-2.1.2.tgz",
      "integrity": "sha512-YZo3K82SD7Riyi0E1EQPojLz7kpepnSQI9IyPbHHg1XXXevb5dJI7tpyN2ADxGcQbHG7vcyRHk0cbwqcQriUtg=="
    },
    "semver": {
      "version": "7.7.1",
      "resolved": "https://registry.npmjs.org/semver/-/semver-7.7.1.tgz",
      "integrity": "sha512-hlq8tAfn0m/61p4BVRcPzIGr6LKiMwo4VM6dGi6pt4qcRkmNzTcWq6eCEjEh+qXjkMDvPlOFFSGwQjoEa6gyMA=="
    },
    "send": {
      "version": "0.19.0",
      "resolved": "https://registry.npmjs.org/send/-/send-0.19.0.tgz",
      "integrity": "sha512-dW41u5VfLXu8SJh5bwRmyYUbAoSB3c9uQh6L8h/KtsFREPWpbX1lrljJo186Jc4nmci/sGUZ9a0a0J2zgfq2hw==",
      "requires": {
        "debug": "2.6.9",
        "depd": "2.0.0",
        "destroy": "1.2.0",
        "encodeurl": "~1.0.2",
        "escape-html": "~1.0.3",
        "etag": "~1.8.1",
        "fresh": "0.5.2",
        "http-errors": "2.0.0",
        "mime": "1.6.0",
        "ms": "2.1.3",
        "on-finished": "2.4.1",
        "range-parser": "~1.2.1",
        "statuses": "2.0.1"
      },
      "dependencies": {
        "encodeurl": {
          "version": "1.0.2",
          "resolved": "https://registry.npmjs.org/encodeurl/-/encodeurl-1.0.2.tgz",
          "integrity": "sha512-TPJXq8JqFaVYm2CWmPvnP2Iyo4ZSM7/QKcSmuMLDObfpH5fi7RUGmd/rTDf+rut/saiDiQEeVTNgAmJEdAOx0w=="
        },
        "ms": {
          "version": "2.1.3",
          "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.3.tgz",
          "integrity": "sha512-6FlzubTLZG3J2a/NVCAleEhjzq5oxgHyaCU9yYXvcLsvoVaHJq/s5xXI6/XXP6tz7R9xAOtHnSO/tXtF3WRTlA=="
        }
      }
    },
    "serve-static": {
      "version": "1.16.2",
      "resolved": "https://registry.npmjs.org/serve-static/-/serve-static-1.16.2.tgz",
      "integrity": "sha512-VqpjJZKadQB/PEbEwvFdO43Ax5dFBZ2UECszz8bQ7pi7wt//PWe1P6MN7eCnjsatYtBT6EuiClbjSWP2WrIoTw==",
      "requires": {
        "encodeurl": "~2.0.0",
        "escape-html": "~1.0.3",
        "parseurl": "~1.3.3",
        "send": "0.19.0"
      }
    },
    "setprototypeof": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/setprototypeof/-/setprototypeof-1.2.0.tgz",
      "integrity": "sha512-E5LDX7Wrp85Kil5bhZv46j8jOeboKq5JMmYM3gVGdGH8xFpPWXUMsNrlODCrkoxMEeNi/XZIwuRvY4XNwYMJpw=="
    },
    "side-channel": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/side-channel/-/side-channel-1.1.0.tgz",
      "integrity": "sha512-ZX99e6tRweoUXqR+VBrslhda51Nh5MTQwou5tnUDgbtyM0dBgmhEDtWGP/xbKn6hqfPRHujUNwz5fy/wbbhnpw==",
      "requires": {
        "es-errors": "^1.3.0",
        "object-inspect": "^1.13.3",
        "side-channel-list": "^1.0.0",
        "side-channel-map": "^1.0.1",
        "side-channel-weakmap": "^1.0.2"
      }
    },
    "side-channel-list": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/side-channel-list/-/side-channel-list-1.0.0.tgz",
      "integrity": "sha512-FCLHtRD/gnpCiCHEiJLOwdmFP+wzCmDEkc9y7NsYxeF4u7Btsn1ZuwgwJGxImImHicJArLP4R0yX4c2KCrMrTA==",
      "requires": {
        "es-errors": "^1.3.0",
        "object-inspect": "^1.13.3"
      }
    },
    "side-channel-map": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/side-channel-map/-/side-channel-map-1.0.1.tgz",
      "integrity": "sha512-VCjCNfgMsby3tTdo02nbjtM/ewra6jPHmpThenkTYh8pG9ucZ/1P8So4u4FGBek/BjpOVsDCMoLA/iuBKIFXRA==",
      "requires": {
        "call-bound": "^1.0.2",
        "es-errors": "^1.3.0",
        "get-intrinsic": "^1.2.5",
        "object-inspect": "^1.13.3"
      }
    },
    "side-channel-weakmap": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/side-channel-weakmap/-/side-channel-weakmap-1.0.2.tgz",
      "integrity": "sha512-WPS/HvHQTYnHisLo9McqBHOJk2FkHO/tlpvldyrnem4aeQp4hai3gythswg6p01oSoTl58rcpiFAjF2br2Ak2A==",
      "requires": {
        "call-bound": "^1.0.2",
        "es-errors": "^1.3.0",
        "get-intrinsic": "^1.2.5",
        "object-inspect": "^1.13.3",
        "side-channel-map": "^1.0.1"
      }
    },
    "simple-swizzle": {
      "version": "0.2.2",
      "resolved": "https://registry.npmjs.org/simple-swizzle/-/simple-swizzle-0.2.2.tgz",
      "integrity": "sha512-JA//kQgZtbuY83m+xT+tXJkmJncGMTFT+C+g2h2R9uxkYIrE2yy9sgmcLhCnw57/WSD+Eh3J97FPEDFnbXnDUg==",
      "requires": {
        "is-arrayish": "^0.3.1"
      }
    },
    "simple-update-notifier": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/simple-update-notifier/-/simple-update-notifier-2.0.0.tgz",
      "integrity": "sha512-a2B9Y0KlNXl9u/vsW6sTIu9vGEpfKu2wRV6l1H3XEas/0gUIzGzBoP/IouTcUQbm9JWZLH3COxyn03TYlFax6w==",
      "dev": true,
      "requires": {
        "semver": "^7.5.3"
      }
    },
    "sparse-bitfield": {
      "version": "3.0.3",
      "resolved": "https://registry.npmjs.org/sparse-bitfield/-/sparse-bitfield-3.0.3.tgz",
      "integrity": "sha512-kvzhi7vqKTfkh0PZU+2D2PIllw2ymqJKujUcyPMd9Y75Nv4nPbGJZXNhxsgdQab2BmlDct1YnfQCguEvHr7VsQ==",
      "requires": {
        "memory-pager": "^1.0.2"
      }
    },
    "sprintf-js": {
      "version": "1.1.3",
      "resolved": "https://registry.npmjs.org/sprintf-js/-/sprintf-js-1.1.3.tgz",
      "integrity": "sha512-Oo+0REFV59/rz3gfJNKQiBlwfHaSESl1pcGyABQsnnIfWOFt6JNj5gCog2U6MLZ//IGYD+nA8nI+mTShREReaA=="
    },
    "stack-trace": {
      "version": "0.0.10",
      "resolved": "https://registry.npmjs.org/stack-trace/-/stack-trace-0.0.10.tgz",
      "integrity": "sha512-KGzahc7puUKkzyMt+IqAep+TVNbKP+k2Lmwhub39m1AsTSkaDutx56aDCo+HLDzf/D26BIHTJWNiTG1KAJiQCg=="
    },
    "statuses": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/statuses/-/statuses-2.0.1.tgz",
      "integrity": "sha512-RwNA9Z/7PrK06rYLIzFMlaF+l73iwpzsqRIFgbMLbTcLD6cOao82TaWefPXQvB2fOC4AjuYSEndS7N/mTCbkdQ=="
    },
    "string_decoder": {
      "version": "1.3.0",
      "resolved": "https://registry.npmjs.org/string_decoder/-/string_decoder-1.3.0.tgz",
      "integrity": "sha512-hkRX8U1WjJFd8LsDJ2yQ/wWWxaopEsABU1XfkM8A+j0+85JAGppt16cr1Whg6KIbb4okU6Mql6BOj+uup/wKeA==",
      "requires": {
        "safe-buffer": "~5.2.0"
      }
    },
    "supports-color": {
      "version": "5.5.0",
      "resolved": "https://registry.npmjs.org/supports-color/-/supports-color-5.5.0.tgz",
      "integrity": "sha512-QjVjwdXIt408MIiAqCX4oUKsgU2EqAGzs2Ppkm4aQYbjm+ZEWEcW4SfFNTr4uMNZma0ey4f5lgLrkB0aX0QMow==",
      "dev": true,
      "requires": {
        "has-flag": "^3.0.0"
      }
    },
    "text-hex": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/text-hex/-/text-hex-1.0.0.tgz",
      "integrity": "sha512-uuVGNWzgJ4yhRaNSiubPY7OjISw4sw4E5Uv0wbjp+OzcbmVU/rsT8ujgcXJhn9ypzsgr5vlzpPqP+MBBKcGvbg=="
    },
    "to-regex-range": {
      "version": "5.0.1",
      "resolved": "https://registry.npmjs.org/to-regex-range/-/to-regex-range-5.0.1.tgz",
      "integrity": "sha512-65P7iz6X5yEr1cwcgvQxbbIw7Uk3gOy5dIdtZ4rDveLqhrdJP+Li/Hx6tyK0NEb+2GCyneCMJiGqrADCSNk8sQ==",
      "dev": true,
      "requires": {
        "is-number": "^7.0.0"
      }
    },
    "toidentifier": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/toidentifier/-/toidentifier-1.0.1.tgz",
      "integrity": "sha512-o5sSPKEkg/DIQNmH43V0/uerLrpzVedkUh8tGNvaeXpfpuwjKenlSox/2O/BTlZUtEe+JG7s5YhEz608PlAHRA=="
    },
    "touch": {
      "version": "3.1.1",
      "resolved": "https://registry.npmjs.org/touch/-/touch-3.1.1.tgz",
      "integrity": "sha512-r0eojU4bI8MnHr8c5bNo7lJDdI2qXlWWJk6a9EAFG7vbhTjElYhBVS3/miuE0uOuoLdb8Mc/rVfsmm6eo5o9GA==",
      "dev": true
    },
    "tr46": {
      "version": "5.0.0",
      "resolved": "https://registry.npmjs.org/tr46/-/tr46-5.0.0.tgz",
      "integrity": "sha512-tk2G5R2KRwBd+ZN0zaEXpmzdKyOYksXwywulIX95MBODjSzMIuQnQ3m8JxgbhnL1LeVo7lqQKsYa1O3Htl7K5g==",
      "requires": {
        "punycode": "^2.3.1"
      }
    },
    "triple-beam": {
      "version": "1.4.1",
      "resolved": "https://registry.npmjs.org/triple-beam/-/triple-beam-1.4.1.tgz",
      "integrity": "sha512-aZbgViZrg1QNcG+LULa7nhZpJTZSLm/mXnHXnbAbjmN5aSa0y7V+wvv6+4WaBtpISJzThKy+PIPxc1Nq1EJ9mg=="
    },
    "ts-node": {
      "version": "10.9.2",
      "resolved": "https://registry.npmjs.org/ts-node/-/ts-node-10.9.2.tgz",
      "integrity": "sha512-f0FFpIdcHgn8zcPSbf1dRevwt047YMnaiJM3u2w2RewrB+fob/zePZcrOyQoLMMO7aBIddLcQIEK5dYjkLnGrQ==",
      "dev": true,
      "requires": {
        "@cspotcode/source-map-support": "^0.8.0",
        "@tsconfig/node10": "^1.0.7",
        "@tsconfig/node12": "^1.0.7",
        "@tsconfig/node14": "^1.0.0",
        "@tsconfig/node16": "^1.0.2",
        "acorn": "^8.4.1",
        "acorn-walk": "^8.1.1",
        "arg": "^4.1.0",
        "create-require": "^1.1.0",
        "diff": "^4.0.1",
        "make-error": "^1.1.1",
        "v8-compile-cache-lib": "^3.0.1",
        "yn": "3.1.1"
      }
    },
    "type-is": {
      "version": "1.6.18",
      "resolved": "https://registry.npmjs.org/type-is/-/type-is-1.6.18.tgz",
      "integrity": "sha512-TkRKr9sUTxEH8MdfuCSP7VizJyzRNMjj2J2do2Jr3Kym598JVdEksuzPQCnlFPW4ky9Q+iA+ma9BGm06XQBy8g==",
      "requires": {
        "media-typer": "0.3.0",
        "mime-types": "~2.1.24"
      }
    },
    "typescript": {
      "version": "5.7.3",
      "resolved": "https://registry.npmjs.org/typescript/-/typescript-5.7.3.tgz",
      "integrity": "sha512-84MVSjMEHP+FQRPy3pX9sTVV/INIex71s9TL2Gm5FG/WG1SqXeKyZ0k7/blY/4FdOzI12CBy1vGc4og/eus0fw==",
      "dev": true
    },
    "undefsafe": {
      "version": "2.0.5",
      "resolved": "https://registry.npmjs.org/undefsafe/-/undefsafe-2.0.5.tgz",
      "integrity": "sha512-WxONCrssBM8TSPRqN5EmsjVrsv4A8X12J4ArBiiayv3DyyG3ZlIg6yysuuSYdZsVz3TKcTg2fd//Ujd4CHV1iA==",
      "dev": true
    },
    "undici-types": {
      "version": "6.20.0",
      "resolved": "https://registry.npmjs.org/undici-types/-/undici-types-6.20.0.tgz",
      "integrity": "sha512-Ny6QZ2Nju20vw1SRHe3d9jVu6gJ+4e3+MMpqu7pqE5HT6WsTSlce++GQmK5UXS8mzV8DSYHrQH+Xrf2jVcuKNg=="
    },
    "unpipe": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/unpipe/-/unpipe-1.0.0.tgz",
      "integrity": "sha512-pjy2bYhSsufwWlKwPc+l3cN7+wuJlK6uz0YdJEOlQDbl6jo/YlPi4mb8agUkVC8BF7V8NuzeyPNqRksA3hztKQ=="
    },
    "util-deprecate": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/util-deprecate/-/util-deprecate-1.0.2.tgz",
      "integrity": "sha512-EPD5q1uXyFxJpCrLnCc1nHnq3gOa6DZBocAIiI2TaSCA7VCJ1UJDMagCzIkXNsUYfD1daK//LTEQ8xiIbrHtcw=="
    },
    "utils-merge": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/utils-merge/-/utils-merge-1.0.1.tgz",
      "integrity": "sha512-pMZTvIkT1d+TFGvDOqodOclx0QWkkgi6Tdoa8gC8ffGAAqz9pzPTZWAybbsHHoED/ztMtkv/VoYTYyShUn81hA=="
    },
    "v8-compile-cache-lib": {
      "version": "3.0.1",
      "resolved": "https://registry.npmjs.org/v8-compile-cache-lib/-/v8-compile-cache-lib-3.0.1.tgz",
      "integrity": "sha512-wa7YjyUGfNZngI/vtK0UHAN+lgDCxBPCylVXGp0zu59Fz5aiGtNXaq3DhIov063MorB+VfufLh3JlF2KdTK3xg==",
      "dev": true
    },
    "vary": {
      "version": "1.1.2",
      "resolved": "https://registry.npmjs.org/vary/-/vary-1.1.2.tgz",
      "integrity": "sha512-BNGbWLfd0eUPabhkXUVm0j8uuvREyTh5ovRa/dyow/BqAbZJyC+5fU+IzQOzmAKzYqYRAISoRhdQr3eIZ/PXqg=="
    },
    "vasync": {
      "version": "2.2.1",
      "resolved": "https://registry.npmjs.org/vasync/-/vasync-2.2.1.tgz",
      "integrity": "sha512-Hq72JaTpcTFdWiNA4Y22Amej2GH3BFmBaKPPlDZ4/oC8HNn2ISHLkFrJU4Ds8R3jcUi7oo5Y9jcMHKjES+N9wQ==",
      "requires": {
        "verror": "1.10.0"
      },
      "dependencies": {
        "verror": {
          "version": "1.10.0",
          "resolved": "https://registry.npmjs.org/verror/-/verror-1.10.0.tgz",
          "integrity": "sha512-ZZKSmDAEFOijERBLkmYfJ+vmk3w+7hOLYDNkRCuRuMJGEmqYNCNLyBBFwWKVMhfwaEF3WOd0Zlw86U/WC/+nYw==",
          "requires": {
            "assert-plus": "^1.0.0",
            "core-util-is": "1.0.2",
            "extsprintf": "^1.2.0"
          }
        }
      }
    },
    "verror": {
      "version": "1.10.1",
      "resolved": "https://registry.npmjs.org/verror/-/verror-1.10.1.tgz",
      "integrity": "sha512-veufcmxri4e3XSrT0xwfUR7kguIkaxBeosDg00yDWhk49wdwkSUrvvsm7nc75e1PUyvIeZj6nS8VQRYz2/S4Xg==",
      "requires": {
        "assert-plus": "^1.0.0",
        "core-util-is": "1.0.2",
        "extsprintf": "^1.2.0"
      }
    },
    "webidl-conversions": {
      "version": "7.0.0",
      "resolved": "https://registry.npmjs.org/webidl-conversions/-/webidl-conversions-7.0.0.tgz",
      "integrity": "sha512-VwddBukDzu71offAQR975unBIGqfKZpM+8ZX6ySk8nYhVoo5CYaZyzt3YBvYtRtO+aoGlqxPg/B87NGVZ/fu6g=="
    },
    "whatwg-url": {
      "version": "14.1.0",
      "resolved": "https://registry.npmjs.org/whatwg-url/-/whatwg-url-14.1.0.tgz",
      "integrity": "sha512-jlf/foYIKywAt3x/XWKZ/3rz8OSJPiWktjmk891alJUEjiVxKX9LEO92qH3hv4aJ0mN3MWPvGMCy8jQi95xK4w==",
      "requires": {
        "tr46": "^5.0.0",
        "webidl-conversions": "^7.0.0"
      }
    },
    "winston": {
      "version": "3.17.0",
      "resolved": "https://registry.npmjs.org/winston/-/winston-3.17.0.tgz",
      "integrity": "sha512-DLiFIXYC5fMPxaRg832S6F5mJYvePtmO5G9v9IgUFPhXm9/GkXarH/TUrBAVzhTCzAj9anE/+GjrgXp/54nOgw==",
      "requires": {
        "@colors/colors": "^1.6.0",
        "@dabh/diagnostics": "^2.0.2",
        "async": "^3.2.3",
        "is-stream": "^2.0.0",
        "logform": "^2.7.0",
        "one-time": "^1.0.0",
        "readable-stream": "^3.4.0",
        "safe-stable-stringify": "^2.3.1",
        "stack-trace": "0.0.x",
        "triple-beam": "^1.3.0",
        "winston-transport": "^4.9.0"
      }
    },
    "winston-transport": {
      "version": "4.9.0",
      "resolved": "https://registry.npmjs.org/winston-transport/-/winston-transport-4.9.0.tgz",
      "integrity": "sha512-8drMJ4rkgaPo1Me4zD/3WLfI/zPdA9o2IipKODunnGDcuqbHwjsbB79ylv04LCGGzU0xQ6vTznOMpQGaLhhm6A==",
      "requires": {
        "logform": "^2.7.0",
        "readable-stream": "^3.6.2",
        "triple-beam": "^1.3.0"
      }
    },
    "wrappy": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/wrappy/-/wrappy-1.0.2.tgz",
      "integrity": "sha512-l4Sp/DRseor9wL6EvV2+TuQn63dMkPjZ/sp9XkghTEbV9KlPS1xUsZ3u7/IQO4wxtcFB4bgpQPRcR3QCvezPcQ=="
    },
    "yaml": {
      "version": "1.10.2",
      "resolved": "https://registry.npmjs.org/yaml/-/yaml-1.10.2.tgz",
      "integrity": "sha512-r3vXyErRCYJ7wg28yvBY5VSoAF8ZvlcW9/BwUzEtUsjvX/DKs24dIkuwjtuprwJJHsbyUbLApepYTR1BN4uHrg=="
    },
    "yn": {
      "version": "3.1.1",
      "resolved": "https://registry.npmjs.org/yn/-/yn-3.1.1.tgz",
      "integrity": "sha512-Ux4ygGWsu2c7isFWe8Yu1YluJmqVhxqK2cLXNQA5AcC3QfbGNpM7fu0Y8b/z16pXLnFxZYvWhd3fhBY9DLmC6Q==",
      "dev": true
    }
  }
}


/USERS/AUBREYBEACH/DOCUMENTS/GITHUB/DIVE25/DIVE25/SRC/BACKEND/PACKAGE.JSON CODE IS BELOW
{
  "name": "backend",
  "version": "1.0.0",
  "description": "",
  "main": "index.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "keywords": [],
  "author": "",
  "license": "ISC",
  "dependencies": {
    "@open-policy-agent/opa-wasm": "^1.10.0",
    "axios": "^1.7.9",
    "cors": "^2.8.5",
    "dotenv": "^16.4.7",
    "express": "^4.21.2",
    "express-jwt": "^8.5.1",
    "helmet": "^8.0.0",
    "ldapjs": "^3.0.7",
    "mongodb": "^6.13.0",
    "winston": "^3.17.0"
  },
  "devDependencies": {
    "@types/express": "^5.0.0",
    "@types/node": "^22.13.1",
    "nodemon": "^3.1.9",
    "ts-node": "^10.9.2",
    "typescript": "^5.7.3"
  }
}


/USERS/AUBREYBEACH/DOCUMENTS/GITHUB/DIVE25/DIVE25/SRC/BACKEND/SRC/APP.TS CODE IS BELOW
import express from 'express';
import helmet from 'helmet';
import cors from 'cors';
import { config } from './config/config';
import { authMiddleware, extractUserAttributes } from './middleware/auth';
import { DocumentController } from './controllers/DocumentController';
import { DatabaseService } from './services/DatabaseService';
import { PartnerController } from './controllers/PartnerController';
import { MonitoringController } from './controllers/MonitoringController';

const app = express();
const monitoringController = MonitoringController.getInstance();

// Middleware
app.use(helmet());
app.use(cors());
app.use(express.json());

// Partner onboarding routes
const partnerController = PartnerController.getInstance();
app.post('/api/partners/onboard', 
  authMiddleware, 
  adminAuthMiddleware, // Add this middleware to ensure only admins can onboard partners
  (req, res) => partnerController.onboardPartner(req, res)
);

// Initialize services
const db = DatabaseService.getInstance();
db.connect().catch(console.error);

const documentController = DocumentController.getInstance();

// Routes
app.use('/api/documents', authMiddleware, extractUserAttributes);
app.get('/api/documents/:id', (req, res) => documentController.getDocument(req, res));
app.post('/api/documents/search', (req, res) => documentController.searchDocuments(req, res));

// Error handling
app.use((err: Error, req: express.Request, res: express.Response, next: express.NextFunction) => {
  console.error(err.stack);
  res.status(500).json({ error: 'Something broke!' });
});

// Monitoring routes
app.get('/api/monitoring/partners/:partnerId/metrics',
  authMiddleware,
  adminAuthMiddleware,
  (req, res) => monitoringController.getPartnerMetrics(req, res)
);

app.get('/api/monitoring/health/alerts',
  authMiddleware,
  adminAuthMiddleware,
  (req, res) => monitoringController.getHealthAlerts(req, res)
);

// Prometheus metrics endpoint
app.get('/metrics', (req, res) => {
  res.set('Content-Type', Prometheus.register.contentType);
  res.end(Prometheus.register.metrics());
});

// Start server
app.listen(config.port, () => {
  console.log(`Server running on port ${config.port}`);
});

export default app;

/USERS/AUBREYBEACH/DOCUMENTS/GITHUB/DIVE25/DIVE25/SRC/BACKEND/SRC/CONFIG/CONFIG.TS CODE IS BELOW
import dotenv from 'dotenv';
import { oauthConfig } from './pingfederate/oauth/clientConfig';
import { ldapAdapterConfig } from './pingfederate/adapters/ldapConfig';
import { authPolicyConfig } from './pingfederate/authPolicies/policyConfig';

dotenv.config();

export const config = {
  env: process.env.NODE_ENV || 'development',
  port: parseInt(process.env.PORT || '3001', 10),
  mongo: {
    uri: process.env.MONGO_URI || 'mongodb://localhost:27017/dive25',
  },
  opa: {
    url: process.env.OPA_URL || 'http://localhost:8181/v1/data/dive25/abac',
  },
  pingDirectory: {
    url: process.env.PING_DIRECTORY_URL || 'ldap://localhost:1389',
    bindDN: process.env.PING_DIRECTORY_BIND_DN || 'cn=directory manager',
    bindPassword: process.env.PING_DIRECTORY_BIND_PASSWORD || 'password',
    searchBase: process.env.PING_DIRECTORY_SEARCH_BASE || 'dc=dive25,dc=com',
  },
  pingFederate: {
    baseUrl: process.env.PING_FEDERATE_BASE_URL || 'https://pingfederate:9031',
    apiUrl: process.env.PING_FEDERATE_API_URL || 'https://pingfederate:9999/pf-admin-api/v1',
    clientId: process.env.PING_FEDERATE_CLIENT_ID || 'dive25-api',
    clientSecret: process.env.PING_FEDERATE_CLIENT_SECRET || 'your-secret',
    oauth: oauthConfig,
    ldapAdapter: ldapAdapterConfig,
    authPolicy: authPolicyConfig,
    
    // Runtime settings
    sessionValidation: {
      enabled: true,
      timeoutMinutes: 30
    },
    
    // Federation settings
    federation: {
      baseProtocol: 'SAML',
      defaultTargetUrl: process.env.DEFAULT_TARGET_URL || 'https://dive25.local',
      assertionLifetime: 5,
      signatureAlgorithm: 'RSA_SHA256',
      digestAlgorithm: 'SHA256'
    }
  },
  jwt: {
    secret: process.env.JWT_SECRET || 'your-secret-key',
    audience: process.env.JWT_AUDIENCE || 'dive25-api',
    issuer: process.env.JWT_ISSUER || 'pingfederate',
  }
};

/USERS/AUBREYBEACH/DOCUMENTS/GITHUB/DIVE25/DIVE25/SRC/BACKEND/SRC/CONFIG/PINGFEDERATE/ADAPTERS/LDAPCONFIG.TS CODE IS BELOW
export const ldapAdapterConfig = {
    attributeContractFulfillment: {
      uniqueIdentifier: {
        source: 'LDAP',
        value: 'uid'
      },
      countryOfAffiliation: {
        source: 'LDAP',
        value: 'c'
      },
      clearance: {
        source: 'LDAP',
        value: 'clearanceLevel'
      },
      coiTags: {
        source: 'LDAP',
        value: 'coiMembership'
      },
      lacvCode: {
        source: 'LDAP',
        value: 'lacvCodeAttr'
      },
      organizationalAffiliation: {
        source: 'LDAP',
        value: 'o'
      }
    },
    
    attributeSources: [
      {
        type: 'LDAP',
        attributeContractFulfillment: {
          'clearanceLevel': {
            source: 'LDAP',
            value: 'clearanceLevel'
          },
          'coiMembership': {
            source: 'LDAP',
            value: 'coiMembership'
          }
        }
      }
    ]
  };

/USERS/AUBREYBEACH/DOCUMENTS/GITHUB/DIVE25/DIVE25/SRC/BACKEND/SRC/CONFIG/PINGFEDERATE/AUTHPOLICIES/POLICYCONFIG.TS CODE IS BELOW
export const authPolicyConfig = {
    authnSelectionTrees: [
      {
        name: 'NATO Authentication',
        rootNode: {
          action: 'AUTHENTICATE',
          configuration: {
            authnSources: [
              {
                type: 'IDP_ADAPTER',
                sourceRef: {
                  id: 'OIDCAdapter'
                }
              }
            ]
          }
        }
      }
    ],
    
    failureHandling: {
      mode: 'RESTART_AUTHENTICATION',
      maxAttempts: 3,
      lockoutPeriod: 300
    },
    
    sessionValidation: {
      enforceSignOnPolicies: true,
      enableSessions: true,
      idleTimeoutMins: 30,
      maxTimeoutMins: 480
    }
  };

/USERS/AUBREYBEACH/DOCUMENTS/GITHUB/DIVE25/DIVE25/SRC/BACKEND/SRC/CONFIG/PINGFEDERATE/OAUTH/CLIENTCONFIG.TS CODE IS BELOW
export const oauthConfig = {
    authorizationEndpoint: '/as/authorization.oauth2',
    tokenEndpoint: '/as/token.oauth2',
    userInfoEndpoint: '/as/userinfo.oauth2',
    endSessionEndpoint: '/as/revoke_token.oauth2',
    
    // Required scopes for our application
    requiredScopes: [
      'openid',
      'profile',
      'clearance',
      'country',
      'coi',
      'lacv'
    ],
  
    // Claims mapping
    claimsMappings: {
      uniqueIdentifier: 'uid',
      countryOfAffiliation: 'country',
      clearance: 'clearance',
      coiTags: 'coi',
      lacvCode: 'lacv',
      organizationalAffiliation: 'org'
    }
  };

/USERS/AUBREYBEACH/DOCUMENTS/GITHUB/DIVE25/DIVE25/SRC/BACKEND/SRC/CONTROLLERS/DOCUMENTCONTROLLER.TS CODE IS BELOW
import { Request, Response } from 'express';
import { DatabaseService } from '../services/DatabaseService';
import { OPAService } from '../services/OPAService';
import { Document } from '../models/Document';

export class DocumentController {
  private static instance: DocumentController;
  private db: DatabaseService;
  private opa: OPAService;

  private constructor() {
    this.db = DatabaseService.getInstance();
    this.opa = OPAService.getInstance();
  }

  public static getInstance(): DocumentController {
    if (!DocumentController.instance) {
      DocumentController.instance = new DocumentController();
    }
    return DocumentController.instance;
  }

  async getDocument(req: Request, res: Response): Promise<void> {
    try {
      const documentId = req.params.id;
      const document = await this.db.getDocument(documentId);
      
      if (!document) {
        res.status(404).json({ error: 'Document not found' });
        return;
      }

      const accessResult = await this.opa.evaluateAccess(
        req.userAttributes,
        {
          clearance: document.clearance,
          releasableTo: document.releasableTo,
          coiTags: document.coiTags,
          lacvCode: document.lacvCode
        }
      );
      
      if (!accessResult.allow) {
        res.status(403).json({ 
          error: 'Access denied',
          reason: accessResult.reason
        });
        return;
      }

      res.json({ document });
    } catch (error) {
      console.error('Error retrieving document:', error);
      res.status(500).json({ error: 'Internal server error' });
    }
  }

  async searchDocuments(req: Request, res: Response): Promise<void> {
    try {
      const searchQuery = req.body.query || {};
      const documents = await this.db.searchDocuments(searchQuery);
      
      const accessibleDocuments = await Promise.all(
        documents.map(async (doc) => {
          const accessResult = await this.opa.evaluateAccess(
            req.userAttributes,
            {
              clearance: doc.clearance,
              releasableTo: doc.releasableTo,
              coiTags: doc.coiTags,
              lacvCode: doc.lacvCode
            }
          );
          return accessResult.allow ? doc : null;
        })
      );

      res.json({
        documents: accessibleDocuments.filter(doc => doc !== null)
      });
    } catch (error) {
      console.error('Error searching documents:', error);
      res.status(500).json({ error: 'Internal server error' });
    }
  }
}

/USERS/AUBREYBEACH/DOCUMENTS/GITHUB/DIVE25/DIVE25/SRC/BACKEND/SRC/CONTROLLERS/MONITORINGCONTROLLER.TS CODE IS BELOW
// src/controllers/MonitoringController.ts
import { Request, Response } from 'express';
import { FederationMonitoringService } from '../services/FederationMonitoringService';

export class MonitoringController {
  private static instance: MonitoringController;
  private monitoringService: FederationMonitoringService;

  private constructor() {
    this.monitoringService = FederationMonitoringService.getInstance();
  }

  public static getInstance(): MonitoringController {
    if (!MonitoringController.instance) {
      MonitoringController.instance = new MonitoringController();
    }
    return MonitoringController.instance;
  }

  async getPartnerMetrics(req: Request, res: Response): Promise<void> {
    try {
      const { partnerId } = req.params;
      const metrics = await this.monitoringService.getPartnerMetrics(partnerId);
      res.json(metrics);
    } catch (error) {
      console.error('Error fetching partner metrics:', error);
      res.status(500).json({
        error: 'Failed to fetch partner metrics',
        details: error.message
      });
    }
  }

  async getHealthAlerts(req: Request, res: Response): Promise<void> {
    try {
      const alerts = await this.monitoringService.getHealthAlerts();
      res.json(alerts);
    } catch (error) {
      console.error('Error fetching health alerts:', error);
      res.status(500).json({
        error: 'Failed to fetch health alerts',
        details: error.message
      });
    }
  }
}

/USERS/AUBREYBEACH/DOCUMENTS/GITHUB/DIVE25/DIVE25/SRC/BACKEND/SRC/CONTROLLERS/PARTNERCONTROLLER.TS CODE IS BELOW
import { Request, Response } from 'express';
import { FederationPartnerService, PartnerConfig } from '../services/FederationPartnerService';
import { OAuthClientService, OAuthClientConfig } from '../services/OAuthClientService';
import { MetadataValidationService } from '../services/MetadataValidationService';
import { SessionManagementService } from '../services/SessionManagementService';
import { LoggerService } from '../services/LoggerService';

export class PartnerController {
    private static instance: PartnerController;
    private federationService: FederationPartnerService;
    private oauthService: OAuthClientService;
    private metadataValidator: MetadataValidationService;
    private sessionManager: SessionManagementService;
    private logger: LoggerService;

    private constructor() {
        this.federationService = FederationPartnerService.getInstance();
        this.oauthService = OAuthClientService.getInstance();
        this.metadataValidator = MetadataValidationService.getInstance();
        this.sessionManager = SessionManagementService.getInstance();
        this.logger = LoggerService.getInstance();
    }

    public static getInstance(): PartnerController {
        if (!PartnerController.instance) {
            PartnerController.instance = new PartnerController();
        }
        return PartnerController.instance;
    }

    async onboardPartner(req: Request, res: Response): Promise<void> {
        try {
            const { partnerConfig, oauthConfig } = req.body;

            // Validate request body
            this.validatePartnerConfig(partnerConfig);
            this.validateOAuthConfig(oauthConfig);

            // Validate metadata first
            const validationResult = await this.metadataValidator.validateMetadata(
                partnerConfig.metadata.url
            );

            if (!validationResult.valid) {
                this.logger.error('Invalid partner metadata', { validationResult });
                res.status(400).json({
                    error: 'Invalid partner metadata',
                    validationResult
                });
                return;
            }

            // Create OAuth client
            const oauthClient = await this.oauthService.createOAuthClient(oauthConfig);

            // Onboard federation partner
            const partnerConnection = await this.federationService.onboardPartner({
                ...partnerConfig,
                oauthClientId: oauthClient.clientId
            });

            this.logger.info('Partner onboarded successfully', {
                partnerId: partnerConfig.partnerId,
                connectionId: partnerConnection.id
            });

            res.status(200).json({
                message: 'Partner onboarded successfully',
                oauthClient,
                partnerConnection
            });
        } catch (error) {
            this.logger.error('Partner onboarding error', { error });
            res.status(500).json({
                error: 'Partner onboarding failed',
                details: error.message
            });
        }
    }

    async validatePartnerMetadata(req: Request, res: Response): Promise<void> {
        try {
            const { metadataUrl } = req.body;
            
            if (!metadataUrl) {
                res.status(400).json({
                    error: 'Metadata URL is required'
                });
                return;
            }

            const validationResult = await this.metadataValidator.validateMetadata(metadataUrl);

            if (!validationResult.valid) {
                res.status(400).json({
                    valid: false,
                    errors: validationResult.errors,
                    warnings: validationResult.warnings
                });
                return;
            }

            this.logger.info('Metadata validation successful', { metadataUrl });
            res.status(200).json(validationResult);
        } catch (error) {
            this.logger.error('Metadata validation error', { error });
            res.status(500).json({
                error: 'Metadata validation failed',
                details: error.message
            });
        }
    }

    async getPartnerDetails(req: Request, res: Response): Promise<void> {
        try {
            const { partnerId } = req.params;
            const partner = await this.federationService.getPartner(partnerId);

            if (!partner) {
                res.status(404).json({
                    error: 'Partner not found'
                });
                return;
            }

            const oauthClient = await this.oauthService.getOAuthClient(partner.oauthClientId);
            const sessionStats = await this.sessionManager.getPartnerSessionStats(partnerId);

            res.status(200).json({
                partner,
                oauthClient,
                sessionStats
            });
        } catch (error) {
            this.logger.error('Error retrieving partner details', { error });
            res.status(500).json({
                error: 'Failed to retrieve partner details',
                details: error.message
            });
        }
    }

    async updatePartner(req: Request, res: Response): Promise<void> {
        try {
            const { partnerId } = req.params;
            const updateConfig = req.body;

            // Validate update config
            if (updateConfig.metadata?.url) {
                const validationResult = await this.metadataValidator.validateMetadata(
                    updateConfig.metadata.url
                );

                if (!validationResult.valid) {
                    res.status(400).json({
                        error: 'Invalid metadata in update',
                        validationResult
                    });
                    return;
                }
            }

            const updatedPartner = await this.federationService.updatePartner(
                partnerId,
                updateConfig
            );

            this.logger.info('Partner updated successfully', { partnerId });
            res.status(200).json(updatedPartner);
        } catch (error) {
            this.logger.error('Partner update error', { error });
            res.status(500).json({
                error: 'Failed to update partner',
                details: error.message
            });
        }
    }

    async deactivatePartner(req: Request, res: Response): Promise<void> {
        try {
            const { partnerId } = req.params;
            const { reason } = req.body;

            await this.federationService.deactivatePartner(partnerId, reason);
            await this.sessionManager.terminatePartnerSessions(partnerId);

            this.logger.info('Partner deactivated', { partnerId, reason });
            res.status(200).json({
                message: 'Partner deactivated successfully'
            });
        } catch (error) {
            this.logger.error('Partner deactivation error', { error });
            res.status(500).json({
                error: 'Failed to deactivate partner',
                details: error.message
            });
        }
    }

    async reactivatePartner(req: Request, res: Response): Promise<void> {
        try {
            const { partnerId } = req.params;
            
            // Validate partner status before reactivation
            const validationResult = await this.federationService.validatePartnerStatus(partnerId);
            
            if (!validationResult.canReactivate) {
                res.status(400).json({
                    error: 'Partner cannot be reactivated',
                    reasons: validationResult.reasons
                });
                return;
            }

            await this.federationService.reactivatePartner(partnerId);

            this.logger.info('Partner reactivated', { partnerId });
            res.status(200).json({
                message: 'Partner reactivated successfully'
            });
        } catch (error) {
            this.logger.error('Partner reactivation error', { error });
            res.status(500).json({
                error: 'Failed to reactivate partner',
                details: error.message
            });
        }
    }

    private validatePartnerConfig(config: PartnerConfig): void {
        const requiredFields = ['partnerId', 'partnerName', 'federationType', 'metadata'];
        for (const field of requiredFields) {
            if (!config[field]) {
                throw new Error(`Missing required field: ${field}`);
            }
        }

        if (!['SAML', 'OIDC'].includes(config.federationType)) {
            throw new Error('Invalid federation type. Must be either SAML or OIDC');
        }
    }

    private validateOAuthConfig(config: OAuthClientConfig): void {
        const requiredFields = ['clientId', 'name', 'grantTypes', 'redirectUris'];
        for (const field of requiredFields) {
            if (!config[field]) {
                throw new Error(`Missing required field: ${field}`);
            }
        }

        const validGrantTypes = ['authorization_code', 'client_credentials', 'refresh_token'];
        for (const grant of config.grantTypes) {
            if (!validGrantTypes.includes(grant)) {
                throw new Error(`Invalid grant type: ${grant}`);
            }
        }
    }
}

export default PartnerController;

/USERS/AUBREYBEACH/DOCUMENTS/GITHUB/DIVE25/DIVE25/SRC/BACKEND/SRC/MIDDLEWARE/AUTH.TS CODE IS BELOW
import { Request, Response, NextFunction } from 'express';
import { PingFederateService } from '../services/PingFederateService';

export const authMiddleware = async (req: Request, res: Response, next: NextFunction) => {
  const authHeader = req.headers.authorization;
  if (!authHeader || !authHeader.startsWith('Bearer ')) {
    return res.status(401).json({ error: 'No token provided' });
  }

  const token = authHeader.split(' ')[1];
  const pingFedService = PingFederateService.getInstance();

  try {
    const userInfo = await pingFedService.validateToken(token);
    req.userAttributes = userInfo;
    next();
  } catch (error) {
    console.error('Authentication error:', error);
    res.status(401).json({ error: 'Invalid token' });
  }
};

export interface UserAttributes {
  clearance: string;
  countryOfAffiliation: string;
  caveats: string[];
  organizationalAffiliation: string;
}

export const extractUserAttributes = (req: Request, res: Response, next: NextFunction) => {
  const token = req.headers.authorization?.split(' ')[1];
  if (!token) {
    return res.status(401).json({ error: 'No token provided' });
  }

  try {
    // In production, these would come from PingFederate token claims
    req.userAttributes = {
      clearance: req.headers['x-user-clearance'] as string,
      countryOfAffiliation: req.headers['x-user-country'] as string,
      caveats: (req.headers['x-user-caveats'] as string || '').split(','),
      organizationalAffiliation: req.headers['x-user-org'] as string,
    };
    next();
  } catch (error) {
    return res.status(401).json({ error: 'Invalid token' });
  }
};

/USERS/AUBREYBEACH/DOCUMENTS/GITHUB/DIVE25/DIVE25/SRC/BACKEND/SRC/MIDDLEWARE/DOCUMENTVALIDATION.TS CODE IS BELOW
import { Request, Response, NextFunction } from 'express';
import { ValidClearanceLevels, ValidReleasabilityMarkers, ValidCoiTags, ValidLacvCodes } from '../models/Document';

export const validateDocument = (req: Request, res: Response, next: NextFunction) => {
  const { clearance, releasableTo, coiTags, lacvCode } = req.body;

  // Validate clearance
  if (!ValidClearanceLevels.includes(clearance)) {
    return res.status(400).json({
      error: 'Invalid clearance level',
      validLevels: ValidClearanceLevels
    });
  }

  // Validate releasability
  if (!Array.isArray(releasableTo) || !releasableTo.every(marker => 
    ValidReleasabilityMarkers.includes(marker))) {
    return res.status(400).json({
      error: 'Invalid releasability markers',
      validMarkers: ValidReleasabilityMarkers
    });
  }

  // Validate COI tags if present
  if (coiTags && (!Array.isArray(coiTags) || !coiTags.every(tag => 
    ValidCoiTags.includes(tag)))) {
    return res.status(400).json({
      error: 'Invalid COI tags',
      validTags: ValidCoiTags
    });
  }

  // Validate LACV code if present
  if (lacvCode && !ValidLacvCodes.includes(lacvCode)) {
    return res.status(400).json({
      error: 'Invalid LACV code',
      validCodes: ValidLacvCodes
    });
  }

  next();
};

/USERS/AUBREYBEACH/DOCUMENTS/GITHUB/DIVE25/DIVE25/SRC/BACKEND/SRC/MODELS/DOCUMENT.TS CODE IS BELOW
import { ObjectId } from 'mongodb';

export interface Document {
  _id?: ObjectId;
  title: string;
  clearance: string;
  releasableTo: string[];
  coiTags?: string[];
  lacvCode?: string;
  metadata: {
    createdAt: Date;
    createdBy: string;
    lastModified: Date;
    version: number;
  };
  content: {
    location: string;
    hash: string;
  };
}

export const ValidClearanceLevels = [
  'UNCLASSIFIED',
  'RESTRICTED',
  'NATO CONFIDENTIAL',
  'NATO SECRET',
  'COSMIC TOP SECRET'
] as const;

export const ValidReleasabilityMarkers = [
  'NATO',
  'EU',
  'FVEY',
  'PARTNERX'
] as const;

export const ValidCoiTags = [
  'OpAlpha',
  'OpBravo',
  'OpGamma',
  'MissionX',
  'MissionZ'
] as const;

export const ValidLacvCodes = [
  'LACV001',
  'LACV002',
  'LACV003',
  'LACV004'
] as const;

/USERS/AUBREYBEACH/DOCUMENTS/GITHUB/DIVE25/DIVE25/SRC/BACKEND/SRC/SERVICES/DATABASESERVICE.TS CODE IS BELOW
import { MongoClient, Db, Collection } from 'mongodb';
import { config } from '../config/config';
import { Document } from '../models/Document';

export class DatabaseService {
  private static instance: DatabaseService;
  private client: MongoClient;
  private db: Db | null = null;

  private constructor() {
    this.client = new MongoClient(config.mongo.uri);
  }

  public static getInstance(): DatabaseService {
    if (!DatabaseService.instance) {
      DatabaseService.instance = new DatabaseService();
    }
    return DatabaseService.instance;
  }

  async connect(): Promise<void> {
    try {
      await this.client.connect();
      this.db = this.client.db('dive25');
      console.log('Connected to MongoDB');
    } catch (error) {
      console.error('MongoDB connection error:', error);
      throw error;
    }
  }

  async getDocument(id: string): Promise<Document | null> {
    if (!this.db) throw new Error('Database not connected');
    const collection = this.db.collection<Document>('documents');
    return await collection.findOne({ _id: new ObjectId(id) });
  }

  async searchDocuments(query: any): Promise<Document[]> {
    if (!this.db) throw new Error('Database not connected');
    const collection = this.db.collection<Document>('documents');
    return await collection.find(query).toArray();
  }
}

/USERS/AUBREYBEACH/DOCUMENTS/GITHUB/DIVE25/DIVE25/SRC/BACKEND/SRC/SERVICES/FEDERATIONMONITORINGSERVICE.TS CODE IS BELOW
// src/services/FederationMonitoringService.ts
import { Redis } from 'ioredis';
import { Prometheus } from 'prom-client';
import { config } from '../config/config';

export interface FederationMetrics {
  activePartners: number;
  totalSessions: number;
  authenticationAttempts: number;
  failedAuthentications: number;
  averageResponseTime: number;
}

export interface PartnerHealth {
  partnerId: string;
  status: 'healthy' | 'degraded' | 'down';
  lastChecked: Date;
  responseTime: number;
  errorCount: number;
  successRate: number;
}

export class FederationMonitoringService {
  private static instance: FederationMonitoringService;
  private redis: Redis;
  
  // Prometheus metrics
  private authAttempts: Prometheus.Counter;
  private authFailures: Prometheus.Counter;
  private responseTime: Prometheus.Histogram;
  private activeSessions: Prometheus.Gauge;
  private partnerHealth: Prometheus.Gauge;

  private constructor() {
    this.redis = new Redis(config.redis);
    this.initializeMetrics();
  }

  private initializeMetrics(): void {
    this.authAttempts = new Prometheus.Counter({
      name: 'federation_auth_attempts_total',
      help: 'Total number of federation authentication attempts',
      labelNames: ['partner_id', 'auth_method']
    });

    this.authFailures = new Prometheus.Counter({
      name: 'federation_auth_failures_total',
      help: 'Total number of failed federation authentications',
      labelNames: ['partner_id', 'failure_reason']
    });

    this.responseTime = new Prometheus.Histogram({
      name: 'federation_response_time_seconds',
      help: 'Federation endpoint response time in seconds',
      labelNames: ['partner_id', 'endpoint'],
      buckets: [0.1, 0.5, 1, 2, 5]
    });

    this.activeSessions = new Prometheus.Gauge({
      name: 'federation_active_sessions',
      help: 'Number of active federated sessions',
      labelNames: ['partner_id']
    });

    this.partnerHealth = new Prometheus.Gauge({
      name: 'federation_partner_health',
      help: 'Federation partner health status (0=down, 1=degraded, 2=healthy)',
      labelNames: ['partner_id']
    });
  }

  public static getInstance(): FederationMonitoringService {
    if (!FederationMonitoringService.instance) {
      FederationMonitoringService.instance = new FederationMonitoringService();
    }
    return FederationMonitoringService.instance;
  }

  async recordAuthenticationAttempt(partnerId: string, authMethod: string, success: boolean, failureReason?: string): Promise<void> {
    this.authAttempts.inc({ partner_id: partnerId, auth_method: authMethod });
    
    if (!success) {
      this.authFailures.inc({ partner_id: partnerId, failure_reason: failureReason });
    }

    // Update Redis for real-time monitoring
    const key = `auth:${partnerId}:${Date.now()}`;
    await this.redis.setex(key, 86400, JSON.stringify({
      timestamp: Date.now(),
      success,
      failureReason,
      authMethod
    }));
  }

  async updatePartnerHealth(partnerId: string, health: PartnerHealth): Promise<void> {
    const healthScore = health.status === 'healthy' ? 2 : health.status === 'degraded' ? 1 : 0;
    this.partnerHealth.set({ partner_id: partnerId }, healthScore);

    // Store detailed health data in Redis
    await this.redis.setex(
      `partner:health:${partnerId}`,
      300,
      JSON.stringify(health)
    );
  }

  async recordResponseTime(partnerId: string, endpoint: string, timeMs: number): Promise<void> {
    this.responseTime.observe({ partner_id: partnerId, endpoint }, timeMs / 1000);

    // Store in Redis for trend analysis
    const key = `response:${partnerId}:${endpoint}:${Date.now()}`;
    await this.redis.setex(key, 3600, timeMs.toString());
  }

  async updateSessionCount(partnerId: string, count: number): Promise<void> {
    this.activeSessions.set({ partner_id: partnerId }, count);
  }

  async getPartnerMetrics(partnerId: string): Promise<FederationMetrics> {
    // Aggregate metrics for the partner
    const [
      sessions,
      authAttempts,
      failures,
      responseTimes
    ] = await Promise.all([
      this.redis.keys(`session:${partnerId}:*`),
      this.redis.keys(`auth:${partnerId}:*`),
      this.redis.keys(`auth:${partnerId}:*:failure`),
      this.redis.keys(`response:${partnerId}:*`)
    ]);

    // Calculate average response time
    const times = await Promise.all(
      responseTimes.map(key => this.redis.get(key))
    );
    const avgResponseTime = times.length > 0
      ? times.reduce((acc, time) => acc + parseInt(time || '0'), 0) / times.length
      : 0;

    return {
      activePartners: 1,
      totalSessions: sessions.length,
      authenticationAttempts: authAttempts.length,
      failedAuthentications: failures.length,
      averageResponseTime: avgResponseTime
    };
  }

  async getHealthAlerts(): Promise<any[]> {
    const alerts = [];
    const partners = await this.redis.keys('partner:health:*');
    
    for (const partnerKey of partners) {
      const healthData = await this.redis.get(partnerKey);
      if (healthData) {
        const health: PartnerHealth = JSON.parse(healthData);
        if (health.status !== 'healthy') {
          alerts.push({
            partnerId: health.partnerId,
            status: health.status,
            lastChecked: health.lastChecked,
            errorCount: health.errorCount
          });
        }
      }
    }
    
    return alerts;
  }
}

/USERS/AUBREYBEACH/DOCUMENTS/GITHUB/DIVE25/DIVE25/SRC/BACKEND/SRC/SERVICES/FEDERATIONPARTNERSERVICE.TS CODE IS BELOW
// src/services/FederationPartnerService.ts
import axios from 'axios';
import { config } from '../config/config';

export interface PartnerConfig {
  partnerId: string;
  partnerName: string;
  federationType: 'SAML' | 'OIDC';
  metadata: {
    url?: string;
    content?: string;
  };
  attributeMapping: {
    [key: string]: string;
  };
  contactInfo: {
    technical: {
      name: string;
      email: string;
    };
    administrative: {
      name: string;
      email: string;
    };
  };
}

export class FederationPartnerService {
  private static instance: FederationPartnerService;
  private baseUrl: string;
  private adminApiToken: string;

  private constructor() {
    this.baseUrl = config.pingFederate.apiUrl;
    this.adminApiToken = config.pingFederate.adminApiToken;
  }

  public static getInstance(): FederationPartnerService {
    if (!FederationPartnerService.instance) {
      FederationPartnerService.instance = new FederationPartnerService();
    }
    return FederationPartnerService.instance;
  }

  async onboardPartner(partnerConfig: PartnerConfig): Promise<any> {
    try {
      // 1. Create connection
      const connection = await this.createPartnerConnection(partnerConfig);
      
      // 2. Configure attribute mapping
      await this.configureAttributeMapping(connection.id, partnerConfig.attributeMapping);
      
      // 3. Enable connection
      await this.enableConnection(connection.id);

      return connection;
    } catch (error) {
      console.error('Error onboarding partner:', error);
      throw error;
    }
  }

  private async createPartnerConnection(config: PartnerConfig): Promise<any> {
    const connectionConfig = this.buildConnectionConfig(config);
    const response = await axios.post(
      `${this.baseUrl}/idp/connections`,
      connectionConfig,
      {
        headers: {
          'Authorization': `Bearer ${this.adminApiToken}`,
          'Content-Type': 'application/json'
        }
      }
    );
    return response.data;
  }

  private buildConnectionConfig(config: PartnerConfig): any {
    if (config.federationType === 'SAML') {
      return {
        type: 'SAML20',
        name: config.partnerName,
        entityId: `urn:${config.partnerId}`,
        metadata: config.metadata,
        credentials: {
          signingSettings: {
            signingKeyPairRef: {
              id: 'default'
            }
          }
        },
        contactInfo: config.contactInfo
      };
    } else {
      return {
        type: 'OIDC',
        name: config.partnerName,
        issuer: config.metadata.url,
        authorizeEndpoint: `${config.metadata.url}/authorize`,
        tokenEndpoint: `${config.metadata.url}/token`,
        userInfoEndpoint: `${config.metadata.url}/userinfo`,
        contactInfo: config.contactInfo
      };
    }
  }

  private async configureAttributeMapping(connectionId: string, mapping: any): Promise<void> {
    await axios.put(
      `${this.baseUrl}/idp/connections/${connectionId}/attributes`,
      {
        attributeContractFulfillment: this.buildAttributeMapping(mapping)
      },
      {
        headers: {
          'Authorization': `Bearer ${this.adminApiToken}`,
          'Content-Type': 'application/json'
        }
      }
    );
  }

  private buildAttributeMapping(mapping: any): any {
    const attributeMapping: any = {};
    for (const [key, value] of Object.entries(mapping)) {
      attributeMapping[key] = {
        source: {
          type: 'ASSERTION',
          attributeName: value
        }
      };
    }
    return attributeMapping;
  }

  private async enableConnection(connectionId: string): Promise<void> {
    await axios.put(
      `${this.baseUrl}/idp/connections/${connectionId}/status`,
      {
        status: 'ACTIVE'
      },
      {
        headers: {
          'Authorization': `Bearer ${this.adminApiToken}`,
          'Content-Type': 'application/json'
        }
      }
    );
  }
}

/USERS/AUBREYBEACH/DOCUMENTS/GITHUB/DIVE25/DIVE25/SRC/BACKEND/SRC/SERVICES/METADATAVALIDATIONSERVICE.TS CODE IS BELOW
// src/services/MetadataValidationService.ts
import { DOMParser, XMLSerializer } from 'xmldom';
import { SignedXml, FileKeyInfo } from 'xml-crypto';
import axios from 'axios';
import { X509Certificate } from 'crypto';

export interface MetadataValidationResult {
  valid: boolean;
  errors: string[];
  warnings: string[];
  entityId?: string;
  endpoints?: {
    sso?: string;
    slo?: string;
    artifact?: string;
  };
  certificates?: {
    signing?: string[];
    encryption?: string[];
  };
}

export class MetadataValidationService {
  private static instance: MetadataValidationService;

  private constructor() {}

  public static getInstance(): MetadataValidationService {
    if (!MetadataValidationService.instance) {
      MetadataValidationService.instance = new MetadataValidationService();
    }
    return MetadataValidationService.instance;
  }

  async validateMetadata(metadataUrl: string): Promise<MetadataValidationResult> {
    try {
      const metadata = await this.fetchMetadata(metadataUrl);
      return this.validateMetadataContent(metadata);
    } catch (error) {
      return {
        valid: false,
        errors: [`Failed to fetch metadata: ${error.message}`],
        warnings: []
      };
    }
  }

  async validateMetadataContent(metadata: string): Promise<MetadataValidationResult> {
    const result: MetadataValidationResult = {
      valid: true,
      errors: [],
      warnings: []
    };

    try {
      const doc = new DOMParser().parseFromString(metadata);
      
      // Validate XML structure
      if (!doc.documentElement) {
        result.errors.push('Invalid XML document');
        result.valid = false;
        return result;
      }

      // Extract and validate entityID
      const entityId = doc.documentElement.getAttribute('entityID');
      if (!entityId) {
        result.errors.push('Missing entityID attribute');
        result.valid = false;
      } else {
        result.entityId = entityId;
      }

      // Validate endpoints
      result.endpoints = this.extractEndpoints(doc);
      if (!result.endpoints.sso) {
        result.errors.push('Missing SSO endpoint');
        result.valid = false;
      }

      // Extract and validate certificates
      result.certificates = this.extractCertificates(doc);
      if (!result.certificates.signing || result.certificates.signing.length === 0) {
        result.errors.push('Missing signing certificate');
        result.valid = false;
      }

      // Validate certificate expiration
      for (const cert of result.certificates.signing || []) {
        const certObj = new X509Certificate(cert);
        const expiryDate = new Date(certObj.validTo);
        if (expiryDate < new Date()) {
          result.errors.push('Signing certificate has expired');
          result.valid = false;
        } else if (expiryDate < new Date(Date.now() + 30 * 24 * 60 * 60 * 1000)) {
          result.warnings.push('Signing certificate will expire within 30 days');
        }
      }

    } catch (error) {
      result.errors.push(`Metadata validation error: ${error.message}`);
      result.valid = false;
    }

    return result;
  }

  private async fetchMetadata(url: string): Promise<string> {
    const response = await axios.get(url);
    return response.data;
  }

  private extractEndpoints(doc: Document): any {
    const endpoints: any = {};
    const idpDescriptor = doc.getElementsByTagNameNS(
      'urn:oasis:names:tc:SAML:2.0:metadata',
      'IDPSSODescriptor'
    )[0];

    if (idpDescriptor) {
      // Extract SSO endpoint
      const ssoElements = idpDescriptor.getElementsByTagNameNS(
        'urn:oasis:names:tc:SAML:2.0:metadata',
        'SingleSignOnService'
      );
      for (let i = 0; i < ssoElements.length; i++) {
        const binding = ssoElements[i].getAttribute('Binding');
        if (binding === 'urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect') {
          endpoints.sso = ssoElements[i].getAttribute('Location');
          break;
        }
      }

      // Extract SLO endpoint
      const sloElements = idpDescriptor.getElementsByTagNameNS(
        'urn:oasis:names:tc:SAML:2.0:metadata',
        'SingleLogoutService'
      );
      for (let i = 0; i < sloElements.length; i++) {
        const binding = sloElements[i].getAttribute('Binding');
        if (binding === 'urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect') {
          endpoints.slo = sloElements[i].getAttribute('Location');
          break;
        }
      }
    }

    return endpoints;
  }

  private extractCertificates(doc: Document): any {
    const certificates: any = {
      signing: [],
      encryption: []
    };

    const idpDescriptor = doc.getElementsByTagNameNS(
      'urn:oasis:names:tc:SAML:2.0:metadata',
      'IDPSSODescriptor'
    )[0];

    if (idpDescriptor) {
      // Extract signing certificates
      const keyDescriptors = idpDescriptor.getElementsByTagNameNS(
        'urn:oasis:names:tc:SAML:2.0:metadata',
        'KeyDescriptor'
      );

      for (let i = 0; i < keyDescriptors.length; i++) {
        const use = keyDescriptors[i].getAttribute('use');
        const certData = keyDescriptors[i].getElementsByTagNameNS(
          'http://www.w3.org/2000/09/xmldsig#',
          'X509Certificate'
        )[0]?.textContent?.trim();

        if (certData) {
          if (use === 'signing' || !use) {
            certificates.signing.push(certData);
          }
          if (use === 'encryption' || !use) {
            certificates.encryption.push(certData);
          }
        }
      }
    }

    return certificates;
  }
}

/USERS/AUBREYBEACH/DOCUMENTS/GITHUB/DIVE25/DIVE25/SRC/BACKEND/SRC/SERVICES/OAUTHCLIENTSERVICE.TS CODE IS BELOW
// src/services/OAuthClientService.ts
import axios from 'axios';
import { config } from '../config/config';

export interface OAuthClientConfig {
  clientId: string;
  name: string;
  description?: string;
  grantTypes: string[];
  redirectUris: string[];
  restrictedScopes?: string[];
  clientAuthentication: {
    type: 'SECRET' | 'CERTIFICATE';
    secret?: string;
    certificateRef?: string;
  };
}

export class OAuthClientService {
  private static instance: OAuthClientService;
  private baseUrl: string;
  private adminApiToken: string;

  private constructor() {
    this.baseUrl = config.pingFederate.apiUrl;
    this.adminApiToken = config.pingFederate.adminApiToken;
  }

  public static getInstance(): OAuthClientService {
    if (!OAuthClientService.instance) {
      OAuthClientService.instance = new OAuthClientService();
    }
    return OAuthClientService.instance;
  }

  async createOAuthClient(clientConfig: OAuthClientConfig): Promise<any> {
    try {
      const response = await axios.post(
        `${this.baseUrl}/oauth/clients`,
        clientConfig,
        {
          headers: {
            'Authorization': `Bearer ${this.adminApiToken}`,
            'Content-Type': 'application/json'
          }
        }
      );
      return response.data;
    } catch (error) {
      console.error('Error creating OAuth client:', error);
      throw error;
    }
  }

  async getOAuthClient(clientId: string): Promise<any> {
    try {
      const response = await axios.get(
        `${this.baseUrl}/oauth/clients/${clientId}`,
        {
          headers: {
            'Authorization': `Bearer ${this.adminApiToken}`
          }
        }
      );
      return response.data;
    } catch (error) {
      console.error('Error getting OAuth client:', error);
      throw error;
    }
  }
}

/USERS/AUBREYBEACH/DOCUMENTS/GITHUB/DIVE25/DIVE25/SRC/BACKEND/SRC/SERVICES/OPASERVICE.TS CODE IS BELOW
import axios from 'axios';
import { config } from '../config/config';

export interface UserAttributes {
  uniqueIdentifier: string;
  countryOfAffiliation: string;
  clearance: string;
  coiTags?: string[];
  lacvCode?: string;
}

export interface ResourceAttributes {
  clearance: string;
  releasableTo: string[];
  coiTags?: string[];
  lacvCode?: string;
}

export interface OPAInput {
  user: UserAttributes;
  resource: ResourceAttributes;
}

export class OPAService {
  private static instance: OPAService;

  private constructor() {}

  public static getInstance(): OPAService {
    if (!OPAService.instance) {
      OPAService.instance = new OPAService();
    }
    return OPAService.instance;
  }

  async evaluateAccess(user: UserAttributes, resource: ResourceAttributes): Promise<{
    allow: boolean;
    reason?: string;
  }> {
    try {
      const input: OPAInput = {
        user,
        resource
      };

      const response = await axios.post(config.opa.url, { input });
      
      if (!response.data.result) {
        return {
          allow: false,
          reason: 'Policy evaluation failed'
        };
      }

      return {
        allow: response.data.result.allow === true,
        reason: response.data.result.reason
      };
    } catch (error) {
      console.error('OPA evaluation error:', error);
      return {
        allow: false,
        reason: 'Policy evaluation error'
      };
    }
  }

  async validateAttributes(attributes: UserAttributes): Promise<{
    valid: boolean;
    missingAttributes?: string[];
  }> {
    try {
      const response = await axios.post(`${config.opa.url}/validate_attributes`, {
        input: { user: attributes }
      });

      return {
        valid: response.data.result.valid === true,
        missingAttributes: response.data.result.missing_attrs
      };
    } catch (error) {
      console.error('Attribute validation error:', error);
      return {
        valid: false,
        missingAttributes: []
      };
    }
  }
}

/USERS/AUBREYBEACH/DOCUMENTS/GITHUB/DIVE25/DIVE25/SRC/BACKEND/SRC/SERVICES/SESSIONMANAGEMENTSERVICE.TS CODE IS BELOW
// src/services/SessionManagementService.ts
import axios from 'axios';
import { Redis } from 'ioredis';
import { config } from '../config/config';

export interface SessionMetadata {
  sessionId: string;
  userId: string;
  created: number;
  lastAccessed: number;
  expiresAt: number;
  partnerIdp?: string;
  authenticationMethod: string;
  securityContext: {
    clearance: string;
    coiTags?: string[];
    lacvCode?: string;
  };
}

export class SessionManagementService {
  private static instance: SessionManagementService;
  private redis: Redis;
  private baseUrl: string;

  private constructor() {
    this.redis = new Redis(config.redis);
    this.baseUrl = config.pingFederate.baseUrl;
  }

  public static getInstance(): SessionManagementService {
    if (!SessionManagementService.instance) {
      SessionManagementService.instance = new SessionManagementService();
    }
    return SessionManagementService.instance;
  }

  async createSession(userInfo: any, accessToken: string): Promise<SessionMetadata> {
    const sessionId = `session_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
    const session: SessionMetadata = {
      sessionId,
      userId: userInfo.uniqueIdentifier,
      created: Date.now(),
      lastAccessed: Date.now(),
      expiresAt: Date.now() + (config.pingFederate.sessionValidation.timeoutMinutes * 60 * 1000),
      partnerIdp: userInfo.partnerIdp,
      authenticationMethod: userInfo.authMethod,
      securityContext: {
        clearance: userInfo.clearance,
        coiTags: userInfo.coiTags,
        lacvCode: userInfo.lacvCode
      }
    };

    // Store session in Redis
    await this.redis.setex(
      `session:${sessionId}`,
      config.pingFederate.sessionValidation.timeoutMinutes * 60,
      JSON.stringify(session)
    );

    // Store token to session mapping
    await this.redis.setex(
      `token:${accessToken}`,
      config.pingFederate.sessionValidation.timeoutMinutes * 60,
      sessionId
    );

    return session;
  }

  async validateSession(accessToken: string): Promise<SessionMetadata | null> {
    const sessionId = await this.redis.get(`token:${accessToken}`);
    if (!sessionId) return null;

    const sessionData = await this.redis.get(`session:${sessionId}`);
    if (!sessionData) return null;

    const session: SessionMetadata = JSON.parse(sessionData);
    if (Date.now() > session.expiresAt) {
      await this.terminateSession(sessionId);
      return null;
    }

    // Update last accessed time
    session.lastAccessed = Date.now();
    await this.redis.setex(
      `session:${sessionId}`,
      config.pingFederate.sessionValidation.timeoutMinutes * 60,
      JSON.stringify(session)
    );

    return session;
  }

  async terminateSession(sessionId: string): Promise<void> {
    await this.redis.del(`session:${sessionId}`);
    // Optionally notify PingFederate of session termination
    try {
      await axios.post(`${this.baseUrl}/pf-ws/session-management/end-session`, {
        sessionId
      });
    } catch (error) {
      console.error('Error notifying PingFederate of session termination:', error);
    }
  }
}

/USERS/AUBREYBEACH/DOCUMENTS/GITHUB/DIVE25/DIVE25/SRC/BACKEND/SRC/TESTS/INTEGRATION/FEDERATION.TEST.TS CODE IS BELOW
// src/tests/integration/federation.test.ts
import request from 'supertest';
import { app } from '../../app';
import { FederationPartnerService } from '../../services/FederationPartnerService';
import { OPAService } from '../../services/OPAService';

describe('Federation Integration Tests', () => {
  const partnerService = FederationPartnerService.getInstance();
  const opaService = OPAService.getInstance();

  beforeAll(async () => {
    // Setup test environment
  });

  afterAll(async () => {
    // Cleanup test environment
  });

  describe('Partner Onboarding', () => {
    const testPartner = {
      partnerId: 'TEST_PARTNER',
      partnerName: 'Test Partner',
      federationType: 'SAML',
      metadata: {
        url: 'https://test-partner.example.com/metadata'
      },
      attributeMapping: {
        uniqueIdentifier: 'uid',
        countryOfAffiliation: 'country',
        clearance: 'clearanceLevel'
      }
    };

    it('should successfully onboard a new partner', async () => {
      const response = await request(app)
        .post('/api/partners/onboard')
        .send({ partnerConfig: testPartner })
        .set('Authorization', 'Bearer test-admin-token');

      expect(response.status).toBe(200);
      expect(response.body).toHaveProperty('partnerConnection');
    });

    it('should validate partner metadata', async () => {
      const response = await request(app)
        .post('/api/partners/validate-metadata')
        .send({ metadataUrl: testPartner.metadata.url })
        .set('Authorization', 'Bearer test-admin-token');

      expect(response.status).toBe(200);
      expect(response.body.valid).toBe(true);
    });
  });

  describe('Access Control', () => {
    const testUser = {
      uniqueIdentifier: 'test-user',
      countryOfAffiliation: 'USA',
      clearance: 'NATO SECRET',
      coiTags: ['OpAlpha'],
      lacvCode: 'LACV001'
    };

    const testDocument = {
      clearance: 'NATO CONFIDENTIAL',
      releasableTo: ['NATO', 'FVEY'],
      coiTags: ['OpAlpha'],
      lacvCode: 'LACV001'
    };

    it('should allow access when policy conditions are met', async () => {
      const accessResult = await opaService.evaluateAccess(testUser, testDocument);
      expect(accessResult.allow).toBe(true);
    });

    it('should deny access when clearance is insufficient', async () => {
      const lowClearanceUser = { ...testUser, clearance: 'NATO RESTRICTED' };
      const accessResult = await opaService.evaluateAccess(lowClearanceUser, testDocument);
      expect(accessResult.allow).toBe(false);
    });
  });

  describe('Federation Monitoring', () => {
    it('should record and retrieve partner metrics', async () => {
      const response = await request(app)
        .get('/api/monitoring/partners/TEST_PARTNER/metrics')
        .set('Authorization', 'Bearer test-admin-token');

      expect(response.status).toBe(200);
      expect(response.body).toHaveProperty('activePartners');
      expect(response.body).toHaveProperty('authenticationAttempts');
    });

    it('should detect and alert on partner health issues', async () => {
      const response = await request(app)
        .get('/api/monitoring/health/alerts')
        .set('Authorization', 'Bearer test-admin-token');

      expect(response.status).toBe(200);
      expect(Array.isArray(response.body)).toBe(true);
    });
  });
});

/USERS/AUBREYBEACH/DOCUMENTS/GITHUB/DIVE25/DIVE25/SRC/BACKEND/SRC/TESTS/JEST.CONFIG.TS CODE IS BELOW
// src/tests/jest.config.ts
export default {
    preset: 'ts-jest',
    testEnvironment: 'node',
    roots: ['<rootDir>/src'],
    testMatch: ['**/__tests__/**/*.ts', '**/?(*.)+(spec|test).ts'],
    transform: {
      '^.+\\.ts$': 'ts-jest'
    },
    coverageDirectory: 'coverage',
    collectCoverageFrom: [
      'src/**/*.ts',
      '!src/**/*.d.ts',
      '!src/tests/**/*.ts'
    ]
  };

/USERS/AUBREYBEACH/DOCUMENTS/GITHUB/DIVE25/DIVE25/SRC/BACKEND/SRC/TESTS/UNIT/METADATAVALIDATIONSERVICE.TEST.JS CODE IS BELOW
// src/tests/unit/MetadataValidationService.test.ts
import { MetadataValidationService } from '../../services/MetadataValidationService';

describe('MetadataValidationService', () => {
  const service = MetadataValidationService.getInstance();

  const validMetadata = `<?xml version="1.0"?>
    <md:EntityDescriptor xmlns:md="urn:oasis:names:tc:SAML:2.0:metadata"
                        entityID="https://test-partner.example.com">
      <!-- Add valid metadata XML structure -->
    </md:EntityDescriptor>`;

  it('should validate correct metadata', async () => {
    const result = await service.validateMetadataContent(validMetadata);
    expect(result.valid).toBe(true);
    expect(result.errors).toHaveLength(0);
  });

  it('should detect missing required elements', async () => {
    const invalidMetadata = `<?xml version="1.0"?>
      <md:EntityDescriptor xmlns:md="urn:oasis:names:tc:SAML:2.0:metadata">
      </md:EntityDescriptor>`;
    
    const result = await service.validateMetadataContent(invalidMetadata);
    expect(result.valid).toBe(false);
    expect(result.errors).toContain('Missing entityID attribute');
  });
});

/USERS/AUBREYBEACH/DOCUMENTS/GITHUB/DIVE25/DIVE25/SRC/BACKEND/TSCONFIG.JSON CODE IS BELOW
{
  "compilerOptions": {
    "target": "es2020",
    "module": "commonjs",
    "outDir": "./dist",
    "rootDir": "./src",
    "strict": true,
    "esModuleInterop": true,
    "skipLibCheck": true,
    "forceConsistentCasingInFileNames": true
  },
  "include": ["src/**/*"],
  "exclude": ["node_modules"]
}

/USERS/AUBREYBEACH/DOCUMENTS/GITHUB/DIVE25/DIVE25/SRC/POLICIES/ACCESS_POLICY.REGO CODE IS BELOW
###############################################################################
#  NATO ABAC Access Policy with Extended Attributes and Error Handling
#
#  This policy enforces access decisions based on user attributes and resource
#  metadata in a multi-partner NATO environment. It integrates STANAG-driven 
#  rules (4774, 4778, 5636) with controlled enumerations including classification
#  levels, releasability markers, COI tags, and LACV codes.
#
#  Components:
#    - Mandatory Attributes Check
#    - Classification Comparison
#    - Releasability Check for NATO/EU/Partner
#    - Communities of Interest (COI) Verification
#    - Optional LACV Code Verification
###############################################################################

package access_policy

default allow = false

###############################################################################
# 1. Enumerations and Controlled Mappings
###############################################################################
clearance = {
  "UNCLASSIFIED":          0,
  "RESTRICTED":            1,
  "NATO CONFIDENTIAL":     2,
  "NATO SECRET":           3,
  "COSMIC TOP SECRET":     4
}

nato_nations = {
  "ALB": true,
  "BGR": true,
  "HRV": true,
  "CZE": true,
  "DNK": true,
  "EST": true,
  "FIN": true,
  "GRC": true,
  "HUN": true,
  "ISL": true,
  "LVA": true,
  "LTU": true,
  "LUX": true,
  "MNE": true,
  "MKD": true,
  "NOR": true,
  "POL": true,
  "PRT": true,
  "ROU": true,
  "SVK": true,
  "SVN": true,
  "SWE": true,
  "USA": true,
  "GBR": true,
  "FRA": true,
  "DEU": true,
  "CAN": true,
  "ITA": true,
  "NLD": true,
  "BEL": true,
  "ESP": true,
  "TUR": true
}

fvey_nations = {
  "AUS": true,
  "CAN": true,
  "NZL": true,
  "GBR": true,
  "USA": true
}

eu_nations = {
  "FRA": true,
  "DEU": true,
  "ITA": true,
  "ESP": true,
  "BEL": true,
  "NLD": true
}

valid_coi_tags = {
  "OpAlpha": true,
  "OpBravo": true,
  "OpGamma": true,
  "MissionX": true,
  "MissionZ": true
}

valid_lacv_codes = {
  "LACV001": true,
  "LACV002": true,
  "LACV003": true,
  "LACV004": true
}

###############################################################################
# 2. Required Attributes
###############################################################################
required_user_attrs = [
  "uniqueIdentifier",
  "countryOfAffiliation",
  "clearance"
]

###############################################################################
# 3. Main Access Rule
###############################################################################
allow if {
  user_has_mandatory_attrs
  user_clearance_ok
  user_releasability_ok
  user_coi_ok
  optional_lacv_ok
}

###############################################################################
# 4. Mandatory Attributes Check
###############################################################################
user_has_mandatory_attrs if {
  count(missing_attrs) == 0
}

missing_attrs = [
  attr |
  required_user_attrs[_] == attr
  attr_missing(attr)
]

attr_missing(attr) if {
  not attr in {k | k := input.user[_]}
}

attr_missing(attr) if {
  attr in {k | k := input.user[_]}
  input.user[attr] == ""
}

###############################################################################
# 5. Clearance Verification
###############################################################################
user_clearance_ok if {
  clearance_order[input.user.clearance] >= clearance_order[input.resource.clearance]
}

###############################################################################
# 6. Releasability Verification
###############################################################################
user_releasability_ok if {
  some label in input.resource.releasableTo
  user_has_access_label(label)
}

user_has_access_label(label) if {
  label == "NATO"
  nato_nations[input.user.countryOfAffiliation]
}

user_has_access_label(label) if {
  label == "EU"
  eu_nations[input.user.countryOfAffiliation]
}

user_has_access_label[label] if {
  label == "FVEY"
  fvey_nations[input.user.countryOfAffiliation]
}

user_has_access_label(label) if {
  label == "PARTNERX"
  input.user.countryOfAffiliation == "PARTNERX"
}

###############################################################################
# 7. Communities of Interest (COI) Verification
###############################################################################
user_coi_ok if {
  not input.resource.coiTags
}

user_coi_ok if {
  input.resource.coiTags
  is_array(input.resource.coiTags)
  all_coi_tags_valid(input.resource.coiTags)
  subset(input.resource.coiTags, input.user.coiTags)
}

all_coi_tags_valid(doc_tags) if {
  every t in doc_tags {
    valid_coi_tags[t]
  }
}

subset(required, have) if {
  every r in required {
    r in have
  }
}

###############################################################################
# 8. Optional LACV Verification
###############################################################################
optional_lacv_ok if {
  not input.resource.lacvCode
}

optional_lacv_ok if {
  input.resource.lacvCode
  input.user.lacvCode
  valid_lacv_codes[input.user.lacvCode]
}

optional_lacv_ok if {
  input.resource.lacvCode
  input.user.clearance == "COSMIC TOP SECRET"
}

###############################################################################
# 9. Helper Functions
###############################################################################
is_array(x) = true {
  count(x) >= 0
}

is_array(x) = false {
  not count(x)
}

/USERS/AUBREYBEACH/DOCUMENTS/GITHUB/DIVE25/DIVE25/SRC/POLICIES/PARTNER_POLICIES.REGO CODE IS BELOW
package dive25.partner_policies

import data.access_policy.clearance
import data.access_policy.nato_nations
import data.access_policy.fvey_nations

# Partner-specific policy definitions
partner_policies = {
    "FVEY": {
        "allowed_classifications": [
            "UNCLASSIFIED",
            "RESTRICTED",
            "NATO CONFIDENTIAL",
            "NATO SECRET"
        ],
        "required_caveats": ["FVEY"],
        "allowed_coi_tags": ["OpAlpha", "OpBravo"]
    },
    "NATO": {
        "allowed_classifications": [
            "UNCLASSIFIED",
            "RESTRICTED",
            "NATO CONFIDENTIAL",
            "NATO SECRET",
            "COSMIC TOP SECRET"
        ],
        "required_caveats": [],
        "allowed_coi_tags": ["OpAlpha", "OpBravo", "OpGamma", "MissionX", "MissionZ"]
    },
    "EU": {
        "allowed_classifications": [
            "UNCLASSIFIED",
            "RESTRICTED",
            "NATO CONFIDENTIAL"
        ],
        "required_caveats": ["EU"],
        "allowed_coi_tags": ["MissionX"]
    }
}

# Partner-specific access control
allow {
    basic_access_allowed
    partner_specific_rules_satisfied
}

# Check if partner has access to the classification level
partner_specific_rules_satisfied {
    partner_type := get_partner_type(input.user.countryOfAffiliation)
    policy := partner_policies[partner_type]
    
    # Check classification level
    input.resource.classification in policy.allowed_classifications
    
    # Check required caveats
    all_required_caveats_present(policy.required_caveats)
    
    # Check COI tags
    all_coi_tags_allowed(policy.allowed_coi_tags)
}

# Helper functions
get_partner_type(country) = "FVEY" {
    fvey_nations[country]
}

get_partner_type(country) = "NATO" {
    nato_nations[country]
}

get_partner_type(country) = "EU" {
    eu_nations[country]
}

all_required_caveats_present(required_caveats) {
    count(required_caveats) == 0
}

all_required_caveats_present(required_caveats) {
    count(required_caveats) > 0
    every caveat in required_caveats {
        caveat in input.user.caveats
    }
}

all_coi_tags_allowed(allowed_tags) {
    count(input.resource.coiTags) == 0
}

all_coi_tags_allowed(allowed_tags) {
    count(input.resource.coiTags) > 0
    every tag in input.resource.coiTags {
        tag in allowed_tags
    }
}

/USERS/AUBREYBEACH/DOCUMENTS/GITHUB/DIVE25/DIVE25/TESTS/INTEGRATION/FEDERATION-TESTS.TS CODE IS BELOW
// dive25/tests/integration/federation-tests.ts
import axios from 'axios';
import { expect } from 'chai';

describe('DIVE25 Federation Integration Tests', () => {
  const baseUrl = process.env.TEST_ENV === 'prod' ? 
    'https://dive25.com' : 'https://dive25.local';

  describe('Authentication Flow', () => {
    it('should initiate federation SSO', async () => {
      const response = await axios.get(`${baseUrl}/sso/initiate`);
      expect(response.status).to.equal(302);
      expect(response.headers.location).to.include('pingfederate');
    });

    it('should validate NATO attributes', async () => {
      // Test with mock user data
      const userData = {
        clearance: 'NATO SECRET',
        countryOfAffiliation: 'USA',
        coiTags: ['OpAlpha']
      };
      // Implementation of test
    });
  });

  describe('Document Access', () => {
    // Document access tests
  });
});

/USERS/AUBREYBEACH/DOCUMENTS/GITHUB/DIVE25/INPUT/PINGDIRECTORY.LIC CODE IS BELOW
ID=00755094
Product=PingDirectory
Version=10.2.0.0
EnforcementType=3
Tier=Free
IssueDate=2025-01-21
ExpirationDate=2025-04-30
GracePeriod=1
DeploymentMethod=Traditional
Name=PingDirectory-10.2.0.0-Development
SignCode=FF03
Signature=302C02142280335A1BA552F81589DB551BBFDE79F2C3A1D002146E1C7A4E9CB4D5BE6FF56FD3BF20C9769ADA2FA0

/USERS/AUBREYBEACH/DOCUMENTS/GITHUB/DIVE25/INPUT/PINGACCESS.LIC CODE IS BELOW
ID=00757626
Product=PingAccess
Version=8.2
EnforcementType=3
Tier=Free
IssueDate=2025-01-29
ExpirationDate=2025-03-01
GracePeriod=1
DeploymentMethod=Traditional
Name=PingAccess-8.2-Development
SignCode=FF03
Signature=302D02150091115F807DDD5A4B7BD87E069F1B6455E92A154002146419FA54C07D0BC299064BE8786DCE61327CD6DD

/USERS/AUBREYBEACH/DOCUMENTS/GITHUB/DIVE25/INPUT/PINGFEDERATE.LIC CODE IS BELOW
ID=00735459
WSTrustSTS=true
OAuth=true
SaasProvisioning=true
Product=PingFederate
Version=12.1
EnforcementType=3
Tier=Free
IssueDate=2024-11-21
ExpirationDate=2025-03-01
GracePeriod=1
DeploymentMethod=Traditional
SignCode=FF0F
Signature=302C0214469A8FC86A4123451531600F332EFBDCA8BC9F58021432D21CF52CB6DBBADC0FD803DEDB1E1114D5D377

/USERS/AUBREYBEACH/DOCUMENTS/GITHUB/DIVE25/MERGE-REPO.JS CODE IS BELOW
const fs = require('fs');
const path = require('path');
const readline = require('readline');

const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
});

async function promptUser(question) {
  return new Promise((resolve) => {
    rl.question(question, (answer) => {
      resolve(answer);
    });
  });
}

async function selectFiles(currentDir, excludePatterns) {
  const selectedFiles = [];

  const files = await fs.promises.readdir(currentDir);
  for (const file of files) {
    const filePath = path.join(currentDir, file);
    const stats = await fs.promises.stat(filePath);

    if (stats.isDirectory()) {
      if (!excludePatterns.includes(file)) {
        const includeFolder = await promptUser(`Include folder '${file}'? (y/n) `);
        if (includeFolder.toLowerCase() === 'y') {
          const subFiles = await selectFiles(filePath, excludePatterns);
          selectedFiles.push(...subFiles);
        }
      }
    } else {
      const includeFile = await promptUser(`Include file '${file}'? (y/n) `);
      if (includeFile.toLowerCase() === 'y') {
        selectedFiles.push(filePath);
      }
    }
  }

  return selectedFiles;
}

async function mergeFiles(selectedFiles, outputFilePath) {
  let mergedContent = '';

  for (const filePath of selectedFiles) {
    const fileContent = await fs.promises.readFile(filePath, 'utf-8');
    const sectionHeader = `\n${filePath.toUpperCase()} CODE IS BELOW\n`;
    mergedContent += sectionHeader + fileContent + '\n';
  }

  await fs.promises.writeFile(outputFilePath, mergedContent);
}

async function createOutputDirectory(outputDirPath) {
  try {
    await fs.promises.access(outputDirPath);
  } catch (error) {
    await fs.promises.mkdir(outputDirPath);
  }
}

function getTimestampedFileName() {
  const timestamp = new Date().toISOString().replace(/:/g, '-');
  return `merged-repo-${timestamp}.txt`;
}

async function main() {
  const currentDir = process.cwd();

  console.log('Select files and folders to include in the merge:');
  const excludePatterns = ['node_modules']; // Add more patterns if needed
  const selectedFiles = await selectFiles(currentDir, excludePatterns);

  const outputDirName = 'llm_text_transcripts';
  const outputDirPath = path.join(currentDir, outputDirName);
  await createOutputDirectory(outputDirPath);

  const outputFileName = getTimestampedFileName();
  const outputFilePath = path.join(outputDirPath, outputFileName);
  await mergeFiles(selectedFiles, outputFilePath);

  console.log(`Merged repository saved to: ${outputFilePath}`);
  rl.close();
}

main().catch(console.error);
